"use strict";export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","additionalProperties":false,"default":{"type":"object","properties":{"version":{"type":"string","const":"v0"},"playerStartModList":{"items":{"$ref":"#/definitions/PlayerStartMod"},"type":"array"},"resources":{"type":"array","items":{"$ref":"#/definitions/Resource"}},"world":{"$ref":"#/definitions/World"},"components":{"type":"object","properties":{"guildHall":{"$ref":"#/definitions/GuildHall"},"character":{"$ref":"#/definitions/Character"},"blacksmith":{"$ref":"#/definitions/Blacksmith"},"treasury":{"$ref":"#/definitions/Treasury"},"achievements":{"$ref":"#/definitions/Achievements"}},"additionalProperties":false}},"additionalProperties":false,"required":["playerStartModList","resources","version","world"],"definitions":{"Resource":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"$ref":"#/definitions/ResourceName"},"sticky":{"type":"boolean"},"hiddenBeforeMutation":{"type":"boolean"}},"additionalProperties":false,"required":["hiddenBeforeMutation","id","name","sticky"]},"Id":{"type":"string","pattern":"^[a-f0-9]{6}$"},"ResourceName":{"enum":["Copper","Gold","Silver"],"type":"string"},"World":{"type":"object","properties":{"enemyBaseLifeList":{"description":"Enemy life for each level starting at level 1. This will determine the max level. Max Level == array.length + 1.","items":{"$ref":"#/definitions/EnemyBaseLife"},"type":"array"},"enemyBaseCountList":{"description":"Number of enemies for each level starting at level 1","items":{"$ref":"#/definitions/EnemyBaseCount"},"type":"array"},"enemyList":{"minItems":1,"type":"array","items":{"$ref":"#/definitions/Enemy"}},"worldList":{"minItems":1,"description":"Each world is completly independent of one another","type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"modList":{"items":{"$ref":"#/definitions/WorldMod"},"description":"Each world can have global Area Modifiers applied","type":"array"}},"additionalProperties":false,"required":["id","modList"]}}},"additionalProperties":false,"required":["enemyBaseCountList","enemyBaseLifeList","enemyList","worldList"]},"Enemy":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"level":{"$ref":"#/definitions/LevelRange"},"world":{"$ref":"#/definitions/LevelRange"},"weight":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["id","name"]},"LevelRange":{"type":"object","properties":{"min":{"type":"integer","minimum":1,"default":1},"max":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["min"]},"GuildHall":{"type":"object","properties":{"requirements":{"$ref":"#/definitions/Requirements"},"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/GuildHallMod"},"type":"array"}},"additionalProperties":false}},"guildList":{"type":"array","items":{"$ref":"#/definitions/Guild"}},"guildClassList":{"type":"array","items":{"$ref":"#/definitions/GuildClass"}}},"additionalProperties":false,"required":["guildClassList","guildList"]},"Requirements":{"type":"object","properties":{"curLevel":{"type":"integer","minimum":1,"default":1},"world":{"type":"integer","minimum":1}},"additionalProperties":false},"Cost":{"type":"object","properties":{"name":{"$ref":"#/definitions/ResourceName"},"value":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["name","value"]},"Guild":{"type":"object","properties":{"name":{"$ref":"#/definitions/GuildName"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList","name"]},"GuildName":{"enum":["Arcane","Vanguard","Wanderer"],"type":"string"},"GuildClass":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"guildName":{"$ref":"#/definitions/GuildName"},"requirements":{"type":"object","properties":{"guildHallLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["guildHallLevel"]},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["guildName","id","modList","name"]},"Character":{"type":"object","properties":{"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/SkillsUpgradeMod"},"type":"array"}},"additionalProperties":false}},"attackSkills":{"type":"object","properties":{"attackSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/AttackSkill"}}},"additionalProperties":false,"required":["attackSkillList"]},"auraSkills":{"type":"object","properties":{"requirements":{"type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"auraSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/AuraSkill"}}},"additionalProperties":false,"required":["auraSkillList"]},"passiveSkills":{"type":"object","properties":{"insightCapacityEnhancerList":{"description":"TJS-minItems 1","type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"probability":{"type":"integer","minimum":1,"default":100,"description":"Percent = 1/Probability"},"insight":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["id","insight","name","probability"]}},"passiveSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/PassiveSkill"}}},"additionalProperties":false,"required":["insightCapacityEnhancerList","passiveSkillList"]}},"additionalProperties":false},"AttackSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"manaCost":{"type":"integer","minimum":0},"attackSpeed":{"default":1,"minimum":0.1,"type":"number"},"attackEffectiveness":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["attackEffectiveness","attackSpeed","manaCost","modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]},"AuraSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"manaCost":{"type":"integer","minimum":0},"baseDuration":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["baseDuration","manaCost","modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]},"PassiveSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"insightCost":{"type":"integer","minimum":0},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList"]}}},"additionalProperties":false,"required":["id","insightCost","name","rankList"]},"Blacksmith":{"type":"object","properties":{"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/BlacksmithUpgradeMod"},"type":"array"}},"additionalProperties":false}},"itemList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"$ref":"#/definitions/BlacksmithItemName"},"reforgeWeights":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["id","name","reforgeWeights"]}},"modLists":{"type":"array","items":{"type":"array","items":{"$ref":"#/definitions/BlacksmithMod"}}},"crafting":{"type":"object","properties":{"advancedReforge":{"type":"object","properties":{"requirements":{"type":"object","properties":{"blacksmithLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["blacksmithLevel"]}},"additionalProperties":false,"required":["requirements"]},"craftList":{"type":"array","items":{"$ref":"#/definitions/BlacksmithCraft"}}},"additionalProperties":false,"required":["craftList"]}},"additionalProperties":false,"required":["crafting","itemList","modLists"]},"BlacksmithItemName":{"enum":["Armour","Weapon"],"type":"string"},"BlacksmithMod":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"level":{"type":"integer","minimum":1,"default":1},"weight":{"type":"integer","minimum":0,"default":100},"mod":{"$ref":"#/definitions/PlayerMod"},"itemFilter":{"type":"array","items":{"enum":["Armour","Weapon"],"type":"string"}}},"additionalProperties":false,"required":["id","level","mod","weight"]},"PlayerMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"}]},"BlacksmithCraft":{"type":"object","properties":{"desc":{"$ref":"#/definitions/BlacksmithCraftDescription"},"cost":{"$ref":"#/definitions/Cost"},"successRates":{"type":"object","properties":{"min":{"type":"integer","minimum":0},"max":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["max","min"]}},"additionalProperties":false,"required":["desc","successRates"]},"BlacksmithCraftDescription":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"Reforge item with new random modifiers"},{"pattern":"Add new modifier"},{"pattern":"Remove modifier"},{"pattern":"Upgrade modifier"},{"pattern":"Randomize numerical values of a modifier"},{"pattern":"Randomize all numerical values"}]},"Treasury":{"type":"object","properties":{"requirements":{"$ref":"#/definitions/Requirements"},"levelList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/TreasuryUpgradeMod"},"type":"array"}},"additionalProperties":false}},"artifacts":{"$ref":"#/definitions/Artifacts"}},"additionalProperties":false},"Artifacts":{"type":"object","properties":{"artifactList":{"minItems":1,"type":"array","items":{"$ref":"#/definitions/Artifact"}}},"additionalProperties":false,"required":["artifactList"]},"Artifact":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"probability":{"type":"integer","minimum":1,"default":100,"description":"Percent = 1/Probability"},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":0,"description":"1 exp everytime its found"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]},"Achievements":{"type":"object","properties":{"achievementList":{"type":"array","items":{"$ref":"#/definitions/Achievement"}}},"additionalProperties":false,"required":["achievementList"]},"Achievement":{"type":"object","properties":{"description":{"$ref":"#/definitions/AchievementDescription"}},"additionalProperties":false,"required":["description"]},"AchievementDescription":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"},{"pattern":"^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"},{"pattern":"^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"}]},"PlayerStartMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"}]},"EnemyMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Less Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Drop \\{(([0-9]+)([-]([0-9]+))?)\\} @Resource\\{(Gold|Silver|Copper)\\} On Death$"}]},"EnemyBaseLife":{"type":"integer","minimum":1,"maximum":9007199254740991},"EnemyBaseCount":{"type":"integer","minimum":1,"maximum":9007199254740991},"SkillsUpgradeMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]},"BlacksmithUpgradeMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]},"TreasuryUpgradeMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]},"GuildHallMod":{"$ref":"#/definitions/GuildHallMod","type":"string"},"WorldMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"},{"pattern":"^Enemies Drop \\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources On Death$"}]}},"$schema":"http://json-schema.org/draft-07/schema#"},"definitions":{"Resource":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"$ref":"#/definitions/ResourceName"},"sticky":{"type":"boolean"},"hiddenBeforeMutation":{"type":"boolean"}},"additionalProperties":false,"required":["hiddenBeforeMutation","id","name","sticky"]},"Id":{"type":"string","pattern":"^[a-f0-9]{6}$"},"ResourceName":{"enum":["Copper","Gold","Silver"],"type":"string"},"World":{"type":"object","properties":{"enemyBaseLifeList":{"description":"Enemy life for each level starting at level 1. This will determine the max level. Max Level == array.length + 1.","items":{"$ref":"#/definitions/EnemyBaseLife"},"type":"array"},"enemyBaseCountList":{"description":"Number of enemies for each level starting at level 1","items":{"$ref":"#/definitions/EnemyBaseCount"},"type":"array"},"enemyList":{"minItems":1,"type":"array","items":{"$ref":"#/definitions/Enemy"}},"worldList":{"minItems":1,"description":"Each world is completly independent of one another","type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"modList":{"items":{"$ref":"#/definitions/WorldMod"},"description":"Each world can have global Area Modifiers applied","type":"array"}},"additionalProperties":false,"required":["id","modList"]}}},"additionalProperties":false,"required":["enemyBaseCountList","enemyBaseLifeList","enemyList","worldList"]},"Enemy":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"level":{"$ref":"#/definitions/LevelRange"},"world":{"$ref":"#/definitions/LevelRange"},"weight":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["id","name"]},"LevelRange":{"type":"object","properties":{"min":{"type":"integer","minimum":1,"default":1},"max":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["min"]},"GuildHall":{"type":"object","properties":{"requirements":{"$ref":"#/definitions/Requirements"},"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/GuildHallMod"},"type":"array"}},"additionalProperties":false}},"guildList":{"type":"array","items":{"$ref":"#/definitions/Guild"}},"guildClassList":{"type":"array","items":{"$ref":"#/definitions/GuildClass"}}},"additionalProperties":false,"required":["guildClassList","guildList"]},"Requirements":{"type":"object","properties":{"curLevel":{"type":"integer","minimum":1,"default":1},"world":{"type":"integer","minimum":1}},"additionalProperties":false},"Cost":{"type":"object","properties":{"name":{"$ref":"#/definitions/ResourceName"},"value":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["name","value"]},"Guild":{"type":"object","properties":{"name":{"$ref":"#/definitions/GuildName"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList","name"]},"GuildName":{"enum":["Arcane","Vanguard","Wanderer"],"type":"string"},"GuildClass":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"guildName":{"$ref":"#/definitions/GuildName"},"requirements":{"type":"object","properties":{"guildHallLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["guildHallLevel"]},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["guildName","id","modList","name"]},"Character":{"type":"object","properties":{"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/SkillsUpgradeMod"},"type":"array"}},"additionalProperties":false}},"attackSkills":{"type":"object","properties":{"attackSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/AttackSkill"}}},"additionalProperties":false,"required":["attackSkillList"]},"auraSkills":{"type":"object","properties":{"requirements":{"type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"auraSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/AuraSkill"}}},"additionalProperties":false,"required":["auraSkillList"]},"passiveSkills":{"type":"object","properties":{"insightCapacityEnhancerList":{"description":"TJS-minItems 1","type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"probability":{"type":"integer","minimum":1,"default":100,"description":"Percent = 1/Probability"},"insight":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["id","insight","name","probability"]}},"passiveSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/PassiveSkill"}}},"additionalProperties":false,"required":["insightCapacityEnhancerList","passiveSkillList"]}},"additionalProperties":false},"AttackSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"manaCost":{"type":"integer","minimum":0},"attackSpeed":{"default":1,"minimum":0.1,"type":"number"},"attackEffectiveness":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["attackEffectiveness","attackSpeed","manaCost","modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]},"AuraSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"manaCost":{"type":"integer","minimum":0},"baseDuration":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["baseDuration","manaCost","modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]},"PassiveSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"insightCost":{"type":"integer","minimum":0},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList"]}}},"additionalProperties":false,"required":["id","insightCost","name","rankList"]},"Blacksmith":{"type":"object","properties":{"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/BlacksmithUpgradeMod"},"type":"array"}},"additionalProperties":false}},"itemList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"$ref":"#/definitions/BlacksmithItemName"},"reforgeWeights":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["id","name","reforgeWeights"]}},"modLists":{"type":"array","items":{"type":"array","items":{"$ref":"#/definitions/BlacksmithMod"}}},"crafting":{"type":"object","properties":{"advancedReforge":{"type":"object","properties":{"requirements":{"type":"object","properties":{"blacksmithLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["blacksmithLevel"]}},"additionalProperties":false,"required":["requirements"]},"craftList":{"type":"array","items":{"$ref":"#/definitions/BlacksmithCraft"}}},"additionalProperties":false,"required":["craftList"]}},"additionalProperties":false,"required":["crafting","itemList","modLists"]},"BlacksmithItemName":{"enum":["Armour","Weapon"],"type":"string"},"BlacksmithMod":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"level":{"type":"integer","minimum":1,"default":1},"weight":{"type":"integer","minimum":0,"default":100},"mod":{"$ref":"#/definitions/PlayerMod"},"itemFilter":{"type":"array","items":{"enum":["Armour","Weapon"],"type":"string"}}},"additionalProperties":false,"required":["id","level","mod","weight"]},"PlayerMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"}]},"BlacksmithCraft":{"type":"object","properties":{"desc":{"$ref":"#/definitions/BlacksmithCraftDescription"},"cost":{"$ref":"#/definitions/Cost"},"successRates":{"type":"object","properties":{"min":{"type":"integer","minimum":0},"max":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["max","min"]}},"additionalProperties":false,"required":["desc","successRates"]},"BlacksmithCraftDescription":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"Reforge item with new random modifiers"},{"pattern":"Add new modifier"},{"pattern":"Remove modifier"},{"pattern":"Upgrade modifier"},{"pattern":"Randomize numerical values of a modifier"},{"pattern":"Randomize all numerical values"}]},"Treasury":{"type":"object","properties":{"requirements":{"$ref":"#/definitions/Requirements"},"levelList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/TreasuryUpgradeMod"},"type":"array"}},"additionalProperties":false}},"artifacts":{"$ref":"#/definitions/Artifacts"}},"additionalProperties":false},"Artifacts":{"type":"object","properties":{"artifactList":{"minItems":1,"type":"array","items":{"$ref":"#/definitions/Artifact"}}},"additionalProperties":false,"required":["artifactList"]},"Artifact":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"probability":{"type":"integer","minimum":1,"default":100,"description":"Percent = 1/Probability"},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":0,"description":"1 exp everytime its found"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]},"Achievements":{"type":"object","properties":{"achievementList":{"type":"array","items":{"$ref":"#/definitions/Achievement"}}},"additionalProperties":false,"required":["achievementList"]},"Achievement":{"type":"object","properties":{"description":{"$ref":"#/definitions/AchievementDescription"}},"additionalProperties":false,"required":["description"]},"AchievementDescription":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"},{"pattern":"^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"},{"pattern":"^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"}]},"PlayerStartMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"}]},"EnemyMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Less Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Drop \\{(([0-9]+)([-]([0-9]+))?)\\} @Resource\\{(Gold|Silver|Copper)\\} On Death$"}]},"EnemyBaseLife":{"type":"integer","minimum":1,"maximum":9007199254740991},"EnemyBaseCount":{"type":"integer","minimum":1,"maximum":9007199254740991},"SkillsUpgradeMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]},"BlacksmithUpgradeMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]},"TreasuryUpgradeMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]},"GuildHallMod":{"$ref":"#/definitions/GuildHallMod","type":"string"},"WorldMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"},{"pattern":"^Enemies Drop \\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources On Death$"}]}},"properties":{"version":{"type":"string","const":"v0"},"playerStartModList":{"items":{"$ref":"#/definitions/PlayerStartMod"},"type":"array"},"resources":{"type":"array","items":{"$ref":"#/definitions/Resource"}},"world":{"$ref":"#/definitions/World"},"components":{"type":"object","properties":{"guildHall":{"$ref":"#/definitions/GuildHall"},"character":{"$ref":"#/definitions/Character"},"blacksmith":{"$ref":"#/definitions/Blacksmith"},"treasury":{"$ref":"#/definitions/Treasury"},"achievements":{"$ref":"#/definitions/Achievements"}},"additionalProperties":false}},"required":["playerStartModList","resources","version","world"],"type":"object"};const schema12 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"}]};const pattern0 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$", "u");const pattern1 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$", "u");const pattern2 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$", "u");const pattern3 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$", "u");const pattern4 = new RegExp("^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$", "u");const pattern5 = new RegExp("^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$", "u");const pattern6 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$", "u");const pattern7 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$", "u");const pattern8 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$", "u");const pattern9 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$", "u");const pattern10 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$", "u");const pattern11 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$", "u");const pattern12 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$", "u");const pattern13 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$", "u");const pattern14 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$", "u");const pattern15 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$", "u");const pattern16 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$", "u");const pattern17 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$", "u");const pattern18 = new RegExp("^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$", "u");const pattern19 = new RegExp("^[^#]*$", "u");const schema13 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"$ref":"#/definitions/ResourceName"},"sticky":{"type":"boolean"},"hiddenBeforeMutation":{"type":"boolean"}},"additionalProperties":false,"required":["hiddenBeforeMutation","id","name","sticky"]};const schema14 = {"type":"string","pattern":"^[a-f0-9]{6}$"};const schema15 = {"enum":["Copper","Gold","Silver"],"type":"string"};const pattern20 = new RegExp("^[a-f0-9]{6}$", "u");function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.hiddenBeforeMutation === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "hiddenBeforeMutation"},message:"must have required property '"+"hiddenBeforeMutation"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.id === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.name === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.sticky === undefined){const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "sticky"},message:"must have required property '"+"sticky"+"'"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}for(const key0 in data){if(!((((key0 === "id") || (key0 === "name")) || (key0 === "sticky")) || (key0 === "hiddenBeforeMutation"))){delete data[key0];}}if(data.id !== undefined){let data0 = data.id;if(typeof data0 === "string"){if(!pattern20.test(data0)){const err4 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}else {const err5 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.name !== undefined){let data1 = data.name;if(typeof data1 !== "string"){const err6 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/ResourceName/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}if(!(((data1 === "Copper") || (data1 === "Gold")) || (data1 === "Silver"))){const err7 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/ResourceName/enum",keyword:"enum",params:{allowedValues: schema15.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}if(data.sticky !== undefined){if(typeof data.sticky !== "boolean"){const err8 = {instancePath:instancePath+"/sticky",schemaPath:"#/properties/sticky/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}if(data.hiddenBeforeMutation !== undefined){if(typeof data.hiddenBeforeMutation !== "boolean"){const err9 = {instancePath:instancePath+"/hiddenBeforeMutation",schemaPath:"#/properties/hiddenBeforeMutation/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}}else {const err10 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}validate11.errors = vErrors;return errors === 0;}const schema16 = {"type":"object","properties":{"enemyBaseLifeList":{"description":"Enemy life for each level starting at level 1. This will determine the max level. Max Level == array.length + 1.","items":{"$ref":"#/definitions/EnemyBaseLife"},"type":"array"},"enemyBaseCountList":{"description":"Number of enemies for each level starting at level 1","items":{"$ref":"#/definitions/EnemyBaseCount"},"type":"array"},"enemyList":{"minItems":1,"type":"array","items":{"$ref":"#/definitions/Enemy"}},"worldList":{"minItems":1,"description":"Each world is completly independent of one another","type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"modList":{"items":{"$ref":"#/definitions/WorldMod"},"description":"Each world can have global Area Modifiers applied","type":"array"}},"additionalProperties":false,"required":["id","modList"]}}},"additionalProperties":false,"required":["enemyBaseCountList","enemyBaseLifeList","enemyList","worldList"]};const schema17 = {"type":"integer","minimum":1,"maximum":9007199254740991};const schema18 = {"type":"integer","minimum":1,"maximum":9007199254740991};const schema25 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"},{"pattern":"^Enemies Drop \\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources On Death$"}]};const schema19 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"level":{"$ref":"#/definitions/LevelRange"},"world":{"$ref":"#/definitions/LevelRange"},"weight":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["id","name"]};const schema21 = {"type":"object","properties":{"min":{"type":"integer","minimum":1,"default":1},"max":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["min"]};const schema23 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Less Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Drop \\{(([0-9]+)([-]([0-9]+))?)\\} @Resource\\{(Gold|Silver|Copper)\\} On Death$"}]};const pattern22 = new RegExp("^[A-Za-z 0-9]{3,32}$", "u");const pattern23 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$", "u");const pattern24 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$", "u");const pattern25 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Life$", "u");const pattern26 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Less Life$", "u");const pattern27 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$", "u");const pattern28 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$", "u");const pattern29 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Drop \\{(([0-9]+)([-]([0-9]+))?)\\} @Resource\\{(Gold|Silver|Copper)\\} On Death$", "u");function validate14(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.id === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.name === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((((((key0 === "id") || (key0 === "name")) || (key0 === "level")) || (key0 === "world")) || (key0 === "weight")) || (key0 === "modList"))){delete data[key0];}}if(data.id !== undefined){let data0 = data.id;if(typeof data0 === "string"){if(!pattern20.test(data0)){const err2 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}else {const err3 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}if(data.name !== undefined){let data1 = data.name;if(typeof data1 === "string"){if(!pattern22.test(data1)){const err4 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}else {const err5 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.level !== undefined){let data2 = data.level;if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.min === undefined){const err6 = {instancePath:instancePath+"/level",schemaPath:"#/definitions/LevelRange/required",keyword:"required",params:{missingProperty: "min"},message:"must have required property '"+"min"+"'"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}for(const key1 in data2){if(!((key1 === "min") || (key1 === "max"))){delete data2[key1];}}if(data2.min !== undefined){let data3 = data2.min;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){const err7 = {instancePath:instancePath+"/level/min",schemaPath:"#/definitions/LevelRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 1 || isNaN(data3)){const err8 = {instancePath:instancePath+"/level/min",schemaPath:"#/definitions/LevelRange/properties/min/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}}if(data2.max !== undefined){let data4 = data2.max;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){const err9 = {instancePath:instancePath+"/level/max",schemaPath:"#/definitions/LevelRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}if((typeof data4 == "number") && (isFinite(data4))){if(data4 < 1 || isNaN(data4)){const err10 = {instancePath:instancePath+"/level/max",schemaPath:"#/definitions/LevelRange/properties/max/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}}}else {const err11 = {instancePath:instancePath+"/level",schemaPath:"#/definitions/LevelRange/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}if(data.world !== undefined){let data5 = data.world;if(data5 && typeof data5 == "object" && !Array.isArray(data5)){if(data5.min === undefined){const err12 = {instancePath:instancePath+"/world",schemaPath:"#/definitions/LevelRange/required",keyword:"required",params:{missingProperty: "min"},message:"must have required property '"+"min"+"'"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}for(const key2 in data5){if(!((key2 === "min") || (key2 === "max"))){delete data5[key2];}}if(data5.min !== undefined){let data6 = data5.min;if(!(((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6))) && (isFinite(data6)))){const err13 = {instancePath:instancePath+"/world/min",schemaPath:"#/definitions/LevelRange/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}if((typeof data6 == "number") && (isFinite(data6))){if(data6 < 1 || isNaN(data6)){const err14 = {instancePath:instancePath+"/world/min",schemaPath:"#/definitions/LevelRange/properties/min/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}}if(data5.max !== undefined){let data7 = data5.max;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){const err15 = {instancePath:instancePath+"/world/max",schemaPath:"#/definitions/LevelRange/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}if((typeof data7 == "number") && (isFinite(data7))){if(data7 < 1 || isNaN(data7)){const err16 = {instancePath:instancePath+"/world/max",schemaPath:"#/definitions/LevelRange/properties/max/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}}}else {const err17 = {instancePath:instancePath+"/world",schemaPath:"#/definitions/LevelRange/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}if(data.weight !== undefined){let data8 = data.weight;if(!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))){const err18 = {instancePath:instancePath+"/weight",schemaPath:"#/properties/weight/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}if((typeof data8 == "number") && (isFinite(data8))){if(data8 < 0 || isNaN(data8)){const err19 = {instancePath:instancePath+"/weight",schemaPath:"#/properties/weight/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}}if(data.modList !== undefined){let data9 = data.modList;if(Array.isArray(data9)){const len0 = data9.length;for(let i0=0; i0<len0; i0++){let data10 = data9[i0];const _errs30 = errors;let valid9 = false;let passing0 = null;const _errs31 = errors;if(typeof data10 === "string"){if(!pattern23.test(data10)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0){valid9 = true;passing0 = 0;}const _errs32 = errors;if(typeof data10 === "string"){if(!pattern24.test(data10)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 1];}else {if(_valid0){valid9 = true;passing0 = 1;}const _errs33 = errors;if(typeof data10 === "string"){if(!pattern25.test(data10)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Life$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 2];}else {if(_valid0){valid9 = true;passing0 = 2;}const _errs34 = errors;if(typeof data10 === "string"){if(!pattern26.test(data10)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Less Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Less Life$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 3];}else {if(_valid0){valid9 = true;passing0 = 3;}const _errs35 = errors;if(typeof data10 === "string"){if(!pattern27.test(data10)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 4];}else {if(_valid0){valid9 = true;passing0 = 4;}const _errs36 = errors;if(typeof data10 === "string"){if(!pattern28.test(data10)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 5];}else {if(_valid0){valid9 = true;passing0 = 5;}const _errs37 = errors;if(typeof data10 === "string"){if(!pattern29.test(data10)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Drop \\{(([0-9]+)([-]([0-9]+))?)\\} @Resource\\{(Gold|Silver|Copper)\\} On Death$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Drop \\{(([0-9]+)([-]([0-9]+))?)\\} @Resource\\{(Gold|Silver|Copper)\\} On Death$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 6];}else {if(_valid0){valid9 = true;passing0 = 6;}}}}}}}if(!valid9){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}else {errors = _errs30;if(vErrors !== null){if(_errs30){vErrors.length = _errs30;}else {vErrors = null;}}}if(typeof data10 === "string"){if(!pattern19.test(data10)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}else {const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}}else {const err30 = {instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}}else {const err31 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}validate14.errors = vErrors;return errors === 0;}const pattern32 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$", "u");const pattern33 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$", "u");const pattern34 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$", "u");const pattern35 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$", "u");const pattern36 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$", "u");const pattern37 = new RegExp("^Enemies Drop \\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources On Death$", "u");function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.enemyBaseCountList === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "enemyBaseCountList"},message:"must have required property '"+"enemyBaseCountList"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.enemyBaseLifeList === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "enemyBaseLifeList"},message:"must have required property '"+"enemyBaseLifeList"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.enemyList === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "enemyList"},message:"must have required property '"+"enemyList"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.worldList === undefined){const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "worldList"},message:"must have required property '"+"worldList"+"'"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}for(const key0 in data){if(!((((key0 === "enemyBaseLifeList") || (key0 === "enemyBaseCountList")) || (key0 === "enemyList")) || (key0 === "worldList"))){delete data[key0];}}if(data.enemyBaseLifeList !== undefined){let data0 = data.enemyBaseLifeList;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){const err4 = {instancePath:instancePath+"/enemyBaseLifeList/" + i0,schemaPath:"#/definitions/EnemyBaseLife/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if((typeof data1 == "number") && (isFinite(data1))){if(data1 > 9007199254740991 || isNaN(data1)){const err5 = {instancePath:instancePath+"/enemyBaseLifeList/" + i0,schemaPath:"#/definitions/EnemyBaseLife/maximum",keyword:"maximum",params:{comparison: "<=", limit: 9007199254740991},message:"must be <= 9007199254740991"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}if(data1 < 1 || isNaN(data1)){const err6 = {instancePath:instancePath+"/enemyBaseLifeList/" + i0,schemaPath:"#/definitions/EnemyBaseLife/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}}}else {const err7 = {instancePath:instancePath+"/enemyBaseLifeList",schemaPath:"#/properties/enemyBaseLifeList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}if(data.enemyBaseCountList !== undefined){let data2 = data.enemyBaseCountList;if(Array.isArray(data2)){const len1 = data2.length;for(let i1=0; i1<len1; i1++){let data3 = data2[i1];if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){const err8 = {instancePath:instancePath+"/enemyBaseCountList/" + i1,schemaPath:"#/definitions/EnemyBaseCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}if((typeof data3 == "number") && (isFinite(data3))){if(data3 > 9007199254740991 || isNaN(data3)){const err9 = {instancePath:instancePath+"/enemyBaseCountList/" + i1,schemaPath:"#/definitions/EnemyBaseCount/maximum",keyword:"maximum",params:{comparison: "<=", limit: 9007199254740991},message:"must be <= 9007199254740991"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}if(data3 < 1 || isNaN(data3)){const err10 = {instancePath:instancePath+"/enemyBaseCountList/" + i1,schemaPath:"#/definitions/EnemyBaseCount/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}}}else {const err11 = {instancePath:instancePath+"/enemyBaseCountList",schemaPath:"#/properties/enemyBaseCountList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}if(data.enemyList !== undefined){let data4 = data.enemyList;if(Array.isArray(data4)){if(data4.length < 1){const err12 = {instancePath:instancePath+"/enemyList",schemaPath:"#/properties/enemyList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}const len2 = data4.length;for(let i2=0; i2<len2; i2++){if(!(validate14(data4[i2], {instancePath:instancePath+"/enemyList/" + i2,parentData:data4,parentDataProperty:i2,rootData}))){vErrors = vErrors === null ? validate14.errors : vErrors.concat(validate14.errors);errors = vErrors.length;}}}else {const err13 = {instancePath:instancePath+"/enemyList",schemaPath:"#/properties/enemyList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}if(data.worldList !== undefined){let data6 = data.worldList;if(Array.isArray(data6)){if(data6.length < 1){const err14 = {instancePath:instancePath+"/worldList",schemaPath:"#/properties/worldList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}const len3 = data6.length;for(let i3=0; i3<len3; i3++){let data7 = data6[i3];if(data7 && typeof data7 == "object" && !Array.isArray(data7)){if(data7.id === undefined){const err15 = {instancePath:instancePath+"/worldList/" + i3,schemaPath:"#/properties/worldList/items/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}if(data7.modList === undefined){const err16 = {instancePath:instancePath+"/worldList/" + i3,schemaPath:"#/properties/worldList/items/required",keyword:"required",params:{missingProperty: "modList"},message:"must have required property '"+"modList"+"'"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}for(const key1 in data7){if(!((key1 === "id") || (key1 === "modList"))){delete data7[key1];}}if(data7.id !== undefined){let data8 = data7.id;if(typeof data8 === "string"){if(!pattern20.test(data8)){const err17 = {instancePath:instancePath+"/worldList/" + i3+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}else {const err18 = {instancePath:instancePath+"/worldList/" + i3+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}if(data7.modList !== undefined){let data9 = data7.modList;if(Array.isArray(data9)){const len4 = data9.length;for(let i4=0; i4<len4; i4++){let data10 = data9[i4];const _errs28 = errors;let valid16 = false;let passing0 = null;const _errs29 = errors;if(typeof data10 === "string"){if(!pattern32.test(data10)){const err19 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0){valid16 = true;passing0 = 0;}const _errs30 = errors;if(typeof data10 === "string"){if(!pattern33.test(data10)){const err20 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid16){valid16 = false;passing0 = [passing0, 1];}else {if(_valid0){valid16 = true;passing0 = 1;}const _errs31 = errors;if(typeof data10 === "string"){if(!pattern34.test(data10)){const err21 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid16){valid16 = false;passing0 = [passing0, 2];}else {if(_valid0){valid16 = true;passing0 = 2;}const _errs32 = errors;if(typeof data10 === "string"){if(!pattern35.test(data10)){const err22 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid16){valid16 = false;passing0 = [passing0, 3];}else {if(_valid0){valid16 = true;passing0 = 3;}const _errs33 = errors;if(typeof data10 === "string"){if(!pattern36.test(data10)){const err23 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid16){valid16 = false;passing0 = [passing0, 4];}else {if(_valid0){valid16 = true;passing0 = 4;}const _errs34 = errors;if(typeof data10 === "string"){if(!pattern37.test(data10)){const err24 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^Enemies Drop \\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources On Death$"},message:"must match pattern \""+"^Enemies Drop \\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources On Death$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid16){valid16 = false;passing0 = [passing0, 5];}else {if(_valid0){valid16 = true;passing0 = 5;}}}}}}if(!valid16){const err25 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}else {errors = _errs28;if(vErrors !== null){if(_errs28){vErrors.length = _errs28;}else {vErrors = null;}}}if(typeof data10 === "string"){if(!pattern19.test(data10)){const err26 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}else {const err27 = {instancePath:instancePath+"/worldList/" + i3+"/modList/" + i4,schemaPath:"#/definitions/WorldMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}}else {const err28 = {instancePath:instancePath+"/worldList/" + i3+"/modList",schemaPath:"#/properties/worldList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}}else {const err29 = {instancePath:instancePath+"/worldList/" + i3,schemaPath:"#/properties/worldList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}}else {const err30 = {instancePath:instancePath+"/worldList",schemaPath:"#/properties/worldList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}}else {const err31 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}validate13.errors = vErrors;return errors === 0;}const schema26 = {"type":"object","properties":{"requirements":{"$ref":"#/definitions/Requirements"},"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/GuildHallMod"},"type":"array"}},"additionalProperties":false}},"guildList":{"type":"array","items":{"$ref":"#/definitions/Guild"}},"guildClassList":{"type":"array","items":{"$ref":"#/definitions/GuildClass"}}},"additionalProperties":false,"required":["guildClassList","guildList"]};const schema27 = {"type":"object","properties":{"curLevel":{"type":"integer","minimum":1,"default":1},"world":{"type":"integer","minimum":1}},"additionalProperties":false};const schema28 = {"type":"object","properties":{"name":{"$ref":"#/definitions/ResourceName"},"value":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["name","value"]};function validate18(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.name === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.value === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "value"},message:"must have required property '"+"value"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((key0 === "name") || (key0 === "value"))){delete data[key0];}}if(data.name !== undefined){let data0 = data.name;if(typeof data0 !== "string"){const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/ResourceName/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(!(((data0 === "Copper") || (data0 === "Gold")) || (data0 === "Silver"))){const err3 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/ResourceName/enum",keyword:"enum",params:{allowedValues: schema15.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}if(data.value !== undefined){let data1 = data.value;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){const err4 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if((typeof data1 == "number") && (isFinite(data1))){if(data1 < 0 || isNaN(data1)){const err5 = {instancePath:instancePath+"/value",schemaPath:"#/properties/value/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}}}else {const err6 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}validate18.errors = vErrors;return errors === 0;}const schema30 = {"$ref":"#/definitions/GuildHallMod","type":"string"};const wrapper0 = {validate: validate20};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(typeof data !== "string"){const err0 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(!(wrapper0.validate(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);errors = vErrors.length;}validate20.errors = vErrors;return errors === 0;}const schema31 = {"type":"object","properties":{"name":{"$ref":"#/definitions/GuildName"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList","name"]};const schema32 = {"enum":["Arcane","Vanguard","Wanderer"],"type":"string"};const schema33 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"}]};const pattern39 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$", "u");const pattern40 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$", "u");const pattern41 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$", "u");const pattern42 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$", "u");const pattern43 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$", "u");const pattern44 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$", "u");const pattern45 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$", "u");const pattern46 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$", "u");const pattern47 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$", "u");const pattern48 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$", "u");const pattern49 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$", "u");const pattern50 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$", "u");const pattern53 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$", "u");const pattern54 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$", "u");const pattern55 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$", "u");const pattern58 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$", "u");const pattern60 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$", "u");const pattern61 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$", "u");const pattern62 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$", "u");const pattern63 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$", "u");const pattern64 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$", "u");const pattern66 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$", "u");const pattern67 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$", "u");const pattern68 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$", "u");const pattern69 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$", "u");const pattern70 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$", "u");const pattern72 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$", "u");const pattern73 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$", "u");const pattern74 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$", "u");const pattern75 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$", "u");const pattern76 = new RegExp("^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$", "u");const pattern77 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$", "u");const pattern78 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$", "u");const pattern79 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$", "u");const pattern83 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$", "u");const pattern85 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$", "u");const pattern89 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$", "u");const pattern90 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$", "u");const pattern92 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$", "u");const pattern93 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$", "u");const pattern94 = new RegExp("Burn Lingers", "u");const pattern95 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$", "u");const pattern96 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$", "u");const pattern97 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$", "u");const pattern98 = new RegExp("^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$", "u");function validate22(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.modList === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "modList"},message:"must have required property '"+"modList"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.name === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((key0 === "name") || (key0 === "modList"))){delete data[key0];}}if(data.name !== undefined){let data0 = data.name;if(typeof data0 !== "string"){const err2 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/GuildName/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(!(((data0 === "Arcane") || (data0 === "Vanguard")) || (data0 === "Wanderer"))){const err3 = {instancePath:instancePath+"/name",schemaPath:"#/definitions/GuildName/enum",keyword:"enum",params:{allowedValues: schema32.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}if(data.modList !== undefined){let data1 = data.modList;if(Array.isArray(data1)){const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs10 = errors;let valid5 = false;let passing0 = null;const _errs11 = errors;if(typeof data2 === "string"){if(!pattern39.test(data2)){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0){valid5 = true;passing0 = 0;}const _errs12 = errors;if(typeof data2 === "string"){if(!pattern40.test(data2)){const err5 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs12 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 1];}else {if(_valid0){valid5 = true;passing0 = 1;}const _errs13 = errors;if(typeof data2 === "string"){if(!pattern41.test(data2)){const err6 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 2];}else {if(_valid0){valid5 = true;passing0 = 2;}const _errs14 = errors;if(typeof data2 === "string"){if(!pattern42.test(data2)){const err7 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 3];}else {if(_valid0){valid5 = true;passing0 = 3;}const _errs15 = errors;if(typeof data2 === "string"){if(!pattern43.test(data2)){const err8 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 4];}else {if(_valid0){valid5 = true;passing0 = 4;}const _errs16 = errors;if(typeof data2 === "string"){if(!pattern44.test(data2)){const err9 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 5];}else {if(_valid0){valid5 = true;passing0 = 5;}const _errs17 = errors;if(typeof data2 === "string"){if(!pattern45.test(data2)){const err10 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs17 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 6];}else {if(_valid0){valid5 = true;passing0 = 6;}const _errs18 = errors;if(typeof data2 === "string"){if(!pattern46.test(data2)){const err11 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 7];}else {if(_valid0){valid5 = true;passing0 = 7;}const _errs19 = errors;if(typeof data2 === "string"){if(!pattern47.test(data2)){const err12 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 8];}else {if(_valid0){valid5 = true;passing0 = 8;}const _errs20 = errors;if(typeof data2 === "string"){if(!pattern48.test(data2)){const err13 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 9];}else {if(_valid0){valid5 = true;passing0 = 9;}const _errs21 = errors;if(typeof data2 === "string"){if(!pattern49.test(data2)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 10];}else {if(_valid0){valid5 = true;passing0 = 10;}const _errs22 = errors;if(typeof data2 === "string"){if(!pattern50.test(data2)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 11];}else {if(_valid0){valid5 = true;passing0 = 11;}const _errs23 = errors;if(typeof data2 === "string"){if(!pattern4.test(data2)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 12];}else {if(_valid0){valid5 = true;passing0 = 12;}const _errs24 = errors;if(typeof data2 === "string"){if(!pattern5.test(data2)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 13];}else {if(_valid0){valid5 = true;passing0 = 13;}const _errs25 = errors;if(typeof data2 === "string"){if(!pattern53.test(data2)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 14];}else {if(_valid0){valid5 = true;passing0 = 14;}const _errs26 = errors;if(typeof data2 === "string"){if(!pattern54.test(data2)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 15];}else {if(_valid0){valid5 = true;passing0 = 15;}const _errs27 = errors;if(typeof data2 === "string"){if(!pattern55.test(data2)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 16];}else {if(_valid0){valid5 = true;passing0 = 16;}const _errs28 = errors;if(typeof data2 === "string"){if(!pattern16.test(data2)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 17];}else {if(_valid0){valid5 = true;passing0 = 17;}const _errs29 = errors;if(typeof data2 === "string"){if(!pattern17.test(data2)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 18];}else {if(_valid0){valid5 = true;passing0 = 18;}const _errs30 = errors;if(typeof data2 === "string"){if(!pattern58.test(data2)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 19];}else {if(_valid0){valid5 = true;passing0 = 19;}const _errs31 = errors;if(typeof data2 === "string"){if(!pattern18.test(data2)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 20];}else {if(_valid0){valid5 = true;passing0 = 20;}const _errs32 = errors;if(typeof data2 === "string"){if(!pattern60.test(data2)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 21];}else {if(_valid0){valid5 = true;passing0 = 21;}const _errs33 = errors;if(typeof data2 === "string"){if(!pattern61.test(data2)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 22];}else {if(_valid0){valid5 = true;passing0 = 22;}const _errs34 = errors;if(typeof data2 === "string"){if(!pattern62.test(data2)){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 23];}else {if(_valid0){valid5 = true;passing0 = 23;}const _errs35 = errors;if(typeof data2 === "string"){if(!pattern63.test(data2)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 24];}else {if(_valid0){valid5 = true;passing0 = 24;}const _errs36 = errors;if(typeof data2 === "string"){if(!pattern64.test(data2)){const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 25];}else {if(_valid0){valid5 = true;passing0 = 25;}const _errs37 = errors;if(typeof data2 === "string"){if(!pattern6.test(data2)){const err30 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 26];}else {if(_valid0){valid5 = true;passing0 = 26;}const _errs38 = errors;if(typeof data2 === "string"){if(!pattern66.test(data2)){const err31 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 27];}else {if(_valid0){valid5 = true;passing0 = 27;}const _errs39 = errors;if(typeof data2 === "string"){if(!pattern67.test(data2)){const err32 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 28];}else {if(_valid0){valid5 = true;passing0 = 28;}const _errs40 = errors;if(typeof data2 === "string"){if(!pattern68.test(data2)){const err33 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 29];}else {if(_valid0){valid5 = true;passing0 = 29;}const _errs41 = errors;if(typeof data2 === "string"){if(!pattern69.test(data2)){const err34 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 30];}else {if(_valid0){valid5 = true;passing0 = 30;}const _errs42 = errors;if(typeof data2 === "string"){if(!pattern70.test(data2)){const err35 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 31];}else {if(_valid0){valid5 = true;passing0 = 31;}const _errs43 = errors;if(typeof data2 === "string"){if(!pattern7.test(data2)){const err36 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 32];}else {if(_valid0){valid5 = true;passing0 = 32;}const _errs44 = errors;if(typeof data2 === "string"){if(!pattern72.test(data2)){const err37 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 33];}else {if(_valid0){valid5 = true;passing0 = 33;}const _errs45 = errors;if(typeof data2 === "string"){if(!pattern73.test(data2)){const err38 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 34];}else {if(_valid0){valid5 = true;passing0 = 34;}const _errs46 = errors;if(typeof data2 === "string"){if(!pattern74.test(data2)){const err39 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 35];}else {if(_valid0){valid5 = true;passing0 = 35;}const _errs47 = errors;if(typeof data2 === "string"){if(!pattern75.test(data2)){const err40 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 36];}else {if(_valid0){valid5 = true;passing0 = 36;}const _errs48 = errors;if(typeof data2 === "string"){if(!pattern76.test(data2)){const err41 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 37];}else {if(_valid0){valid5 = true;passing0 = 37;}const _errs49 = errors;if(typeof data2 === "string"){if(!pattern77.test(data2)){const err42 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 38];}else {if(_valid0){valid5 = true;passing0 = 38;}const _errs50 = errors;if(typeof data2 === "string"){if(!pattern78.test(data2)){const err43 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 39];}else {if(_valid0){valid5 = true;passing0 = 39;}const _errs51 = errors;if(typeof data2 === "string"){if(!pattern79.test(data2)){const err44 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 40];}else {if(_valid0){valid5 = true;passing0 = 40;}const _errs52 = errors;if(typeof data2 === "string"){if(!pattern8.test(data2)){const err45 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 41];}else {if(_valid0){valid5 = true;passing0 = 41;}const _errs53 = errors;if(typeof data2 === "string"){if(!pattern9.test(data2)){const err46 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 42];}else {if(_valid0){valid5 = true;passing0 = 42;}const _errs54 = errors;if(typeof data2 === "string"){if(!pattern10.test(data2)){const err47 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 43];}else {if(_valid0){valid5 = true;passing0 = 43;}const _errs55 = errors;if(typeof data2 === "string"){if(!pattern83.test(data2)){const err48 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 44];}else {if(_valid0){valid5 = true;passing0 = 44;}const _errs56 = errors;if(typeof data2 === "string"){if(!pattern11.test(data2)){const err49 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 45];}else {if(_valid0){valid5 = true;passing0 = 45;}const _errs57 = errors;if(typeof data2 === "string"){if(!pattern85.test(data2)){const err50 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 46];}else {if(_valid0){valid5 = true;passing0 = 46;}const _errs58 = errors;if(typeof data2 === "string"){if(!pattern12.test(data2)){const err51 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 47];}else {if(_valid0){valid5 = true;passing0 = 47;}const _errs59 = errors;if(typeof data2 === "string"){if(!pattern13.test(data2)){const err52 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 48];}else {if(_valid0){valid5 = true;passing0 = 48;}const _errs60 = errors;if(typeof data2 === "string"){if(!pattern14.test(data2)){const err53 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 49];}else {if(_valid0){valid5 = true;passing0 = 49;}const _errs61 = errors;if(typeof data2 === "string"){if(!pattern89.test(data2)){const err54 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 50];}else {if(_valid0){valid5 = true;passing0 = 50;}const _errs62 = errors;if(typeof data2 === "string"){if(!pattern90.test(data2)){const err55 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 51];}else {if(_valid0){valid5 = true;passing0 = 51;}const _errs63 = errors;if(typeof data2 === "string"){if(!pattern15.test(data2)){const err56 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 52];}else {if(_valid0){valid5 = true;passing0 = 52;}const _errs64 = errors;if(typeof data2 === "string"){if(!pattern92.test(data2)){const err57 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 53];}else {if(_valid0){valid5 = true;passing0 = 53;}const _errs65 = errors;if(typeof data2 === "string"){if(!pattern93.test(data2)){const err58 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 54];}else {if(_valid0){valid5 = true;passing0 = 54;}const _errs66 = errors;if(typeof data2 === "string"){if(!pattern94.test(data2)){const err59 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 55];}else {if(_valid0){valid5 = true;passing0 = 55;}const _errs67 = errors;if(typeof data2 === "string"){if(!pattern95.test(data2)){const err60 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 56];}else {if(_valid0){valid5 = true;passing0 = 56;}const _errs68 = errors;if(typeof data2 === "string"){if(!pattern96.test(data2)){const err61 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 57];}else {if(_valid0){valid5 = true;passing0 = 57;}const _errs69 = errors;if(typeof data2 === "string"){if(!pattern97.test(data2)){const err62 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 58];}else {if(_valid0){valid5 = true;passing0 = 58;}const _errs70 = errors;if(typeof data2 === "string"){if(!pattern98.test(data2)){const err63 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid5){valid5 = false;passing0 = [passing0, 59];}else {if(_valid0){valid5 = true;passing0 = 59;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid5){const err64 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}else {errors = _errs10;if(vErrors !== null){if(_errs10){vErrors.length = _errs10;}else {vErrors = null;}}}if(typeof data2 === "string"){if(!pattern19.test(data2)){const err65 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}else {const err66 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}}else {const err67 = {instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}}else {const err68 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}validate22.errors = vErrors;return errors === 0;}const schema34 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"guildName":{"$ref":"#/definitions/GuildName"},"requirements":{"type":"object","properties":{"guildHallLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["guildHallLevel"]},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["guildName","id","modList","name"]};function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.guildName === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "guildName"},message:"must have required property '"+"guildName"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.id === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.modList === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "modList"},message:"must have required property '"+"modList"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.name === undefined){const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}for(const key0 in data){if(!(((((key0 === "id") || (key0 === "guildName")) || (key0 === "requirements")) || (key0 === "name")) || (key0 === "modList"))){delete data[key0];}}if(data.id !== undefined){let data0 = data.id;if(typeof data0 === "string"){if(!pattern20.test(data0)){const err4 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}else {const err5 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.guildName !== undefined){let data1 = data.guildName;if(typeof data1 !== "string"){const err6 = {instancePath:instancePath+"/guildName",schemaPath:"#/definitions/GuildName/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}if(!(((data1 === "Arcane") || (data1 === "Vanguard")) || (data1 === "Wanderer"))){const err7 = {instancePath:instancePath+"/guildName",schemaPath:"#/definitions/GuildName/enum",keyword:"enum",params:{allowedValues: schema32.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}if(data.requirements !== undefined){let data2 = data.requirements;if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.guildHallLevel === undefined){const err8 = {instancePath:instancePath+"/requirements",schemaPath:"#/properties/requirements/required",keyword:"required",params:{missingProperty: "guildHallLevel"},message:"must have required property '"+"guildHallLevel"+"'"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}for(const key1 in data2){if(!(key1 === "guildHallLevel")){delete data2[key1];}}if(data2.guildHallLevel !== undefined){let data3 = data2.guildHallLevel;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){const err9 = {instancePath:instancePath+"/requirements/guildHallLevel",schemaPath:"#/properties/requirements/properties/guildHallLevel/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 1 || isNaN(data3)){const err10 = {instancePath:instancePath+"/requirements/guildHallLevel",schemaPath:"#/properties/requirements/properties/guildHallLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}}}else {const err11 = {instancePath:instancePath+"/requirements",schemaPath:"#/properties/requirements/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}if(data.name !== undefined){let data4 = data.name;if(typeof data4 === "string"){if(!pattern22.test(data4)){const err12 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}else {const err13 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}if(data.modList !== undefined){let data5 = data.modList;if(Array.isArray(data5)){const len0 = data5.length;for(let i0=0; i0<len0; i0++){let data6 = data5[i0];const _errs20 = errors;let valid7 = false;let passing0 = null;const _errs21 = errors;if(typeof data6 === "string"){if(!pattern39.test(data6)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0){valid7 = true;passing0 = 0;}const _errs22 = errors;if(typeof data6 === "string"){if(!pattern40.test(data6)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 1];}else {if(_valid0){valid7 = true;passing0 = 1;}const _errs23 = errors;if(typeof data6 === "string"){if(!pattern41.test(data6)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 2];}else {if(_valid0){valid7 = true;passing0 = 2;}const _errs24 = errors;if(typeof data6 === "string"){if(!pattern42.test(data6)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 3];}else {if(_valid0){valid7 = true;passing0 = 3;}const _errs25 = errors;if(typeof data6 === "string"){if(!pattern43.test(data6)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 4];}else {if(_valid0){valid7 = true;passing0 = 4;}const _errs26 = errors;if(typeof data6 === "string"){if(!pattern44.test(data6)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 5];}else {if(_valid0){valid7 = true;passing0 = 5;}const _errs27 = errors;if(typeof data6 === "string"){if(!pattern45.test(data6)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 6];}else {if(_valid0){valid7 = true;passing0 = 6;}const _errs28 = errors;if(typeof data6 === "string"){if(!pattern46.test(data6)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 7];}else {if(_valid0){valid7 = true;passing0 = 7;}const _errs29 = errors;if(typeof data6 === "string"){if(!pattern47.test(data6)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 8];}else {if(_valid0){valid7 = true;passing0 = 8;}const _errs30 = errors;if(typeof data6 === "string"){if(!pattern48.test(data6)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 9];}else {if(_valid0){valid7 = true;passing0 = 9;}const _errs31 = errors;if(typeof data6 === "string"){if(!pattern49.test(data6)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 10];}else {if(_valid0){valid7 = true;passing0 = 10;}const _errs32 = errors;if(typeof data6 === "string"){if(!pattern50.test(data6)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 11];}else {if(_valid0){valid7 = true;passing0 = 11;}const _errs33 = errors;if(typeof data6 === "string"){if(!pattern4.test(data6)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 12];}else {if(_valid0){valid7 = true;passing0 = 12;}const _errs34 = errors;if(typeof data6 === "string"){if(!pattern5.test(data6)){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 13];}else {if(_valid0){valid7 = true;passing0 = 13;}const _errs35 = errors;if(typeof data6 === "string"){if(!pattern53.test(data6)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 14];}else {if(_valid0){valid7 = true;passing0 = 14;}const _errs36 = errors;if(typeof data6 === "string"){if(!pattern54.test(data6)){const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 15];}else {if(_valid0){valid7 = true;passing0 = 15;}const _errs37 = errors;if(typeof data6 === "string"){if(!pattern55.test(data6)){const err30 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 16];}else {if(_valid0){valid7 = true;passing0 = 16;}const _errs38 = errors;if(typeof data6 === "string"){if(!pattern16.test(data6)){const err31 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 17];}else {if(_valid0){valid7 = true;passing0 = 17;}const _errs39 = errors;if(typeof data6 === "string"){if(!pattern17.test(data6)){const err32 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 18];}else {if(_valid0){valid7 = true;passing0 = 18;}const _errs40 = errors;if(typeof data6 === "string"){if(!pattern58.test(data6)){const err33 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 19];}else {if(_valid0){valid7 = true;passing0 = 19;}const _errs41 = errors;if(typeof data6 === "string"){if(!pattern18.test(data6)){const err34 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 20];}else {if(_valid0){valid7 = true;passing0 = 20;}const _errs42 = errors;if(typeof data6 === "string"){if(!pattern60.test(data6)){const err35 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 21];}else {if(_valid0){valid7 = true;passing0 = 21;}const _errs43 = errors;if(typeof data6 === "string"){if(!pattern61.test(data6)){const err36 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 22];}else {if(_valid0){valid7 = true;passing0 = 22;}const _errs44 = errors;if(typeof data6 === "string"){if(!pattern62.test(data6)){const err37 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 23];}else {if(_valid0){valid7 = true;passing0 = 23;}const _errs45 = errors;if(typeof data6 === "string"){if(!pattern63.test(data6)){const err38 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 24];}else {if(_valid0){valid7 = true;passing0 = 24;}const _errs46 = errors;if(typeof data6 === "string"){if(!pattern64.test(data6)){const err39 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 25];}else {if(_valid0){valid7 = true;passing0 = 25;}const _errs47 = errors;if(typeof data6 === "string"){if(!pattern6.test(data6)){const err40 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 26];}else {if(_valid0){valid7 = true;passing0 = 26;}const _errs48 = errors;if(typeof data6 === "string"){if(!pattern66.test(data6)){const err41 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 27];}else {if(_valid0){valid7 = true;passing0 = 27;}const _errs49 = errors;if(typeof data6 === "string"){if(!pattern67.test(data6)){const err42 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 28];}else {if(_valid0){valid7 = true;passing0 = 28;}const _errs50 = errors;if(typeof data6 === "string"){if(!pattern68.test(data6)){const err43 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 29];}else {if(_valid0){valid7 = true;passing0 = 29;}const _errs51 = errors;if(typeof data6 === "string"){if(!pattern69.test(data6)){const err44 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 30];}else {if(_valid0){valid7 = true;passing0 = 30;}const _errs52 = errors;if(typeof data6 === "string"){if(!pattern70.test(data6)){const err45 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 31];}else {if(_valid0){valid7 = true;passing0 = 31;}const _errs53 = errors;if(typeof data6 === "string"){if(!pattern7.test(data6)){const err46 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 32];}else {if(_valid0){valid7 = true;passing0 = 32;}const _errs54 = errors;if(typeof data6 === "string"){if(!pattern72.test(data6)){const err47 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 33];}else {if(_valid0){valid7 = true;passing0 = 33;}const _errs55 = errors;if(typeof data6 === "string"){if(!pattern73.test(data6)){const err48 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 34];}else {if(_valid0){valid7 = true;passing0 = 34;}const _errs56 = errors;if(typeof data6 === "string"){if(!pattern74.test(data6)){const err49 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 35];}else {if(_valid0){valid7 = true;passing0 = 35;}const _errs57 = errors;if(typeof data6 === "string"){if(!pattern75.test(data6)){const err50 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 36];}else {if(_valid0){valid7 = true;passing0 = 36;}const _errs58 = errors;if(typeof data6 === "string"){if(!pattern76.test(data6)){const err51 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 37];}else {if(_valid0){valid7 = true;passing0 = 37;}const _errs59 = errors;if(typeof data6 === "string"){if(!pattern77.test(data6)){const err52 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 38];}else {if(_valid0){valid7 = true;passing0 = 38;}const _errs60 = errors;if(typeof data6 === "string"){if(!pattern78.test(data6)){const err53 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 39];}else {if(_valid0){valid7 = true;passing0 = 39;}const _errs61 = errors;if(typeof data6 === "string"){if(!pattern79.test(data6)){const err54 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 40];}else {if(_valid0){valid7 = true;passing0 = 40;}const _errs62 = errors;if(typeof data6 === "string"){if(!pattern8.test(data6)){const err55 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 41];}else {if(_valid0){valid7 = true;passing0 = 41;}const _errs63 = errors;if(typeof data6 === "string"){if(!pattern9.test(data6)){const err56 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 42];}else {if(_valid0){valid7 = true;passing0 = 42;}const _errs64 = errors;if(typeof data6 === "string"){if(!pattern10.test(data6)){const err57 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 43];}else {if(_valid0){valid7 = true;passing0 = 43;}const _errs65 = errors;if(typeof data6 === "string"){if(!pattern83.test(data6)){const err58 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 44];}else {if(_valid0){valid7 = true;passing0 = 44;}const _errs66 = errors;if(typeof data6 === "string"){if(!pattern11.test(data6)){const err59 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 45];}else {if(_valid0){valid7 = true;passing0 = 45;}const _errs67 = errors;if(typeof data6 === "string"){if(!pattern85.test(data6)){const err60 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 46];}else {if(_valid0){valid7 = true;passing0 = 46;}const _errs68 = errors;if(typeof data6 === "string"){if(!pattern12.test(data6)){const err61 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 47];}else {if(_valid0){valid7 = true;passing0 = 47;}const _errs69 = errors;if(typeof data6 === "string"){if(!pattern13.test(data6)){const err62 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 48];}else {if(_valid0){valid7 = true;passing0 = 48;}const _errs70 = errors;if(typeof data6 === "string"){if(!pattern14.test(data6)){const err63 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 49];}else {if(_valid0){valid7 = true;passing0 = 49;}const _errs71 = errors;if(typeof data6 === "string"){if(!pattern89.test(data6)){const err64 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 50];}else {if(_valid0){valid7 = true;passing0 = 50;}const _errs72 = errors;if(typeof data6 === "string"){if(!pattern90.test(data6)){const err65 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 51];}else {if(_valid0){valid7 = true;passing0 = 51;}const _errs73 = errors;if(typeof data6 === "string"){if(!pattern15.test(data6)){const err66 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 52];}else {if(_valid0){valid7 = true;passing0 = 52;}const _errs74 = errors;if(typeof data6 === "string"){if(!pattern92.test(data6)){const err67 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 53];}else {if(_valid0){valid7 = true;passing0 = 53;}const _errs75 = errors;if(typeof data6 === "string"){if(!pattern93.test(data6)){const err68 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 54];}else {if(_valid0){valid7 = true;passing0 = 54;}const _errs76 = errors;if(typeof data6 === "string"){if(!pattern94.test(data6)){const err69 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 55];}else {if(_valid0){valid7 = true;passing0 = 55;}const _errs77 = errors;if(typeof data6 === "string"){if(!pattern95.test(data6)){const err70 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}var _valid0 = _errs77 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 56];}else {if(_valid0){valid7 = true;passing0 = 56;}const _errs78 = errors;if(typeof data6 === "string"){if(!pattern96.test(data6)){const err71 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}var _valid0 = _errs78 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 57];}else {if(_valid0){valid7 = true;passing0 = 57;}const _errs79 = errors;if(typeof data6 === "string"){if(!pattern97.test(data6)){const err72 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}}var _valid0 = _errs79 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 58];}else {if(_valid0){valid7 = true;passing0 = 58;}const _errs80 = errors;if(typeof data6 === "string"){if(!pattern98.test(data6)){const err73 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}}var _valid0 = _errs80 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 59];}else {if(_valid0){valid7 = true;passing0 = 59;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid7){const err74 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}else {errors = _errs20;if(vErrors !== null){if(_errs20){vErrors.length = _errs20;}else {vErrors = null;}}}if(typeof data6 === "string"){if(!pattern19.test(data6)){const err75 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}else {const err76 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}}else {const err77 = {instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}}else {const err78 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}validate24.errors = vErrors;return errors === 0;}function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.guildClassList === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "guildClassList"},message:"must have required property '"+"guildClassList"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.guildList === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "guildList"},message:"must have required property '"+"guildList"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!((((key0 === "requirements") || (key0 === "levelList")) || (key0 === "guildList")) || (key0 === "guildClassList"))){delete data[key0];}}if(data.requirements !== undefined){let data0 = data.requirements;if(data0 && typeof data0 == "object" && !Array.isArray(data0)){for(const key1 in data0){if(!((key1 === "curLevel") || (key1 === "world"))){delete data0[key1];}}if(data0.curLevel !== undefined){let data1 = data0.curLevel;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){const err2 = {instancePath:instancePath+"/requirements/curLevel",schemaPath:"#/definitions/Requirements/properties/curLevel/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if((typeof data1 == "number") && (isFinite(data1))){if(data1 < 1 || isNaN(data1)){const err3 = {instancePath:instancePath+"/requirements/curLevel",schemaPath:"#/definitions/Requirements/properties/curLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}}if(data0.world !== undefined){let data2 = data0.world;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){const err4 = {instancePath:instancePath+"/requirements/world",schemaPath:"#/definitions/Requirements/properties/world/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if((typeof data2 == "number") && (isFinite(data2))){if(data2 < 1 || isNaN(data2)){const err5 = {instancePath:instancePath+"/requirements/world",schemaPath:"#/definitions/Requirements/properties/world/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}}}else {const err6 = {instancePath:instancePath+"/requirements",schemaPath:"#/definitions/Requirements/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}if(data.levelList !== undefined){let data3 = data.levelList;if(Array.isArray(data3)){const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];if(data4 && typeof data4 == "object" && !Array.isArray(data4)){for(const key2 in data4){if(!((key2 === "upgradeCost") || (key2 === "modList"))){delete data4[key2];}}if(data4.upgradeCost !== undefined){if(!(validate18(data4.upgradeCost, {instancePath:instancePath+"/levelList/" + i0+"/upgradeCost",parentData:data4,parentDataProperty:"upgradeCost",rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}}if(data4.modList !== undefined){let data6 = data4.modList;if(Array.isArray(data6)){const len1 = data6.length;for(let i1=0; i1<len1; i1++){if(!(validate20(data6[i1], {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);errors = vErrors.length;}}}else {const err7 = {instancePath:instancePath+"/levelList/" + i0+"/modList",schemaPath:"#/properties/levelList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}}else {const err8 = {instancePath:instancePath+"/levelList/" + i0,schemaPath:"#/properties/levelList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}}else {const err9 = {instancePath:instancePath+"/levelList",schemaPath:"#/properties/levelList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}if(data.guildList !== undefined){let data8 = data.guildList;if(Array.isArray(data8)){const len2 = data8.length;for(let i2=0; i2<len2; i2++){if(!(validate22(data8[i2], {instancePath:instancePath+"/guildList/" + i2,parentData:data8,parentDataProperty:i2,rootData}))){vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);errors = vErrors.length;}}}else {const err10 = {instancePath:instancePath+"/guildList",schemaPath:"#/properties/guildList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}if(data.guildClassList !== undefined){let data10 = data.guildClassList;if(Array.isArray(data10)){const len3 = data10.length;for(let i3=0; i3<len3; i3++){if(!(validate24(data10[i3], {instancePath:instancePath+"/guildClassList/" + i3,parentData:data10,parentDataProperty:i3,rootData}))){vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);errors = vErrors.length;}}}else {const err11 = {instancePath:instancePath+"/guildClassList",schemaPath:"#/properties/guildClassList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}}else {const err12 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}validate17.errors = vErrors;return errors === 0;}const schema38 = {"type":"object","properties":{"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/SkillsUpgradeMod"},"type":"array"}},"additionalProperties":false}},"attackSkills":{"type":"object","properties":{"attackSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/AttackSkill"}}},"additionalProperties":false,"required":["attackSkillList"]},"auraSkills":{"type":"object","properties":{"requirements":{"type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"auraSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/AuraSkill"}}},"additionalProperties":false,"required":["auraSkillList"]},"passiveSkills":{"type":"object","properties":{"insightCapacityEnhancerList":{"description":"TJS-minItems 1","type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"probability":{"type":"integer","minimum":1,"default":100,"description":"Percent = 1/Probability"},"insight":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["id","insight","name","probability"]}},"passiveSkillList":{"description":"TJS-minItems 1","type":"array","items":{"$ref":"#/definitions/PassiveSkill"}}},"additionalProperties":false,"required":["insightCapacityEnhancerList","passiveSkillList"]}},"additionalProperties":false};const schema39 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]};const schema40 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"manaCost":{"type":"integer","minimum":0},"attackSpeed":{"default":1,"minimum":0.1,"type":"number"},"attackEffectiveness":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["attackEffectiveness","attackSpeed","manaCost","modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]};function validate29(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.id === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.name === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.rankList === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "rankList"},message:"must have required property '"+"rankList"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key0 in data){if(!((((key0 === "id") || (key0 === "name")) || (key0 === "requirements")) || (key0 === "rankList"))){delete data[key0];}}if(data.id !== undefined){let data0 = data.id;if(typeof data0 === "string"){if(!pattern20.test(data0)){const err3 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}else {const err4 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}if(data.name !== undefined){let data1 = data.name;if(typeof data1 === "string"){if(!pattern22.test(data1)){const err5 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}else {const err6 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}if(data.requirements !== undefined){let data2 = data.requirements;if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.characterLevel === undefined){const err7 = {instancePath:instancePath+"/requirements",schemaPath:"#/properties/requirements/required",keyword:"required",params:{missingProperty: "characterLevel"},message:"must have required property '"+"characterLevel"+"'"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}for(const key1 in data2){if(!(key1 === "characterLevel")){delete data2[key1];}}if(data2.characterLevel !== undefined){let data3 = data2.characterLevel;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){const err8 = {instancePath:instancePath+"/requirements/characterLevel",schemaPath:"#/properties/requirements/properties/characterLevel/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 1 || isNaN(data3)){const err9 = {instancePath:instancePath+"/requirements/characterLevel",schemaPath:"#/properties/requirements/properties/characterLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}}}else {const err10 = {instancePath:instancePath+"/requirements",schemaPath:"#/properties/requirements/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}if(data.rankList !== undefined){let data4 = data.rankList;if(Array.isArray(data4)){if(data4.length < 1){const err11 = {instancePath:instancePath+"/rankList",schemaPath:"#/properties/rankList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}const len0 = data4.length;for(let i0=0; i0<len0; i0++){let data5 = data4[i0];if(data5 && typeof data5 == "object" && !Array.isArray(data5)){if(data5.attackEffectiveness === undefined){const err12 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "attackEffectiveness"},message:"must have required property '"+"attackEffectiveness"+"'"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}if(data5.attackSpeed === undefined){const err13 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "attackSpeed"},message:"must have required property '"+"attackSpeed"+"'"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}if(data5.manaCost === undefined){const err14 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "manaCost"},message:"must have required property '"+"manaCost"+"'"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}if(data5.modList === undefined){const err15 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "modList"},message:"must have required property '"+"modList"+"'"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}for(const key2 in data5){if(!(((((key2 === "exp") || (key2 === "manaCost")) || (key2 === "attackSpeed")) || (key2 === "attackEffectiveness")) || (key2 === "modList"))){delete data5[key2];}}if(data5.exp !== undefined){let data6 = data5.exp;if(!(((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6))) && (isFinite(data6)))){const err16 = {instancePath:instancePath+"/rankList/" + i0+"/exp",schemaPath:"#/properties/rankList/items/properties/exp/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}if((typeof data6 == "number") && (isFinite(data6))){if(data6 < 1 || isNaN(data6)){const err17 = {instancePath:instancePath+"/rankList/" + i0+"/exp",schemaPath:"#/properties/rankList/items/properties/exp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}}if(data5.manaCost !== undefined){let data7 = data5.manaCost;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){const err18 = {instancePath:instancePath+"/rankList/" + i0+"/manaCost",schemaPath:"#/properties/rankList/items/properties/manaCost/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}if((typeof data7 == "number") && (isFinite(data7))){if(data7 < 0 || isNaN(data7)){const err19 = {instancePath:instancePath+"/rankList/" + i0+"/manaCost",schemaPath:"#/properties/rankList/items/properties/manaCost/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}}if(data5.attackSpeed !== undefined){let data8 = data5.attackSpeed;if((typeof data8 == "number") && (isFinite(data8))){if(data8 < 0.1 || isNaN(data8)){const err20 = {instancePath:instancePath+"/rankList/" + i0+"/attackSpeed",schemaPath:"#/properties/rankList/items/properties/attackSpeed/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0.1},message:"must be >= 0.1"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}else {const err21 = {instancePath:instancePath+"/rankList/" + i0+"/attackSpeed",schemaPath:"#/properties/rankList/items/properties/attackSpeed/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}if(data5.attackEffectiveness !== undefined){let data9 = data5.attackEffectiveness;if(!(((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9))) && (isFinite(data9)))){const err22 = {instancePath:instancePath+"/rankList/" + i0+"/attackEffectiveness",schemaPath:"#/properties/rankList/items/properties/attackEffectiveness/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}if((typeof data9 == "number") && (isFinite(data9))){if(data9 < 0 || isNaN(data9)){const err23 = {instancePath:instancePath+"/rankList/" + i0+"/attackEffectiveness",schemaPath:"#/properties/rankList/items/properties/attackEffectiveness/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}}if(data5.modList !== undefined){let data10 = data5.modList;if(Array.isArray(data10)){const len1 = data10.length;for(let i1=0; i1<len1; i1++){let data11 = data10[i1];const _errs30 = errors;let valid9 = false;let passing0 = null;const _errs31 = errors;if(typeof data11 === "string"){if(!pattern39.test(data11)){const err24 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0){valid9 = true;passing0 = 0;}const _errs32 = errors;if(typeof data11 === "string"){if(!pattern40.test(data11)){const err25 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 1];}else {if(_valid0){valid9 = true;passing0 = 1;}const _errs33 = errors;if(typeof data11 === "string"){if(!pattern41.test(data11)){const err26 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 2];}else {if(_valid0){valid9 = true;passing0 = 2;}const _errs34 = errors;if(typeof data11 === "string"){if(!pattern42.test(data11)){const err27 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 3];}else {if(_valid0){valid9 = true;passing0 = 3;}const _errs35 = errors;if(typeof data11 === "string"){if(!pattern43.test(data11)){const err28 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 4];}else {if(_valid0){valid9 = true;passing0 = 4;}const _errs36 = errors;if(typeof data11 === "string"){if(!pattern44.test(data11)){const err29 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 5];}else {if(_valid0){valid9 = true;passing0 = 5;}const _errs37 = errors;if(typeof data11 === "string"){if(!pattern45.test(data11)){const err30 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 6];}else {if(_valid0){valid9 = true;passing0 = 6;}const _errs38 = errors;if(typeof data11 === "string"){if(!pattern46.test(data11)){const err31 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 7];}else {if(_valid0){valid9 = true;passing0 = 7;}const _errs39 = errors;if(typeof data11 === "string"){if(!pattern47.test(data11)){const err32 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 8];}else {if(_valid0){valid9 = true;passing0 = 8;}const _errs40 = errors;if(typeof data11 === "string"){if(!pattern48.test(data11)){const err33 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 9];}else {if(_valid0){valid9 = true;passing0 = 9;}const _errs41 = errors;if(typeof data11 === "string"){if(!pattern49.test(data11)){const err34 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 10];}else {if(_valid0){valid9 = true;passing0 = 10;}const _errs42 = errors;if(typeof data11 === "string"){if(!pattern50.test(data11)){const err35 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 11];}else {if(_valid0){valid9 = true;passing0 = 11;}const _errs43 = errors;if(typeof data11 === "string"){if(!pattern4.test(data11)){const err36 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 12];}else {if(_valid0){valid9 = true;passing0 = 12;}const _errs44 = errors;if(typeof data11 === "string"){if(!pattern5.test(data11)){const err37 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 13];}else {if(_valid0){valid9 = true;passing0 = 13;}const _errs45 = errors;if(typeof data11 === "string"){if(!pattern53.test(data11)){const err38 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 14];}else {if(_valid0){valid9 = true;passing0 = 14;}const _errs46 = errors;if(typeof data11 === "string"){if(!pattern54.test(data11)){const err39 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 15];}else {if(_valid0){valid9 = true;passing0 = 15;}const _errs47 = errors;if(typeof data11 === "string"){if(!pattern55.test(data11)){const err40 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 16];}else {if(_valid0){valid9 = true;passing0 = 16;}const _errs48 = errors;if(typeof data11 === "string"){if(!pattern16.test(data11)){const err41 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 17];}else {if(_valid0){valid9 = true;passing0 = 17;}const _errs49 = errors;if(typeof data11 === "string"){if(!pattern17.test(data11)){const err42 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 18];}else {if(_valid0){valid9 = true;passing0 = 18;}const _errs50 = errors;if(typeof data11 === "string"){if(!pattern58.test(data11)){const err43 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 19];}else {if(_valid0){valid9 = true;passing0 = 19;}const _errs51 = errors;if(typeof data11 === "string"){if(!pattern18.test(data11)){const err44 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 20];}else {if(_valid0){valid9 = true;passing0 = 20;}const _errs52 = errors;if(typeof data11 === "string"){if(!pattern60.test(data11)){const err45 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 21];}else {if(_valid0){valid9 = true;passing0 = 21;}const _errs53 = errors;if(typeof data11 === "string"){if(!pattern61.test(data11)){const err46 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 22];}else {if(_valid0){valid9 = true;passing0 = 22;}const _errs54 = errors;if(typeof data11 === "string"){if(!pattern62.test(data11)){const err47 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 23];}else {if(_valid0){valid9 = true;passing0 = 23;}const _errs55 = errors;if(typeof data11 === "string"){if(!pattern63.test(data11)){const err48 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 24];}else {if(_valid0){valid9 = true;passing0 = 24;}const _errs56 = errors;if(typeof data11 === "string"){if(!pattern64.test(data11)){const err49 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 25];}else {if(_valid0){valid9 = true;passing0 = 25;}const _errs57 = errors;if(typeof data11 === "string"){if(!pattern6.test(data11)){const err50 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 26];}else {if(_valid0){valid9 = true;passing0 = 26;}const _errs58 = errors;if(typeof data11 === "string"){if(!pattern66.test(data11)){const err51 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 27];}else {if(_valid0){valid9 = true;passing0 = 27;}const _errs59 = errors;if(typeof data11 === "string"){if(!pattern67.test(data11)){const err52 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 28];}else {if(_valid0){valid9 = true;passing0 = 28;}const _errs60 = errors;if(typeof data11 === "string"){if(!pattern68.test(data11)){const err53 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 29];}else {if(_valid0){valid9 = true;passing0 = 29;}const _errs61 = errors;if(typeof data11 === "string"){if(!pattern69.test(data11)){const err54 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 30];}else {if(_valid0){valid9 = true;passing0 = 30;}const _errs62 = errors;if(typeof data11 === "string"){if(!pattern70.test(data11)){const err55 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 31];}else {if(_valid0){valid9 = true;passing0 = 31;}const _errs63 = errors;if(typeof data11 === "string"){if(!pattern7.test(data11)){const err56 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 32];}else {if(_valid0){valid9 = true;passing0 = 32;}const _errs64 = errors;if(typeof data11 === "string"){if(!pattern72.test(data11)){const err57 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 33];}else {if(_valid0){valid9 = true;passing0 = 33;}const _errs65 = errors;if(typeof data11 === "string"){if(!pattern73.test(data11)){const err58 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 34];}else {if(_valid0){valid9 = true;passing0 = 34;}const _errs66 = errors;if(typeof data11 === "string"){if(!pattern74.test(data11)){const err59 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 35];}else {if(_valid0){valid9 = true;passing0 = 35;}const _errs67 = errors;if(typeof data11 === "string"){if(!pattern75.test(data11)){const err60 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 36];}else {if(_valid0){valid9 = true;passing0 = 36;}const _errs68 = errors;if(typeof data11 === "string"){if(!pattern76.test(data11)){const err61 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 37];}else {if(_valid0){valid9 = true;passing0 = 37;}const _errs69 = errors;if(typeof data11 === "string"){if(!pattern77.test(data11)){const err62 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 38];}else {if(_valid0){valid9 = true;passing0 = 38;}const _errs70 = errors;if(typeof data11 === "string"){if(!pattern78.test(data11)){const err63 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 39];}else {if(_valid0){valid9 = true;passing0 = 39;}const _errs71 = errors;if(typeof data11 === "string"){if(!pattern79.test(data11)){const err64 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 40];}else {if(_valid0){valid9 = true;passing0 = 40;}const _errs72 = errors;if(typeof data11 === "string"){if(!pattern8.test(data11)){const err65 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 41];}else {if(_valid0){valid9 = true;passing0 = 41;}const _errs73 = errors;if(typeof data11 === "string"){if(!pattern9.test(data11)){const err66 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 42];}else {if(_valid0){valid9 = true;passing0 = 42;}const _errs74 = errors;if(typeof data11 === "string"){if(!pattern10.test(data11)){const err67 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 43];}else {if(_valid0){valid9 = true;passing0 = 43;}const _errs75 = errors;if(typeof data11 === "string"){if(!pattern83.test(data11)){const err68 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 44];}else {if(_valid0){valid9 = true;passing0 = 44;}const _errs76 = errors;if(typeof data11 === "string"){if(!pattern11.test(data11)){const err69 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 45];}else {if(_valid0){valid9 = true;passing0 = 45;}const _errs77 = errors;if(typeof data11 === "string"){if(!pattern85.test(data11)){const err70 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}var _valid0 = _errs77 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 46];}else {if(_valid0){valid9 = true;passing0 = 46;}const _errs78 = errors;if(typeof data11 === "string"){if(!pattern12.test(data11)){const err71 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}var _valid0 = _errs78 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 47];}else {if(_valid0){valid9 = true;passing0 = 47;}const _errs79 = errors;if(typeof data11 === "string"){if(!pattern13.test(data11)){const err72 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}}var _valid0 = _errs79 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 48];}else {if(_valid0){valid9 = true;passing0 = 48;}const _errs80 = errors;if(typeof data11 === "string"){if(!pattern14.test(data11)){const err73 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}}var _valid0 = _errs80 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 49];}else {if(_valid0){valid9 = true;passing0 = 49;}const _errs81 = errors;if(typeof data11 === "string"){if(!pattern89.test(data11)){const err74 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}var _valid0 = _errs81 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 50];}else {if(_valid0){valid9 = true;passing0 = 50;}const _errs82 = errors;if(typeof data11 === "string"){if(!pattern90.test(data11)){const err75 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}var _valid0 = _errs82 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 51];}else {if(_valid0){valid9 = true;passing0 = 51;}const _errs83 = errors;if(typeof data11 === "string"){if(!pattern15.test(data11)){const err76 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}var _valid0 = _errs83 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 52];}else {if(_valid0){valid9 = true;passing0 = 52;}const _errs84 = errors;if(typeof data11 === "string"){if(!pattern92.test(data11)){const err77 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}var _valid0 = _errs84 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 53];}else {if(_valid0){valid9 = true;passing0 = 53;}const _errs85 = errors;if(typeof data11 === "string"){if(!pattern93.test(data11)){const err78 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}}var _valid0 = _errs85 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 54];}else {if(_valid0){valid9 = true;passing0 = 54;}const _errs86 = errors;if(typeof data11 === "string"){if(!pattern94.test(data11)){const err79 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}}var _valid0 = _errs86 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 55];}else {if(_valid0){valid9 = true;passing0 = 55;}const _errs87 = errors;if(typeof data11 === "string"){if(!pattern95.test(data11)){const err80 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err80];}else {vErrors.push(err80);}errors++;}}var _valid0 = _errs87 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 56];}else {if(_valid0){valid9 = true;passing0 = 56;}const _errs88 = errors;if(typeof data11 === "string"){if(!pattern96.test(data11)){const err81 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err81];}else {vErrors.push(err81);}errors++;}}var _valid0 = _errs88 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 57];}else {if(_valid0){valid9 = true;passing0 = 57;}const _errs89 = errors;if(typeof data11 === "string"){if(!pattern97.test(data11)){const err82 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err82];}else {vErrors.push(err82);}errors++;}}var _valid0 = _errs89 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 58];}else {if(_valid0){valid9 = true;passing0 = 58;}const _errs90 = errors;if(typeof data11 === "string"){if(!pattern98.test(data11)){const err83 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err83];}else {vErrors.push(err83);}errors++;}}var _valid0 = _errs90 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 59];}else {if(_valid0){valid9 = true;passing0 = 59;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid9){const err84 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err84];}else {vErrors.push(err84);}errors++;}else {errors = _errs30;if(vErrors !== null){if(_errs30){vErrors.length = _errs30;}else {vErrors = null;}}}if(typeof data11 === "string"){if(!pattern19.test(data11)){const err85 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err85];}else {vErrors.push(err85);}errors++;}}else {const err86 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err86];}else {vErrors.push(err86);}errors++;}}}else {const err87 = {instancePath:instancePath+"/rankList/" + i0+"/modList",schemaPath:"#/properties/rankList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err87];}else {vErrors.push(err87);}errors++;}}}else {const err88 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err88];}else {vErrors.push(err88);}errors++;}}}else {const err89 = {instancePath:instancePath+"/rankList",schemaPath:"#/properties/rankList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err89];}else {vErrors.push(err89);}errors++;}}}else {const err90 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err90];}else {vErrors.push(err90);}errors++;}validate29.errors = vErrors;return errors === 0;}const schema43 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"manaCost":{"type":"integer","minimum":0},"baseDuration":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["baseDuration","manaCost","modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]};function validate31(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.id === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.name === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.rankList === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "rankList"},message:"must have required property '"+"rankList"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key0 in data){if(!((((key0 === "id") || (key0 === "name")) || (key0 === "requirements")) || (key0 === "rankList"))){delete data[key0];}}if(data.id !== undefined){let data0 = data.id;if(typeof data0 === "string"){if(!pattern20.test(data0)){const err3 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}else {const err4 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}if(data.name !== undefined){let data1 = data.name;if(typeof data1 === "string"){if(!pattern22.test(data1)){const err5 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}else {const err6 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}if(data.requirements !== undefined){let data2 = data.requirements;if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.characterLevel === undefined){const err7 = {instancePath:instancePath+"/requirements",schemaPath:"#/properties/requirements/required",keyword:"required",params:{missingProperty: "characterLevel"},message:"must have required property '"+"characterLevel"+"'"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}for(const key1 in data2){if(!(key1 === "characterLevel")){delete data2[key1];}}if(data2.characterLevel !== undefined){let data3 = data2.characterLevel;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){const err8 = {instancePath:instancePath+"/requirements/characterLevel",schemaPath:"#/properties/requirements/properties/characterLevel/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 1 || isNaN(data3)){const err9 = {instancePath:instancePath+"/requirements/characterLevel",schemaPath:"#/properties/requirements/properties/characterLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}}}else {const err10 = {instancePath:instancePath+"/requirements",schemaPath:"#/properties/requirements/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}if(data.rankList !== undefined){let data4 = data.rankList;if(Array.isArray(data4)){if(data4.length < 1){const err11 = {instancePath:instancePath+"/rankList",schemaPath:"#/properties/rankList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}const len0 = data4.length;for(let i0=0; i0<len0; i0++){let data5 = data4[i0];if(data5 && typeof data5 == "object" && !Array.isArray(data5)){if(data5.baseDuration === undefined){const err12 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "baseDuration"},message:"must have required property '"+"baseDuration"+"'"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}if(data5.manaCost === undefined){const err13 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "manaCost"},message:"must have required property '"+"manaCost"+"'"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}if(data5.modList === undefined){const err14 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "modList"},message:"must have required property '"+"modList"+"'"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}for(const key2 in data5){if(!((((key2 === "exp") || (key2 === "manaCost")) || (key2 === "baseDuration")) || (key2 === "modList"))){delete data5[key2];}}if(data5.exp !== undefined){let data6 = data5.exp;if(!(((typeof data6 == "number") && (!(data6 % 1) && !isNaN(data6))) && (isFinite(data6)))){const err15 = {instancePath:instancePath+"/rankList/" + i0+"/exp",schemaPath:"#/properties/rankList/items/properties/exp/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}if((typeof data6 == "number") && (isFinite(data6))){if(data6 < 1 || isNaN(data6)){const err16 = {instancePath:instancePath+"/rankList/" + i0+"/exp",schemaPath:"#/properties/rankList/items/properties/exp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}}if(data5.manaCost !== undefined){let data7 = data5.manaCost;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){const err17 = {instancePath:instancePath+"/rankList/" + i0+"/manaCost",schemaPath:"#/properties/rankList/items/properties/manaCost/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}if((typeof data7 == "number") && (isFinite(data7))){if(data7 < 0 || isNaN(data7)){const err18 = {instancePath:instancePath+"/rankList/" + i0+"/manaCost",schemaPath:"#/properties/rankList/items/properties/manaCost/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}}if(data5.baseDuration !== undefined){let data8 = data5.baseDuration;if(!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))){const err19 = {instancePath:instancePath+"/rankList/" + i0+"/baseDuration",schemaPath:"#/properties/rankList/items/properties/baseDuration/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}if((typeof data8 == "number") && (isFinite(data8))){if(data8 < 0 || isNaN(data8)){const err20 = {instancePath:instancePath+"/rankList/" + i0+"/baseDuration",schemaPath:"#/properties/rankList/items/properties/baseDuration/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}}if(data5.modList !== undefined){let data9 = data5.modList;if(Array.isArray(data9)){const len1 = data9.length;for(let i1=0; i1<len1; i1++){let data10 = data9[i1];const _errs28 = errors;let valid9 = false;let passing0 = null;const _errs29 = errors;if(typeof data10 === "string"){if(!pattern39.test(data10)){const err21 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0){valid9 = true;passing0 = 0;}const _errs30 = errors;if(typeof data10 === "string"){if(!pattern40.test(data10)){const err22 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 1];}else {if(_valid0){valid9 = true;passing0 = 1;}const _errs31 = errors;if(typeof data10 === "string"){if(!pattern41.test(data10)){const err23 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 2];}else {if(_valid0){valid9 = true;passing0 = 2;}const _errs32 = errors;if(typeof data10 === "string"){if(!pattern42.test(data10)){const err24 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 3];}else {if(_valid0){valid9 = true;passing0 = 3;}const _errs33 = errors;if(typeof data10 === "string"){if(!pattern43.test(data10)){const err25 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 4];}else {if(_valid0){valid9 = true;passing0 = 4;}const _errs34 = errors;if(typeof data10 === "string"){if(!pattern44.test(data10)){const err26 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 5];}else {if(_valid0){valid9 = true;passing0 = 5;}const _errs35 = errors;if(typeof data10 === "string"){if(!pattern45.test(data10)){const err27 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 6];}else {if(_valid0){valid9 = true;passing0 = 6;}const _errs36 = errors;if(typeof data10 === "string"){if(!pattern46.test(data10)){const err28 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 7];}else {if(_valid0){valid9 = true;passing0 = 7;}const _errs37 = errors;if(typeof data10 === "string"){if(!pattern47.test(data10)){const err29 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 8];}else {if(_valid0){valid9 = true;passing0 = 8;}const _errs38 = errors;if(typeof data10 === "string"){if(!pattern48.test(data10)){const err30 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 9];}else {if(_valid0){valid9 = true;passing0 = 9;}const _errs39 = errors;if(typeof data10 === "string"){if(!pattern49.test(data10)){const err31 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 10];}else {if(_valid0){valid9 = true;passing0 = 10;}const _errs40 = errors;if(typeof data10 === "string"){if(!pattern50.test(data10)){const err32 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 11];}else {if(_valid0){valid9 = true;passing0 = 11;}const _errs41 = errors;if(typeof data10 === "string"){if(!pattern4.test(data10)){const err33 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 12];}else {if(_valid0){valid9 = true;passing0 = 12;}const _errs42 = errors;if(typeof data10 === "string"){if(!pattern5.test(data10)){const err34 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 13];}else {if(_valid0){valid9 = true;passing0 = 13;}const _errs43 = errors;if(typeof data10 === "string"){if(!pattern53.test(data10)){const err35 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 14];}else {if(_valid0){valid9 = true;passing0 = 14;}const _errs44 = errors;if(typeof data10 === "string"){if(!pattern54.test(data10)){const err36 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 15];}else {if(_valid0){valid9 = true;passing0 = 15;}const _errs45 = errors;if(typeof data10 === "string"){if(!pattern55.test(data10)){const err37 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 16];}else {if(_valid0){valid9 = true;passing0 = 16;}const _errs46 = errors;if(typeof data10 === "string"){if(!pattern16.test(data10)){const err38 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 17];}else {if(_valid0){valid9 = true;passing0 = 17;}const _errs47 = errors;if(typeof data10 === "string"){if(!pattern17.test(data10)){const err39 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 18];}else {if(_valid0){valid9 = true;passing0 = 18;}const _errs48 = errors;if(typeof data10 === "string"){if(!pattern58.test(data10)){const err40 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 19];}else {if(_valid0){valid9 = true;passing0 = 19;}const _errs49 = errors;if(typeof data10 === "string"){if(!pattern18.test(data10)){const err41 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 20];}else {if(_valid0){valid9 = true;passing0 = 20;}const _errs50 = errors;if(typeof data10 === "string"){if(!pattern60.test(data10)){const err42 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 21];}else {if(_valid0){valid9 = true;passing0 = 21;}const _errs51 = errors;if(typeof data10 === "string"){if(!pattern61.test(data10)){const err43 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 22];}else {if(_valid0){valid9 = true;passing0 = 22;}const _errs52 = errors;if(typeof data10 === "string"){if(!pattern62.test(data10)){const err44 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 23];}else {if(_valid0){valid9 = true;passing0 = 23;}const _errs53 = errors;if(typeof data10 === "string"){if(!pattern63.test(data10)){const err45 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 24];}else {if(_valid0){valid9 = true;passing0 = 24;}const _errs54 = errors;if(typeof data10 === "string"){if(!pattern64.test(data10)){const err46 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 25];}else {if(_valid0){valid9 = true;passing0 = 25;}const _errs55 = errors;if(typeof data10 === "string"){if(!pattern6.test(data10)){const err47 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 26];}else {if(_valid0){valid9 = true;passing0 = 26;}const _errs56 = errors;if(typeof data10 === "string"){if(!pattern66.test(data10)){const err48 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 27];}else {if(_valid0){valid9 = true;passing0 = 27;}const _errs57 = errors;if(typeof data10 === "string"){if(!pattern67.test(data10)){const err49 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 28];}else {if(_valid0){valid9 = true;passing0 = 28;}const _errs58 = errors;if(typeof data10 === "string"){if(!pattern68.test(data10)){const err50 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 29];}else {if(_valid0){valid9 = true;passing0 = 29;}const _errs59 = errors;if(typeof data10 === "string"){if(!pattern69.test(data10)){const err51 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 30];}else {if(_valid0){valid9 = true;passing0 = 30;}const _errs60 = errors;if(typeof data10 === "string"){if(!pattern70.test(data10)){const err52 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 31];}else {if(_valid0){valid9 = true;passing0 = 31;}const _errs61 = errors;if(typeof data10 === "string"){if(!pattern7.test(data10)){const err53 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 32];}else {if(_valid0){valid9 = true;passing0 = 32;}const _errs62 = errors;if(typeof data10 === "string"){if(!pattern72.test(data10)){const err54 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 33];}else {if(_valid0){valid9 = true;passing0 = 33;}const _errs63 = errors;if(typeof data10 === "string"){if(!pattern73.test(data10)){const err55 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 34];}else {if(_valid0){valid9 = true;passing0 = 34;}const _errs64 = errors;if(typeof data10 === "string"){if(!pattern74.test(data10)){const err56 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 35];}else {if(_valid0){valid9 = true;passing0 = 35;}const _errs65 = errors;if(typeof data10 === "string"){if(!pattern75.test(data10)){const err57 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 36];}else {if(_valid0){valid9 = true;passing0 = 36;}const _errs66 = errors;if(typeof data10 === "string"){if(!pattern76.test(data10)){const err58 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 37];}else {if(_valid0){valid9 = true;passing0 = 37;}const _errs67 = errors;if(typeof data10 === "string"){if(!pattern77.test(data10)){const err59 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 38];}else {if(_valid0){valid9 = true;passing0 = 38;}const _errs68 = errors;if(typeof data10 === "string"){if(!pattern78.test(data10)){const err60 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 39];}else {if(_valid0){valid9 = true;passing0 = 39;}const _errs69 = errors;if(typeof data10 === "string"){if(!pattern79.test(data10)){const err61 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 40];}else {if(_valid0){valid9 = true;passing0 = 40;}const _errs70 = errors;if(typeof data10 === "string"){if(!pattern8.test(data10)){const err62 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 41];}else {if(_valid0){valid9 = true;passing0 = 41;}const _errs71 = errors;if(typeof data10 === "string"){if(!pattern9.test(data10)){const err63 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 42];}else {if(_valid0){valid9 = true;passing0 = 42;}const _errs72 = errors;if(typeof data10 === "string"){if(!pattern10.test(data10)){const err64 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 43];}else {if(_valid0){valid9 = true;passing0 = 43;}const _errs73 = errors;if(typeof data10 === "string"){if(!pattern83.test(data10)){const err65 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 44];}else {if(_valid0){valid9 = true;passing0 = 44;}const _errs74 = errors;if(typeof data10 === "string"){if(!pattern11.test(data10)){const err66 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 45];}else {if(_valid0){valid9 = true;passing0 = 45;}const _errs75 = errors;if(typeof data10 === "string"){if(!pattern85.test(data10)){const err67 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 46];}else {if(_valid0){valid9 = true;passing0 = 46;}const _errs76 = errors;if(typeof data10 === "string"){if(!pattern12.test(data10)){const err68 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 47];}else {if(_valid0){valid9 = true;passing0 = 47;}const _errs77 = errors;if(typeof data10 === "string"){if(!pattern13.test(data10)){const err69 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}var _valid0 = _errs77 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 48];}else {if(_valid0){valid9 = true;passing0 = 48;}const _errs78 = errors;if(typeof data10 === "string"){if(!pattern14.test(data10)){const err70 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}var _valid0 = _errs78 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 49];}else {if(_valid0){valid9 = true;passing0 = 49;}const _errs79 = errors;if(typeof data10 === "string"){if(!pattern89.test(data10)){const err71 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}var _valid0 = _errs79 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 50];}else {if(_valid0){valid9 = true;passing0 = 50;}const _errs80 = errors;if(typeof data10 === "string"){if(!pattern90.test(data10)){const err72 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}}var _valid0 = _errs80 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 51];}else {if(_valid0){valid9 = true;passing0 = 51;}const _errs81 = errors;if(typeof data10 === "string"){if(!pattern15.test(data10)){const err73 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}}var _valid0 = _errs81 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 52];}else {if(_valid0){valid9 = true;passing0 = 52;}const _errs82 = errors;if(typeof data10 === "string"){if(!pattern92.test(data10)){const err74 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}var _valid0 = _errs82 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 53];}else {if(_valid0){valid9 = true;passing0 = 53;}const _errs83 = errors;if(typeof data10 === "string"){if(!pattern93.test(data10)){const err75 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}var _valid0 = _errs83 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 54];}else {if(_valid0){valid9 = true;passing0 = 54;}const _errs84 = errors;if(typeof data10 === "string"){if(!pattern94.test(data10)){const err76 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}var _valid0 = _errs84 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 55];}else {if(_valid0){valid9 = true;passing0 = 55;}const _errs85 = errors;if(typeof data10 === "string"){if(!pattern95.test(data10)){const err77 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}var _valid0 = _errs85 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 56];}else {if(_valid0){valid9 = true;passing0 = 56;}const _errs86 = errors;if(typeof data10 === "string"){if(!pattern96.test(data10)){const err78 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}}var _valid0 = _errs86 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 57];}else {if(_valid0){valid9 = true;passing0 = 57;}const _errs87 = errors;if(typeof data10 === "string"){if(!pattern97.test(data10)){const err79 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}}var _valid0 = _errs87 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 58];}else {if(_valid0){valid9 = true;passing0 = 58;}const _errs88 = errors;if(typeof data10 === "string"){if(!pattern98.test(data10)){const err80 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err80];}else {vErrors.push(err80);}errors++;}}var _valid0 = _errs88 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 59];}else {if(_valid0){valid9 = true;passing0 = 59;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid9){const err81 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err81];}else {vErrors.push(err81);}errors++;}else {errors = _errs28;if(vErrors !== null){if(_errs28){vErrors.length = _errs28;}else {vErrors = null;}}}if(typeof data10 === "string"){if(!pattern19.test(data10)){const err82 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err82];}else {vErrors.push(err82);}errors++;}}else {const err83 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err83];}else {vErrors.push(err83);}errors++;}}}else {const err84 = {instancePath:instancePath+"/rankList/" + i0+"/modList",schemaPath:"#/properties/rankList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err84];}else {vErrors.push(err84);}errors++;}}}else {const err85 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err85];}else {vErrors.push(err85);}errors++;}}}else {const err86 = {instancePath:instancePath+"/rankList",schemaPath:"#/properties/rankList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err86];}else {vErrors.push(err86);}errors++;}}}else {const err87 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err87];}else {vErrors.push(err87);}errors++;}validate31.errors = vErrors;return errors === 0;}const schema47 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"requirements":{"description":"only applies to first rank","type":"object","properties":{"characterLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["characterLevel"]},"insightCost":{"type":"integer","minimum":0},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":1,"default":0,"description":"1 exp gained per attack"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList"]}}},"additionalProperties":false,"required":["id","insightCost","name","rankList"]};function validate33(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.id === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.insightCost === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "insightCost"},message:"must have required property '"+"insightCost"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.name === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.rankList === undefined){const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "rankList"},message:"must have required property '"+"rankList"+"'"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}for(const key0 in data){if(!(((((key0 === "id") || (key0 === "name")) || (key0 === "requirements")) || (key0 === "insightCost")) || (key0 === "rankList"))){delete data[key0];}}if(data.id !== undefined){let data0 = data.id;if(typeof data0 === "string"){if(!pattern20.test(data0)){const err4 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}else {const err5 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.name !== undefined){let data1 = data.name;if(typeof data1 === "string"){if(!pattern22.test(data1)){const err6 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}else {const err7 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}if(data.requirements !== undefined){let data2 = data.requirements;if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.characterLevel === undefined){const err8 = {instancePath:instancePath+"/requirements",schemaPath:"#/properties/requirements/required",keyword:"required",params:{missingProperty: "characterLevel"},message:"must have required property '"+"characterLevel"+"'"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}for(const key1 in data2){if(!(key1 === "characterLevel")){delete data2[key1];}}if(data2.characterLevel !== undefined){let data3 = data2.characterLevel;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){const err9 = {instancePath:instancePath+"/requirements/characterLevel",schemaPath:"#/properties/requirements/properties/characterLevel/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 1 || isNaN(data3)){const err10 = {instancePath:instancePath+"/requirements/characterLevel",schemaPath:"#/properties/requirements/properties/characterLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}}}else {const err11 = {instancePath:instancePath+"/requirements",schemaPath:"#/properties/requirements/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}if(data.insightCost !== undefined){let data4 = data.insightCost;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){const err12 = {instancePath:instancePath+"/insightCost",schemaPath:"#/properties/insightCost/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}if((typeof data4 == "number") && (isFinite(data4))){if(data4 < 0 || isNaN(data4)){const err13 = {instancePath:instancePath+"/insightCost",schemaPath:"#/properties/insightCost/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}}if(data.rankList !== undefined){let data5 = data.rankList;if(Array.isArray(data5)){if(data5.length < 1){const err14 = {instancePath:instancePath+"/rankList",schemaPath:"#/properties/rankList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}const len0 = data5.length;for(let i0=0; i0<len0; i0++){let data6 = data5[i0];if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.modList === undefined){const err15 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "modList"},message:"must have required property '"+"modList"+"'"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}for(const key2 in data6){if(!((key2 === "exp") || (key2 === "modList"))){delete data6[key2];}}if(data6.exp !== undefined){let data7 = data6.exp;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){const err16 = {instancePath:instancePath+"/rankList/" + i0+"/exp",schemaPath:"#/properties/rankList/items/properties/exp/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}if((typeof data7 == "number") && (isFinite(data7))){if(data7 < 1 || isNaN(data7)){const err17 = {instancePath:instancePath+"/rankList/" + i0+"/exp",schemaPath:"#/properties/rankList/items/properties/exp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}}if(data6.modList !== undefined){let data8 = data6.modList;if(Array.isArray(data8)){const len1 = data8.length;for(let i1=0; i1<len1; i1++){let data9 = data8[i1];const _errs26 = errors;let valid9 = false;let passing0 = null;const _errs27 = errors;if(typeof data9 === "string"){if(!pattern39.test(data9)){const err18 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0){valid9 = true;passing0 = 0;}const _errs28 = errors;if(typeof data9 === "string"){if(!pattern40.test(data9)){const err19 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 1];}else {if(_valid0){valid9 = true;passing0 = 1;}const _errs29 = errors;if(typeof data9 === "string"){if(!pattern41.test(data9)){const err20 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 2];}else {if(_valid0){valid9 = true;passing0 = 2;}const _errs30 = errors;if(typeof data9 === "string"){if(!pattern42.test(data9)){const err21 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 3];}else {if(_valid0){valid9 = true;passing0 = 3;}const _errs31 = errors;if(typeof data9 === "string"){if(!pattern43.test(data9)){const err22 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 4];}else {if(_valid0){valid9 = true;passing0 = 4;}const _errs32 = errors;if(typeof data9 === "string"){if(!pattern44.test(data9)){const err23 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 5];}else {if(_valid0){valid9 = true;passing0 = 5;}const _errs33 = errors;if(typeof data9 === "string"){if(!pattern45.test(data9)){const err24 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 6];}else {if(_valid0){valid9 = true;passing0 = 6;}const _errs34 = errors;if(typeof data9 === "string"){if(!pattern46.test(data9)){const err25 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 7];}else {if(_valid0){valid9 = true;passing0 = 7;}const _errs35 = errors;if(typeof data9 === "string"){if(!pattern47.test(data9)){const err26 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 8];}else {if(_valid0){valid9 = true;passing0 = 8;}const _errs36 = errors;if(typeof data9 === "string"){if(!pattern48.test(data9)){const err27 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 9];}else {if(_valid0){valid9 = true;passing0 = 9;}const _errs37 = errors;if(typeof data9 === "string"){if(!pattern49.test(data9)){const err28 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 10];}else {if(_valid0){valid9 = true;passing0 = 10;}const _errs38 = errors;if(typeof data9 === "string"){if(!pattern50.test(data9)){const err29 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 11];}else {if(_valid0){valid9 = true;passing0 = 11;}const _errs39 = errors;if(typeof data9 === "string"){if(!pattern4.test(data9)){const err30 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 12];}else {if(_valid0){valid9 = true;passing0 = 12;}const _errs40 = errors;if(typeof data9 === "string"){if(!pattern5.test(data9)){const err31 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 13];}else {if(_valid0){valid9 = true;passing0 = 13;}const _errs41 = errors;if(typeof data9 === "string"){if(!pattern53.test(data9)){const err32 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 14];}else {if(_valid0){valid9 = true;passing0 = 14;}const _errs42 = errors;if(typeof data9 === "string"){if(!pattern54.test(data9)){const err33 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 15];}else {if(_valid0){valid9 = true;passing0 = 15;}const _errs43 = errors;if(typeof data9 === "string"){if(!pattern55.test(data9)){const err34 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 16];}else {if(_valid0){valid9 = true;passing0 = 16;}const _errs44 = errors;if(typeof data9 === "string"){if(!pattern16.test(data9)){const err35 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 17];}else {if(_valid0){valid9 = true;passing0 = 17;}const _errs45 = errors;if(typeof data9 === "string"){if(!pattern17.test(data9)){const err36 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 18];}else {if(_valid0){valid9 = true;passing0 = 18;}const _errs46 = errors;if(typeof data9 === "string"){if(!pattern58.test(data9)){const err37 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 19];}else {if(_valid0){valid9 = true;passing0 = 19;}const _errs47 = errors;if(typeof data9 === "string"){if(!pattern18.test(data9)){const err38 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 20];}else {if(_valid0){valid9 = true;passing0 = 20;}const _errs48 = errors;if(typeof data9 === "string"){if(!pattern60.test(data9)){const err39 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 21];}else {if(_valid0){valid9 = true;passing0 = 21;}const _errs49 = errors;if(typeof data9 === "string"){if(!pattern61.test(data9)){const err40 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 22];}else {if(_valid0){valid9 = true;passing0 = 22;}const _errs50 = errors;if(typeof data9 === "string"){if(!pattern62.test(data9)){const err41 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 23];}else {if(_valid0){valid9 = true;passing0 = 23;}const _errs51 = errors;if(typeof data9 === "string"){if(!pattern63.test(data9)){const err42 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 24];}else {if(_valid0){valid9 = true;passing0 = 24;}const _errs52 = errors;if(typeof data9 === "string"){if(!pattern64.test(data9)){const err43 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 25];}else {if(_valid0){valid9 = true;passing0 = 25;}const _errs53 = errors;if(typeof data9 === "string"){if(!pattern6.test(data9)){const err44 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 26];}else {if(_valid0){valid9 = true;passing0 = 26;}const _errs54 = errors;if(typeof data9 === "string"){if(!pattern66.test(data9)){const err45 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 27];}else {if(_valid0){valid9 = true;passing0 = 27;}const _errs55 = errors;if(typeof data9 === "string"){if(!pattern67.test(data9)){const err46 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 28];}else {if(_valid0){valid9 = true;passing0 = 28;}const _errs56 = errors;if(typeof data9 === "string"){if(!pattern68.test(data9)){const err47 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 29];}else {if(_valid0){valid9 = true;passing0 = 29;}const _errs57 = errors;if(typeof data9 === "string"){if(!pattern69.test(data9)){const err48 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 30];}else {if(_valid0){valid9 = true;passing0 = 30;}const _errs58 = errors;if(typeof data9 === "string"){if(!pattern70.test(data9)){const err49 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 31];}else {if(_valid0){valid9 = true;passing0 = 31;}const _errs59 = errors;if(typeof data9 === "string"){if(!pattern7.test(data9)){const err50 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 32];}else {if(_valid0){valid9 = true;passing0 = 32;}const _errs60 = errors;if(typeof data9 === "string"){if(!pattern72.test(data9)){const err51 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 33];}else {if(_valid0){valid9 = true;passing0 = 33;}const _errs61 = errors;if(typeof data9 === "string"){if(!pattern73.test(data9)){const err52 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 34];}else {if(_valid0){valid9 = true;passing0 = 34;}const _errs62 = errors;if(typeof data9 === "string"){if(!pattern74.test(data9)){const err53 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 35];}else {if(_valid0){valid9 = true;passing0 = 35;}const _errs63 = errors;if(typeof data9 === "string"){if(!pattern75.test(data9)){const err54 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 36];}else {if(_valid0){valid9 = true;passing0 = 36;}const _errs64 = errors;if(typeof data9 === "string"){if(!pattern76.test(data9)){const err55 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 37];}else {if(_valid0){valid9 = true;passing0 = 37;}const _errs65 = errors;if(typeof data9 === "string"){if(!pattern77.test(data9)){const err56 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 38];}else {if(_valid0){valid9 = true;passing0 = 38;}const _errs66 = errors;if(typeof data9 === "string"){if(!pattern78.test(data9)){const err57 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 39];}else {if(_valid0){valid9 = true;passing0 = 39;}const _errs67 = errors;if(typeof data9 === "string"){if(!pattern79.test(data9)){const err58 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 40];}else {if(_valid0){valid9 = true;passing0 = 40;}const _errs68 = errors;if(typeof data9 === "string"){if(!pattern8.test(data9)){const err59 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 41];}else {if(_valid0){valid9 = true;passing0 = 41;}const _errs69 = errors;if(typeof data9 === "string"){if(!pattern9.test(data9)){const err60 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 42];}else {if(_valid0){valid9 = true;passing0 = 42;}const _errs70 = errors;if(typeof data9 === "string"){if(!pattern10.test(data9)){const err61 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 43];}else {if(_valid0){valid9 = true;passing0 = 43;}const _errs71 = errors;if(typeof data9 === "string"){if(!pattern83.test(data9)){const err62 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 44];}else {if(_valid0){valid9 = true;passing0 = 44;}const _errs72 = errors;if(typeof data9 === "string"){if(!pattern11.test(data9)){const err63 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 45];}else {if(_valid0){valid9 = true;passing0 = 45;}const _errs73 = errors;if(typeof data9 === "string"){if(!pattern85.test(data9)){const err64 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 46];}else {if(_valid0){valid9 = true;passing0 = 46;}const _errs74 = errors;if(typeof data9 === "string"){if(!pattern12.test(data9)){const err65 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 47];}else {if(_valid0){valid9 = true;passing0 = 47;}const _errs75 = errors;if(typeof data9 === "string"){if(!pattern13.test(data9)){const err66 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 48];}else {if(_valid0){valid9 = true;passing0 = 48;}const _errs76 = errors;if(typeof data9 === "string"){if(!pattern14.test(data9)){const err67 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 49];}else {if(_valid0){valid9 = true;passing0 = 49;}const _errs77 = errors;if(typeof data9 === "string"){if(!pattern89.test(data9)){const err68 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}var _valid0 = _errs77 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 50];}else {if(_valid0){valid9 = true;passing0 = 50;}const _errs78 = errors;if(typeof data9 === "string"){if(!pattern90.test(data9)){const err69 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}var _valid0 = _errs78 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 51];}else {if(_valid0){valid9 = true;passing0 = 51;}const _errs79 = errors;if(typeof data9 === "string"){if(!pattern15.test(data9)){const err70 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}var _valid0 = _errs79 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 52];}else {if(_valid0){valid9 = true;passing0 = 52;}const _errs80 = errors;if(typeof data9 === "string"){if(!pattern92.test(data9)){const err71 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}var _valid0 = _errs80 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 53];}else {if(_valid0){valid9 = true;passing0 = 53;}const _errs81 = errors;if(typeof data9 === "string"){if(!pattern93.test(data9)){const err72 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}}var _valid0 = _errs81 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 54];}else {if(_valid0){valid9 = true;passing0 = 54;}const _errs82 = errors;if(typeof data9 === "string"){if(!pattern94.test(data9)){const err73 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}}var _valid0 = _errs82 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 55];}else {if(_valid0){valid9 = true;passing0 = 55;}const _errs83 = errors;if(typeof data9 === "string"){if(!pattern95.test(data9)){const err74 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}var _valid0 = _errs83 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 56];}else {if(_valid0){valid9 = true;passing0 = 56;}const _errs84 = errors;if(typeof data9 === "string"){if(!pattern96.test(data9)){const err75 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}var _valid0 = _errs84 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 57];}else {if(_valid0){valid9 = true;passing0 = 57;}const _errs85 = errors;if(typeof data9 === "string"){if(!pattern97.test(data9)){const err76 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}var _valid0 = _errs85 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 58];}else {if(_valid0){valid9 = true;passing0 = 58;}const _errs86 = errors;if(typeof data9 === "string"){if(!pattern98.test(data9)){const err77 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}var _valid0 = _errs86 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 59];}else {if(_valid0){valid9 = true;passing0 = 59;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid9){const err78 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}else {errors = _errs26;if(vErrors !== null){if(_errs26){vErrors.length = _errs26;}else {vErrors = null;}}}if(typeof data9 === "string"){if(!pattern19.test(data9)){const err79 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}}else {const err80 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err80];}else {vErrors.push(err80);}errors++;}}}else {const err81 = {instancePath:instancePath+"/rankList/" + i0+"/modList",schemaPath:"#/properties/rankList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err81];}else {vErrors.push(err81);}errors++;}}}else {const err82 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err82];}else {vErrors.push(err82);}errors++;}}}else {const err83 = {instancePath:instancePath+"/rankList",schemaPath:"#/properties/rankList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err83];}else {vErrors.push(err83);}errors++;}}}else {const err84 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err84];}else {vErrors.push(err84);}errors++;}validate33.errors = vErrors;return errors === 0;}function validate27(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){for(const key0 in data){if(!((((key0 === "levelList") || (key0 === "attackSkills")) || (key0 === "auraSkills")) || (key0 === "passiveSkills"))){delete data[key0];}}if(data.levelList !== undefined){let data0 = data.levelList;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];if(data1 && typeof data1 == "object" && !Array.isArray(data1)){for(const key1 in data1){if(!((key1 === "upgradeCost") || (key1 === "modList"))){delete data1[key1];}}if(data1.upgradeCost !== undefined){if(!(validate18(data1.upgradeCost, {instancePath:instancePath+"/levelList/" + i0+"/upgradeCost",parentData:data1,parentDataProperty:"upgradeCost",rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}}if(data1.modList !== undefined){let data3 = data1.modList;if(Array.isArray(data3)){const len1 = data3.length;for(let i1=0; i1<len1; i1++){let data4 = data3[i1];const _errs13 = errors;let valid7 = false;let passing0 = null;const _errs14 = errors;if(typeof data4 === "string"){if(!pattern39.test(data4)){const err0 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0){valid7 = true;passing0 = 0;}const _errs15 = errors;if(typeof data4 === "string"){if(!pattern40.test(data4)){const err1 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 1];}else {if(_valid0){valid7 = true;passing0 = 1;}const _errs16 = errors;if(typeof data4 === "string"){if(!pattern41.test(data4)){const err2 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 2];}else {if(_valid0){valid7 = true;passing0 = 2;}const _errs17 = errors;if(typeof data4 === "string"){if(!pattern42.test(data4)){const err3 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs17 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 3];}else {if(_valid0){valid7 = true;passing0 = 3;}const _errs18 = errors;if(typeof data4 === "string"){if(!pattern43.test(data4)){const err4 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 4];}else {if(_valid0){valid7 = true;passing0 = 4;}const _errs19 = errors;if(typeof data4 === "string"){if(!pattern44.test(data4)){const err5 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 5];}else {if(_valid0){valid7 = true;passing0 = 5;}const _errs20 = errors;if(typeof data4 === "string"){if(!pattern45.test(data4)){const err6 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 6];}else {if(_valid0){valid7 = true;passing0 = 6;}const _errs21 = errors;if(typeof data4 === "string"){if(!pattern46.test(data4)){const err7 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 7];}else {if(_valid0){valid7 = true;passing0 = 7;}const _errs22 = errors;if(typeof data4 === "string"){if(!pattern47.test(data4)){const err8 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 8];}else {if(_valid0){valid7 = true;passing0 = 8;}const _errs23 = errors;if(typeof data4 === "string"){if(!pattern48.test(data4)){const err9 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 9];}else {if(_valid0){valid7 = true;passing0 = 9;}const _errs24 = errors;if(typeof data4 === "string"){if(!pattern49.test(data4)){const err10 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 10];}else {if(_valid0){valid7 = true;passing0 = 10;}const _errs25 = errors;if(typeof data4 === "string"){if(!pattern50.test(data4)){const err11 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 11];}else {if(_valid0){valid7 = true;passing0 = 11;}const _errs26 = errors;if(typeof data4 === "string"){if(!pattern4.test(data4)){const err12 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 12];}else {if(_valid0){valid7 = true;passing0 = 12;}const _errs27 = errors;if(typeof data4 === "string"){if(!pattern5.test(data4)){const err13 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 13];}else {if(_valid0){valid7 = true;passing0 = 13;}const _errs28 = errors;if(typeof data4 === "string"){if(!pattern53.test(data4)){const err14 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 14];}else {if(_valid0){valid7 = true;passing0 = 14;}const _errs29 = errors;if(typeof data4 === "string"){if(!pattern54.test(data4)){const err15 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 15];}else {if(_valid0){valid7 = true;passing0 = 15;}const _errs30 = errors;if(typeof data4 === "string"){if(!pattern55.test(data4)){const err16 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 16];}else {if(_valid0){valid7 = true;passing0 = 16;}const _errs31 = errors;if(typeof data4 === "string"){if(!pattern16.test(data4)){const err17 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 17];}else {if(_valid0){valid7 = true;passing0 = 17;}const _errs32 = errors;if(typeof data4 === "string"){if(!pattern17.test(data4)){const err18 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 18];}else {if(_valid0){valid7 = true;passing0 = 18;}const _errs33 = errors;if(typeof data4 === "string"){if(!pattern58.test(data4)){const err19 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 19];}else {if(_valid0){valid7 = true;passing0 = 19;}const _errs34 = errors;if(typeof data4 === "string"){if(!pattern18.test(data4)){const err20 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 20];}else {if(_valid0){valid7 = true;passing0 = 20;}const _errs35 = errors;if(typeof data4 === "string"){if(!pattern60.test(data4)){const err21 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 21];}else {if(_valid0){valid7 = true;passing0 = 21;}const _errs36 = errors;if(typeof data4 === "string"){if(!pattern61.test(data4)){const err22 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 22];}else {if(_valid0){valid7 = true;passing0 = 22;}const _errs37 = errors;if(typeof data4 === "string"){if(!pattern62.test(data4)){const err23 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 23];}else {if(_valid0){valid7 = true;passing0 = 23;}const _errs38 = errors;if(typeof data4 === "string"){if(!pattern63.test(data4)){const err24 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 24];}else {if(_valid0){valid7 = true;passing0 = 24;}const _errs39 = errors;if(typeof data4 === "string"){if(!pattern64.test(data4)){const err25 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 25];}else {if(_valid0){valid7 = true;passing0 = 25;}const _errs40 = errors;if(typeof data4 === "string"){if(!pattern6.test(data4)){const err26 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 26];}else {if(_valid0){valid7 = true;passing0 = 26;}const _errs41 = errors;if(typeof data4 === "string"){if(!pattern66.test(data4)){const err27 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 27];}else {if(_valid0){valid7 = true;passing0 = 27;}const _errs42 = errors;if(typeof data4 === "string"){if(!pattern67.test(data4)){const err28 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 28];}else {if(_valid0){valid7 = true;passing0 = 28;}const _errs43 = errors;if(typeof data4 === "string"){if(!pattern68.test(data4)){const err29 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 29];}else {if(_valid0){valid7 = true;passing0 = 29;}const _errs44 = errors;if(typeof data4 === "string"){if(!pattern69.test(data4)){const err30 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 30];}else {if(_valid0){valid7 = true;passing0 = 30;}const _errs45 = errors;if(typeof data4 === "string"){if(!pattern70.test(data4)){const err31 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 31];}else {if(_valid0){valid7 = true;passing0 = 31;}const _errs46 = errors;if(typeof data4 === "string"){if(!pattern7.test(data4)){const err32 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 32];}else {if(_valid0){valid7 = true;passing0 = 32;}const _errs47 = errors;if(typeof data4 === "string"){if(!pattern72.test(data4)){const err33 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 33];}else {if(_valid0){valid7 = true;passing0 = 33;}const _errs48 = errors;if(typeof data4 === "string"){if(!pattern73.test(data4)){const err34 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 34];}else {if(_valid0){valid7 = true;passing0 = 34;}const _errs49 = errors;if(typeof data4 === "string"){if(!pattern74.test(data4)){const err35 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 35];}else {if(_valid0){valid7 = true;passing0 = 35;}const _errs50 = errors;if(typeof data4 === "string"){if(!pattern75.test(data4)){const err36 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 36];}else {if(_valid0){valid7 = true;passing0 = 36;}const _errs51 = errors;if(typeof data4 === "string"){if(!pattern76.test(data4)){const err37 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 37];}else {if(_valid0){valid7 = true;passing0 = 37;}const _errs52 = errors;if(typeof data4 === "string"){if(!pattern77.test(data4)){const err38 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 38];}else {if(_valid0){valid7 = true;passing0 = 38;}const _errs53 = errors;if(typeof data4 === "string"){if(!pattern78.test(data4)){const err39 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 39];}else {if(_valid0){valid7 = true;passing0 = 39;}const _errs54 = errors;if(typeof data4 === "string"){if(!pattern79.test(data4)){const err40 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 40];}else {if(_valid0){valid7 = true;passing0 = 40;}const _errs55 = errors;if(typeof data4 === "string"){if(!pattern8.test(data4)){const err41 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 41];}else {if(_valid0){valid7 = true;passing0 = 41;}const _errs56 = errors;if(typeof data4 === "string"){if(!pattern9.test(data4)){const err42 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 42];}else {if(_valid0){valid7 = true;passing0 = 42;}const _errs57 = errors;if(typeof data4 === "string"){if(!pattern10.test(data4)){const err43 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 43];}else {if(_valid0){valid7 = true;passing0 = 43;}const _errs58 = errors;if(typeof data4 === "string"){if(!pattern83.test(data4)){const err44 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 44];}else {if(_valid0){valid7 = true;passing0 = 44;}const _errs59 = errors;if(typeof data4 === "string"){if(!pattern11.test(data4)){const err45 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 45];}else {if(_valid0){valid7 = true;passing0 = 45;}const _errs60 = errors;if(typeof data4 === "string"){if(!pattern85.test(data4)){const err46 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 46];}else {if(_valid0){valid7 = true;passing0 = 46;}const _errs61 = errors;if(typeof data4 === "string"){if(!pattern12.test(data4)){const err47 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 47];}else {if(_valid0){valid7 = true;passing0 = 47;}const _errs62 = errors;if(typeof data4 === "string"){if(!pattern13.test(data4)){const err48 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 48];}else {if(_valid0){valid7 = true;passing0 = 48;}const _errs63 = errors;if(typeof data4 === "string"){if(!pattern14.test(data4)){const err49 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 49];}else {if(_valid0){valid7 = true;passing0 = 49;}const _errs64 = errors;if(typeof data4 === "string"){if(!pattern89.test(data4)){const err50 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 50];}else {if(_valid0){valid7 = true;passing0 = 50;}const _errs65 = errors;if(typeof data4 === "string"){if(!pattern90.test(data4)){const err51 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 51];}else {if(_valid0){valid7 = true;passing0 = 51;}const _errs66 = errors;if(typeof data4 === "string"){if(!pattern15.test(data4)){const err52 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 52];}else {if(_valid0){valid7 = true;passing0 = 52;}const _errs67 = errors;if(typeof data4 === "string"){if(!pattern92.test(data4)){const err53 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 53];}else {if(_valid0){valid7 = true;passing0 = 53;}const _errs68 = errors;if(typeof data4 === "string"){if(!pattern93.test(data4)){const err54 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 54];}else {if(_valid0){valid7 = true;passing0 = 54;}const _errs69 = errors;if(typeof data4 === "string"){if(!pattern94.test(data4)){const err55 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 55];}else {if(_valid0){valid7 = true;passing0 = 55;}const _errs70 = errors;if(typeof data4 === "string"){if(!pattern95.test(data4)){const err56 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 56];}else {if(_valid0){valid7 = true;passing0 = 56;}const _errs71 = errors;if(typeof data4 === "string"){if(!pattern96.test(data4)){const err57 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 57];}else {if(_valid0){valid7 = true;passing0 = 57;}const _errs72 = errors;if(typeof data4 === "string"){if(!pattern97.test(data4)){const err58 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 58];}else {if(_valid0){valid7 = true;passing0 = 58;}const _errs73 = errors;if(typeof data4 === "string"){if(!pattern98.test(data4)){const err59 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 59];}else {if(_valid0){valid7 = true;passing0 = 59;}const _errs74 = errors;if(typeof data4 === "string"){if(!pattern32.test(data4)){const err60 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/60/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 60];}else {if(_valid0){valid7 = true;passing0 = 60;}const _errs75 = errors;if(typeof data4 === "string"){if(!pattern33.test(data4)){const err61 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/61/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 61];}else {if(_valid0){valid7 = true;passing0 = 61;}const _errs76 = errors;if(typeof data4 === "string"){if(!pattern34.test(data4)){const err62 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf/62/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 62];}else {if(_valid0){valid7 = true;passing0 = 62;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid7){const err63 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}else {errors = _errs13;if(vErrors !== null){if(_errs13){vErrors.length = _errs13;}else {vErrors = null;}}}if(typeof data4 === "string"){if(!pattern19.test(data4)){const err64 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}else {const err65 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/SkillsUpgradeMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}}else {const err66 = {instancePath:instancePath+"/levelList/" + i0+"/modList",schemaPath:"#/properties/levelList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}}else {const err67 = {instancePath:instancePath+"/levelList/" + i0,schemaPath:"#/properties/levelList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}}else {const err68 = {instancePath:instancePath+"/levelList",schemaPath:"#/properties/levelList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}if(data.attackSkills !== undefined){let data5 = data.attackSkills;if(data5 && typeof data5 == "object" && !Array.isArray(data5)){if(data5.attackSkillList === undefined){const err69 = {instancePath:instancePath+"/attackSkills",schemaPath:"#/properties/attackSkills/required",keyword:"required",params:{missingProperty: "attackSkillList"},message:"must have required property '"+"attackSkillList"+"'"};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}for(const key2 in data5){if(!(key2 === "attackSkillList")){delete data5[key2];}}if(data5.attackSkillList !== undefined){let data6 = data5.attackSkillList;if(Array.isArray(data6)){const len2 = data6.length;for(let i2=0; i2<len2; i2++){if(!(validate29(data6[i2], {instancePath:instancePath+"/attackSkills/attackSkillList/" + i2,parentData:data6,parentDataProperty:i2,rootData}))){vErrors = vErrors === null ? validate29.errors : vErrors.concat(validate29.errors);errors = vErrors.length;}}}else {const err70 = {instancePath:instancePath+"/attackSkills/attackSkillList",schemaPath:"#/properties/attackSkills/properties/attackSkillList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}}else {const err71 = {instancePath:instancePath+"/attackSkills",schemaPath:"#/properties/attackSkills/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}if(data.auraSkills !== undefined){let data8 = data.auraSkills;if(data8 && typeof data8 == "object" && !Array.isArray(data8)){if(data8.auraSkillList === undefined){const err72 = {instancePath:instancePath+"/auraSkills",schemaPath:"#/properties/auraSkills/required",keyword:"required",params:{missingProperty: "auraSkillList"},message:"must have required property '"+"auraSkillList"+"'"};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}for(const key3 in data8){if(!((key3 === "requirements") || (key3 === "auraSkillList"))){delete data8[key3];}}if(data8.requirements !== undefined){let data9 = data8.requirements;if(data9 && typeof data9 == "object" && !Array.isArray(data9)){if(data9.characterLevel === undefined){const err73 = {instancePath:instancePath+"/auraSkills/requirements",schemaPath:"#/properties/auraSkills/properties/requirements/required",keyword:"required",params:{missingProperty: "characterLevel"},message:"must have required property '"+"characterLevel"+"'"};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}for(const key4 in data9){if(!(key4 === "characterLevel")){delete data9[key4];}}if(data9.characterLevel !== undefined){let data10 = data9.characterLevel;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){const err74 = {instancePath:instancePath+"/auraSkills/requirements/characterLevel",schemaPath:"#/properties/auraSkills/properties/requirements/properties/characterLevel/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}if((typeof data10 == "number") && (isFinite(data10))){if(data10 < 1 || isNaN(data10)){const err75 = {instancePath:instancePath+"/auraSkills/requirements/characterLevel",schemaPath:"#/properties/auraSkills/properties/requirements/properties/characterLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}}}else {const err76 = {instancePath:instancePath+"/auraSkills/requirements",schemaPath:"#/properties/auraSkills/properties/requirements/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}if(data8.auraSkillList !== undefined){let data11 = data8.auraSkillList;if(Array.isArray(data11)){const len3 = data11.length;for(let i3=0; i3<len3; i3++){if(!(validate31(data11[i3], {instancePath:instancePath+"/auraSkills/auraSkillList/" + i3,parentData:data11,parentDataProperty:i3,rootData}))){vErrors = vErrors === null ? validate31.errors : vErrors.concat(validate31.errors);errors = vErrors.length;}}}else {const err77 = {instancePath:instancePath+"/auraSkills/auraSkillList",schemaPath:"#/properties/auraSkills/properties/auraSkillList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}}else {const err78 = {instancePath:instancePath+"/auraSkills",schemaPath:"#/properties/auraSkills/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}}if(data.passiveSkills !== undefined){let data13 = data.passiveSkills;if(data13 && typeof data13 == "object" && !Array.isArray(data13)){if(data13.insightCapacityEnhancerList === undefined){const err79 = {instancePath:instancePath+"/passiveSkills",schemaPath:"#/properties/passiveSkills/required",keyword:"required",params:{missingProperty: "insightCapacityEnhancerList"},message:"must have required property '"+"insightCapacityEnhancerList"+"'"};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}if(data13.passiveSkillList === undefined){const err80 = {instancePath:instancePath+"/passiveSkills",schemaPath:"#/properties/passiveSkills/required",keyword:"required",params:{missingProperty: "passiveSkillList"},message:"must have required property '"+"passiveSkillList"+"'"};if(vErrors === null){vErrors = [err80];}else {vErrors.push(err80);}errors++;}for(const key5 in data13){if(!((key5 === "insightCapacityEnhancerList") || (key5 === "passiveSkillList"))){delete data13[key5];}}if(data13.insightCapacityEnhancerList !== undefined){let data14 = data13.insightCapacityEnhancerList;if(Array.isArray(data14)){const len4 = data14.length;for(let i4=0; i4<len4; i4++){let data15 = data14[i4];if(data15 && typeof data15 == "object" && !Array.isArray(data15)){if(data15.id === undefined){const err81 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4,schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err81];}else {vErrors.push(err81);}errors++;}if(data15.insight === undefined){const err82 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4,schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/required",keyword:"required",params:{missingProperty: "insight"},message:"must have required property '"+"insight"+"'"};if(vErrors === null){vErrors = [err82];}else {vErrors.push(err82);}errors++;}if(data15.name === undefined){const err83 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4,schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err83];}else {vErrors.push(err83);}errors++;}if(data15.probability === undefined){const err84 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4,schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/required",keyword:"required",params:{missingProperty: "probability"},message:"must have required property '"+"probability"+"'"};if(vErrors === null){vErrors = [err84];}else {vErrors.push(err84);}errors++;}for(const key6 in data15){if(!((((key6 === "id") || (key6 === "name")) || (key6 === "probability")) || (key6 === "insight"))){delete data15[key6];}}if(data15.id !== undefined){let data16 = data15.id;if(typeof data16 === "string"){if(!pattern20.test(data16)){const err85 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err85];}else {vErrors.push(err85);}errors++;}}else {const err86 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err86];}else {vErrors.push(err86);}errors++;}}if(data15.name !== undefined){let data17 = data15.name;if(typeof data17 === "string"){if(!pattern22.test(data17)){const err87 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4+"/name",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""};if(vErrors === null){vErrors = [err87];}else {vErrors.push(err87);}errors++;}}else {const err88 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4+"/name",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err88];}else {vErrors.push(err88);}errors++;}}if(data15.probability !== undefined){let data18 = data15.probability;if(!(((typeof data18 == "number") && (!(data18 % 1) && !isNaN(data18))) && (isFinite(data18)))){const err89 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4+"/probability",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/probability/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err89];}else {vErrors.push(err89);}errors++;}if((typeof data18 == "number") && (isFinite(data18))){if(data18 < 1 || isNaN(data18)){const err90 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4+"/probability",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/probability/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err90];}else {vErrors.push(err90);}errors++;}}}if(data15.insight !== undefined){let data19 = data15.insight;if(!(((typeof data19 == "number") && (!(data19 % 1) && !isNaN(data19))) && (isFinite(data19)))){const err91 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4+"/insight",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/insight/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err91];}else {vErrors.push(err91);}errors++;}if((typeof data19 == "number") && (isFinite(data19))){if(data19 < 0 || isNaN(data19)){const err92 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4+"/insight",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/insight/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err92];}else {vErrors.push(err92);}errors++;}}}}else {const err93 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i4,schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err93];}else {vErrors.push(err93);}errors++;}}}else {const err94 = {instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err94];}else {vErrors.push(err94);}errors++;}}if(data13.passiveSkillList !== undefined){let data20 = data13.passiveSkillList;if(Array.isArray(data20)){const len5 = data20.length;for(let i5=0; i5<len5; i5++){if(!(validate33(data20[i5], {instancePath:instancePath+"/passiveSkills/passiveSkillList/" + i5,parentData:data20,parentDataProperty:i5,rootData}))){vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);errors = vErrors.length;}}}else {const err95 = {instancePath:instancePath+"/passiveSkills/passiveSkillList",schemaPath:"#/properties/passiveSkills/properties/passiveSkillList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err95];}else {vErrors.push(err95);}errors++;}}}else {const err96 = {instancePath:instancePath+"/passiveSkills",schemaPath:"#/properties/passiveSkills/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err96];}else {vErrors.push(err96);}errors++;}}}else {const err97 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err97];}else {vErrors.push(err97);}errors++;}validate27.errors = vErrors;return errors === 0;}const schema50 = {"type":"object","properties":{"levelList":{"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/BlacksmithUpgradeMod"},"type":"array"}},"additionalProperties":false}},"itemList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"$ref":"#/definitions/BlacksmithItemName"},"reforgeWeights":{"type":"array","items":{"type":"number"}}},"additionalProperties":false,"required":["id","name","reforgeWeights"]}},"modLists":{"type":"array","items":{"type":"array","items":{"$ref":"#/definitions/BlacksmithMod"}}},"crafting":{"type":"object","properties":{"advancedReforge":{"type":"object","properties":{"requirements":{"type":"object","properties":{"blacksmithLevel":{"type":"integer","minimum":1,"default":1}},"additionalProperties":false,"required":["blacksmithLevel"]}},"additionalProperties":false,"required":["requirements"]},"craftList":{"type":"array","items":{"$ref":"#/definitions/BlacksmithCraft"}}},"additionalProperties":false,"required":["craftList"]}},"additionalProperties":false,"required":["crafting","itemList","modLists"]};const schema51 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]};const schema53 = {"enum":["Armour","Weapon"],"type":"string"};const schema54 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"level":{"type":"integer","minimum":1,"default":1},"weight":{"type":"integer","minimum":0,"default":100},"mod":{"$ref":"#/definitions/PlayerMod"},"itemFilter":{"type":"array","items":{"enum":["Armour","Weapon"],"type":"string"}}},"additionalProperties":false,"required":["id","level","mod","weight"]};function validate38(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.id === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.level === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "level"},message:"must have required property '"+"level"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.mod === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "mod"},message:"must have required property '"+"mod"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.weight === undefined){const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "weight"},message:"must have required property '"+"weight"+"'"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}for(const key0 in data){if(!(((((key0 === "id") || (key0 === "level")) || (key0 === "weight")) || (key0 === "mod")) || (key0 === "itemFilter"))){delete data[key0];}}if(data.id !== undefined){let data0 = data.id;if(typeof data0 === "string"){if(!pattern20.test(data0)){const err4 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}else {const err5 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.level !== undefined){let data1 = data.level;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){const err6 = {instancePath:instancePath+"/level",schemaPath:"#/properties/level/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}if((typeof data1 == "number") && (isFinite(data1))){if(data1 < 1 || isNaN(data1)){const err7 = {instancePath:instancePath+"/level",schemaPath:"#/properties/level/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}}if(data.weight !== undefined){let data2 = data.weight;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){const err8 = {instancePath:instancePath+"/weight",schemaPath:"#/properties/weight/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}if((typeof data2 == "number") && (isFinite(data2))){if(data2 < 0 || isNaN(data2)){const err9 = {instancePath:instancePath+"/weight",schemaPath:"#/properties/weight/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}}if(data.mod !== undefined){let data3 = data.mod;const _errs12 = errors;let valid3 = false;let passing0 = null;const _errs13 = errors;if(typeof data3 === "string"){if(!pattern39.test(data3)){const err10 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0){valid3 = true;passing0 = 0;}const _errs14 = errors;if(typeof data3 === "string"){if(!pattern40.test(data3)){const err11 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 1];}else {if(_valid0){valid3 = true;passing0 = 1;}const _errs15 = errors;if(typeof data3 === "string"){if(!pattern41.test(data3)){const err12 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 2];}else {if(_valid0){valid3 = true;passing0 = 2;}const _errs16 = errors;if(typeof data3 === "string"){if(!pattern42.test(data3)){const err13 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 3];}else {if(_valid0){valid3 = true;passing0 = 3;}const _errs17 = errors;if(typeof data3 === "string"){if(!pattern43.test(data3)){const err14 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs17 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 4];}else {if(_valid0){valid3 = true;passing0 = 4;}const _errs18 = errors;if(typeof data3 === "string"){if(!pattern44.test(data3)){const err15 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 5];}else {if(_valid0){valid3 = true;passing0 = 5;}const _errs19 = errors;if(typeof data3 === "string"){if(!pattern45.test(data3)){const err16 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 6];}else {if(_valid0){valid3 = true;passing0 = 6;}const _errs20 = errors;if(typeof data3 === "string"){if(!pattern46.test(data3)){const err17 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 7];}else {if(_valid0){valid3 = true;passing0 = 7;}const _errs21 = errors;if(typeof data3 === "string"){if(!pattern47.test(data3)){const err18 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 8];}else {if(_valid0){valid3 = true;passing0 = 8;}const _errs22 = errors;if(typeof data3 === "string"){if(!pattern48.test(data3)){const err19 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 9];}else {if(_valid0){valid3 = true;passing0 = 9;}const _errs23 = errors;if(typeof data3 === "string"){if(!pattern49.test(data3)){const err20 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 10];}else {if(_valid0){valid3 = true;passing0 = 10;}const _errs24 = errors;if(typeof data3 === "string"){if(!pattern50.test(data3)){const err21 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 11];}else {if(_valid0){valid3 = true;passing0 = 11;}const _errs25 = errors;if(typeof data3 === "string"){if(!pattern4.test(data3)){const err22 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 12];}else {if(_valid0){valid3 = true;passing0 = 12;}const _errs26 = errors;if(typeof data3 === "string"){if(!pattern5.test(data3)){const err23 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 13];}else {if(_valid0){valid3 = true;passing0 = 13;}const _errs27 = errors;if(typeof data3 === "string"){if(!pattern53.test(data3)){const err24 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 14];}else {if(_valid0){valid3 = true;passing0 = 14;}const _errs28 = errors;if(typeof data3 === "string"){if(!pattern54.test(data3)){const err25 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 15];}else {if(_valid0){valid3 = true;passing0 = 15;}const _errs29 = errors;if(typeof data3 === "string"){if(!pattern55.test(data3)){const err26 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 16];}else {if(_valid0){valid3 = true;passing0 = 16;}const _errs30 = errors;if(typeof data3 === "string"){if(!pattern16.test(data3)){const err27 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 17];}else {if(_valid0){valid3 = true;passing0 = 17;}const _errs31 = errors;if(typeof data3 === "string"){if(!pattern17.test(data3)){const err28 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 18];}else {if(_valid0){valid3 = true;passing0 = 18;}const _errs32 = errors;if(typeof data3 === "string"){if(!pattern58.test(data3)){const err29 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 19];}else {if(_valid0){valid3 = true;passing0 = 19;}const _errs33 = errors;if(typeof data3 === "string"){if(!pattern18.test(data3)){const err30 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 20];}else {if(_valid0){valid3 = true;passing0 = 20;}const _errs34 = errors;if(typeof data3 === "string"){if(!pattern60.test(data3)){const err31 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 21];}else {if(_valid0){valid3 = true;passing0 = 21;}const _errs35 = errors;if(typeof data3 === "string"){if(!pattern61.test(data3)){const err32 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 22];}else {if(_valid0){valid3 = true;passing0 = 22;}const _errs36 = errors;if(typeof data3 === "string"){if(!pattern62.test(data3)){const err33 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 23];}else {if(_valid0){valid3 = true;passing0 = 23;}const _errs37 = errors;if(typeof data3 === "string"){if(!pattern63.test(data3)){const err34 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 24];}else {if(_valid0){valid3 = true;passing0 = 24;}const _errs38 = errors;if(typeof data3 === "string"){if(!pattern64.test(data3)){const err35 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 25];}else {if(_valid0){valid3 = true;passing0 = 25;}const _errs39 = errors;if(typeof data3 === "string"){if(!pattern6.test(data3)){const err36 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 26];}else {if(_valid0){valid3 = true;passing0 = 26;}const _errs40 = errors;if(typeof data3 === "string"){if(!pattern66.test(data3)){const err37 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 27];}else {if(_valid0){valid3 = true;passing0 = 27;}const _errs41 = errors;if(typeof data3 === "string"){if(!pattern67.test(data3)){const err38 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 28];}else {if(_valid0){valid3 = true;passing0 = 28;}const _errs42 = errors;if(typeof data3 === "string"){if(!pattern68.test(data3)){const err39 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 29];}else {if(_valid0){valid3 = true;passing0 = 29;}const _errs43 = errors;if(typeof data3 === "string"){if(!pattern69.test(data3)){const err40 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 30];}else {if(_valid0){valid3 = true;passing0 = 30;}const _errs44 = errors;if(typeof data3 === "string"){if(!pattern70.test(data3)){const err41 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 31];}else {if(_valid0){valid3 = true;passing0 = 31;}const _errs45 = errors;if(typeof data3 === "string"){if(!pattern7.test(data3)){const err42 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 32];}else {if(_valid0){valid3 = true;passing0 = 32;}const _errs46 = errors;if(typeof data3 === "string"){if(!pattern72.test(data3)){const err43 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 33];}else {if(_valid0){valid3 = true;passing0 = 33;}const _errs47 = errors;if(typeof data3 === "string"){if(!pattern73.test(data3)){const err44 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 34];}else {if(_valid0){valid3 = true;passing0 = 34;}const _errs48 = errors;if(typeof data3 === "string"){if(!pattern74.test(data3)){const err45 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 35];}else {if(_valid0){valid3 = true;passing0 = 35;}const _errs49 = errors;if(typeof data3 === "string"){if(!pattern75.test(data3)){const err46 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 36];}else {if(_valid0){valid3 = true;passing0 = 36;}const _errs50 = errors;if(typeof data3 === "string"){if(!pattern76.test(data3)){const err47 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 37];}else {if(_valid0){valid3 = true;passing0 = 37;}const _errs51 = errors;if(typeof data3 === "string"){if(!pattern77.test(data3)){const err48 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 38];}else {if(_valid0){valid3 = true;passing0 = 38;}const _errs52 = errors;if(typeof data3 === "string"){if(!pattern78.test(data3)){const err49 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 39];}else {if(_valid0){valid3 = true;passing0 = 39;}const _errs53 = errors;if(typeof data3 === "string"){if(!pattern79.test(data3)){const err50 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 40];}else {if(_valid0){valid3 = true;passing0 = 40;}const _errs54 = errors;if(typeof data3 === "string"){if(!pattern8.test(data3)){const err51 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 41];}else {if(_valid0){valid3 = true;passing0 = 41;}const _errs55 = errors;if(typeof data3 === "string"){if(!pattern9.test(data3)){const err52 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 42];}else {if(_valid0){valid3 = true;passing0 = 42;}const _errs56 = errors;if(typeof data3 === "string"){if(!pattern10.test(data3)){const err53 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 43];}else {if(_valid0){valid3 = true;passing0 = 43;}const _errs57 = errors;if(typeof data3 === "string"){if(!pattern83.test(data3)){const err54 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 44];}else {if(_valid0){valid3 = true;passing0 = 44;}const _errs58 = errors;if(typeof data3 === "string"){if(!pattern11.test(data3)){const err55 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 45];}else {if(_valid0){valid3 = true;passing0 = 45;}const _errs59 = errors;if(typeof data3 === "string"){if(!pattern85.test(data3)){const err56 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 46];}else {if(_valid0){valid3 = true;passing0 = 46;}const _errs60 = errors;if(typeof data3 === "string"){if(!pattern12.test(data3)){const err57 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 47];}else {if(_valid0){valid3 = true;passing0 = 47;}const _errs61 = errors;if(typeof data3 === "string"){if(!pattern13.test(data3)){const err58 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 48];}else {if(_valid0){valid3 = true;passing0 = 48;}const _errs62 = errors;if(typeof data3 === "string"){if(!pattern14.test(data3)){const err59 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 49];}else {if(_valid0){valid3 = true;passing0 = 49;}const _errs63 = errors;if(typeof data3 === "string"){if(!pattern89.test(data3)){const err60 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 50];}else {if(_valid0){valid3 = true;passing0 = 50;}const _errs64 = errors;if(typeof data3 === "string"){if(!pattern90.test(data3)){const err61 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 51];}else {if(_valid0){valid3 = true;passing0 = 51;}const _errs65 = errors;if(typeof data3 === "string"){if(!pattern15.test(data3)){const err62 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 52];}else {if(_valid0){valid3 = true;passing0 = 52;}const _errs66 = errors;if(typeof data3 === "string"){if(!pattern92.test(data3)){const err63 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 53];}else {if(_valid0){valid3 = true;passing0 = 53;}const _errs67 = errors;if(typeof data3 === "string"){if(!pattern93.test(data3)){const err64 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 54];}else {if(_valid0){valid3 = true;passing0 = 54;}const _errs68 = errors;if(typeof data3 === "string"){if(!pattern94.test(data3)){const err65 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 55];}else {if(_valid0){valid3 = true;passing0 = 55;}const _errs69 = errors;if(typeof data3 === "string"){if(!pattern95.test(data3)){const err66 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 56];}else {if(_valid0){valid3 = true;passing0 = 56;}const _errs70 = errors;if(typeof data3 === "string"){if(!pattern96.test(data3)){const err67 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 57];}else {if(_valid0){valid3 = true;passing0 = 57;}const _errs71 = errors;if(typeof data3 === "string"){if(!pattern97.test(data3)){const err68 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 58];}else {if(_valid0){valid3 = true;passing0 = 58;}const _errs72 = errors;if(typeof data3 === "string"){if(!pattern98.test(data3)){const err69 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 59];}else {if(_valid0){valid3 = true;passing0 = 59;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid3){const err70 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}else {errors = _errs12;if(vErrors !== null){if(_errs12){vErrors.length = _errs12;}else {vErrors = null;}}}if(typeof data3 === "string"){if(!pattern19.test(data3)){const err71 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}else {const err72 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}}if(data.itemFilter !== undefined){let data4 = data.itemFilter;if(Array.isArray(data4)){const len0 = data4.length;for(let i0=0; i0<len0; i0++){let data5 = data4[i0];if(typeof data5 !== "string"){const err73 = {instancePath:instancePath+"/itemFilter/" + i0,schemaPath:"#/properties/itemFilter/items/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}if(!((data5 === "Armour") || (data5 === "Weapon"))){const err74 = {instancePath:instancePath+"/itemFilter/" + i0,schemaPath:"#/properties/itemFilter/items/enum",keyword:"enum",params:{allowedValues: schema54.properties.itemFilter.items.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}}else {const err75 = {instancePath:instancePath+"/itemFilter",schemaPath:"#/properties/itemFilter/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}}else {const err76 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}validate38.errors = vErrors;return errors === 0;}const schema57 = {"type":"object","properties":{"desc":{"$ref":"#/definitions/BlacksmithCraftDescription"},"cost":{"$ref":"#/definitions/Cost"},"successRates":{"type":"object","properties":{"min":{"type":"integer","minimum":0},"max":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["max","min"]}},"additionalProperties":false,"required":["desc","successRates"]};const schema58 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"Reforge item with new random modifiers"},{"pattern":"Add new modifier"},{"pattern":"Remove modifier"},{"pattern":"Upgrade modifier"},{"pattern":"Randomize numerical values of a modifier"},{"pattern":"Randomize all numerical values"}]};const pattern545 = new RegExp("Reforge item with new random modifiers", "u");const pattern546 = new RegExp("Add new modifier", "u");const pattern547 = new RegExp("Remove modifier", "u");const pattern548 = new RegExp("Upgrade modifier", "u");const pattern549 = new RegExp("Randomize numerical values of a modifier", "u");const pattern550 = new RegExp("Randomize all numerical values", "u");function validate40(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.desc === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "desc"},message:"must have required property '"+"desc"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.successRates === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "successRates"},message:"must have required property '"+"successRates"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}for(const key0 in data){if(!(((key0 === "desc") || (key0 === "cost")) || (key0 === "successRates"))){delete data[key0];}}if(data.desc !== undefined){let data0 = data.desc;const _errs5 = errors;let valid2 = false;let passing0 = null;const _errs6 = errors;if(typeof data0 === "string"){if(!pattern545.test(data0)){const err2 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/oneOf/0/pattern",keyword:"pattern",params:{pattern: "Reforge item with new random modifiers"},message:"must match pattern \""+"Reforge item with new random modifiers"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs6 === errors;if(_valid0){valid2 = true;passing0 = 0;}const _errs7 = errors;if(typeof data0 === "string"){if(!pattern546.test(data0)){const err3 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/oneOf/1/pattern",keyword:"pattern",params:{pattern: "Add new modifier"},message:"must match pattern \""+"Add new modifier"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs7 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 1];}else {if(_valid0){valid2 = true;passing0 = 1;}const _errs8 = errors;if(typeof data0 === "string"){if(!pattern547.test(data0)){const err4 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/oneOf/2/pattern",keyword:"pattern",params:{pattern: "Remove modifier"},message:"must match pattern \""+"Remove modifier"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs8 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 2];}else {if(_valid0){valid2 = true;passing0 = 2;}const _errs9 = errors;if(typeof data0 === "string"){if(!pattern548.test(data0)){const err5 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/oneOf/3/pattern",keyword:"pattern",params:{pattern: "Upgrade modifier"},message:"must match pattern \""+"Upgrade modifier"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs9 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 3];}else {if(_valid0){valid2 = true;passing0 = 3;}const _errs10 = errors;if(typeof data0 === "string"){if(!pattern549.test(data0)){const err6 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/oneOf/4/pattern",keyword:"pattern",params:{pattern: "Randomize numerical values of a modifier"},message:"must match pattern \""+"Randomize numerical values of a modifier"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs10 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 4];}else {if(_valid0){valid2 = true;passing0 = 4;}const _errs11 = errors;if(typeof data0 === "string"){if(!pattern550.test(data0)){const err7 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/oneOf/5/pattern",keyword:"pattern",params:{pattern: "Randomize all numerical values"},message:"must match pattern \""+"Randomize all numerical values"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 5];}else {if(_valid0){valid2 = true;passing0 = 5;}}}}}}if(!valid2){const err8 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}else {errors = _errs5;if(vErrors !== null){if(_errs5){vErrors.length = _errs5;}else {vErrors = null;}}}if(typeof data0 === "string"){if(!pattern19.test(data0)){const err9 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}else {const err10 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/BlacksmithCraftDescription/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}if(data.cost !== undefined){if(!(validate18(data.cost, {instancePath:instancePath+"/cost",parentData:data,parentDataProperty:"cost",rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}}if(data.successRates !== undefined){let data2 = data.successRates;if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.max === undefined){const err11 = {instancePath:instancePath+"/successRates",schemaPath:"#/properties/successRates/required",keyword:"required",params:{missingProperty: "max"},message:"must have required property '"+"max"+"'"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}if(data2.min === undefined){const err12 = {instancePath:instancePath+"/successRates",schemaPath:"#/properties/successRates/required",keyword:"required",params:{missingProperty: "min"},message:"must have required property '"+"min"+"'"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}for(const key1 in data2){if(!((key1 === "min") || (key1 === "max"))){delete data2[key1];}}if(data2.min !== undefined){let data3 = data2.min;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){const err13 = {instancePath:instancePath+"/successRates/min",schemaPath:"#/properties/successRates/properties/min/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 0 || isNaN(data3)){const err14 = {instancePath:instancePath+"/successRates/min",schemaPath:"#/properties/successRates/properties/min/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}}if(data2.max !== undefined){let data4 = data2.max;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){const err15 = {instancePath:instancePath+"/successRates/max",schemaPath:"#/properties/successRates/properties/max/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}if((typeof data4 == "number") && (isFinite(data4))){if(data4 < 0 || isNaN(data4)){const err16 = {instancePath:instancePath+"/successRates/max",schemaPath:"#/properties/successRates/properties/max/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}}}else {const err17 = {instancePath:instancePath+"/successRates",schemaPath:"#/properties/successRates/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}}else {const err18 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}validate40.errors = vErrors;return errors === 0;}function validate36(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.crafting === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "crafting"},message:"must have required property '"+"crafting"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.itemList === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "itemList"},message:"must have required property '"+"itemList"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.modLists === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "modLists"},message:"must have required property '"+"modLists"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key0 in data){if(!((((key0 === "levelList") || (key0 === "itemList")) || (key0 === "modLists")) || (key0 === "crafting"))){delete data[key0];}}if(data.levelList !== undefined){let data0 = data.levelList;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];if(data1 && typeof data1 == "object" && !Array.isArray(data1)){for(const key1 in data1){if(!((key1 === "upgradeCost") || (key1 === "modList"))){delete data1[key1];}}if(data1.upgradeCost !== undefined){if(!(validate18(data1.upgradeCost, {instancePath:instancePath+"/levelList/" + i0+"/upgradeCost",parentData:data1,parentDataProperty:"upgradeCost",rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}}if(data1.modList !== undefined){let data3 = data1.modList;if(Array.isArray(data3)){const len1 = data3.length;for(let i1=0; i1<len1; i1++){let data4 = data3[i1];const _errs13 = errors;let valid7 = false;let passing0 = null;const _errs14 = errors;if(typeof data4 === "string"){if(!pattern39.test(data4)){const err3 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0){valid7 = true;passing0 = 0;}const _errs15 = errors;if(typeof data4 === "string"){if(!pattern40.test(data4)){const err4 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 1];}else {if(_valid0){valid7 = true;passing0 = 1;}const _errs16 = errors;if(typeof data4 === "string"){if(!pattern41.test(data4)){const err5 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 2];}else {if(_valid0){valid7 = true;passing0 = 2;}const _errs17 = errors;if(typeof data4 === "string"){if(!pattern42.test(data4)){const err6 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs17 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 3];}else {if(_valid0){valid7 = true;passing0 = 3;}const _errs18 = errors;if(typeof data4 === "string"){if(!pattern43.test(data4)){const err7 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 4];}else {if(_valid0){valid7 = true;passing0 = 4;}const _errs19 = errors;if(typeof data4 === "string"){if(!pattern44.test(data4)){const err8 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 5];}else {if(_valid0){valid7 = true;passing0 = 5;}const _errs20 = errors;if(typeof data4 === "string"){if(!pattern45.test(data4)){const err9 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 6];}else {if(_valid0){valid7 = true;passing0 = 6;}const _errs21 = errors;if(typeof data4 === "string"){if(!pattern46.test(data4)){const err10 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 7];}else {if(_valid0){valid7 = true;passing0 = 7;}const _errs22 = errors;if(typeof data4 === "string"){if(!pattern47.test(data4)){const err11 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 8];}else {if(_valid0){valid7 = true;passing0 = 8;}const _errs23 = errors;if(typeof data4 === "string"){if(!pattern48.test(data4)){const err12 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 9];}else {if(_valid0){valid7 = true;passing0 = 9;}const _errs24 = errors;if(typeof data4 === "string"){if(!pattern49.test(data4)){const err13 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 10];}else {if(_valid0){valid7 = true;passing0 = 10;}const _errs25 = errors;if(typeof data4 === "string"){if(!pattern50.test(data4)){const err14 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 11];}else {if(_valid0){valid7 = true;passing0 = 11;}const _errs26 = errors;if(typeof data4 === "string"){if(!pattern4.test(data4)){const err15 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 12];}else {if(_valid0){valid7 = true;passing0 = 12;}const _errs27 = errors;if(typeof data4 === "string"){if(!pattern5.test(data4)){const err16 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 13];}else {if(_valid0){valid7 = true;passing0 = 13;}const _errs28 = errors;if(typeof data4 === "string"){if(!pattern53.test(data4)){const err17 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 14];}else {if(_valid0){valid7 = true;passing0 = 14;}const _errs29 = errors;if(typeof data4 === "string"){if(!pattern54.test(data4)){const err18 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 15];}else {if(_valid0){valid7 = true;passing0 = 15;}const _errs30 = errors;if(typeof data4 === "string"){if(!pattern55.test(data4)){const err19 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 16];}else {if(_valid0){valid7 = true;passing0 = 16;}const _errs31 = errors;if(typeof data4 === "string"){if(!pattern16.test(data4)){const err20 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 17];}else {if(_valid0){valid7 = true;passing0 = 17;}const _errs32 = errors;if(typeof data4 === "string"){if(!pattern17.test(data4)){const err21 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 18];}else {if(_valid0){valid7 = true;passing0 = 18;}const _errs33 = errors;if(typeof data4 === "string"){if(!pattern58.test(data4)){const err22 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 19];}else {if(_valid0){valid7 = true;passing0 = 19;}const _errs34 = errors;if(typeof data4 === "string"){if(!pattern18.test(data4)){const err23 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 20];}else {if(_valid0){valid7 = true;passing0 = 20;}const _errs35 = errors;if(typeof data4 === "string"){if(!pattern60.test(data4)){const err24 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 21];}else {if(_valid0){valid7 = true;passing0 = 21;}const _errs36 = errors;if(typeof data4 === "string"){if(!pattern61.test(data4)){const err25 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 22];}else {if(_valid0){valid7 = true;passing0 = 22;}const _errs37 = errors;if(typeof data4 === "string"){if(!pattern62.test(data4)){const err26 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 23];}else {if(_valid0){valid7 = true;passing0 = 23;}const _errs38 = errors;if(typeof data4 === "string"){if(!pattern63.test(data4)){const err27 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 24];}else {if(_valid0){valid7 = true;passing0 = 24;}const _errs39 = errors;if(typeof data4 === "string"){if(!pattern64.test(data4)){const err28 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 25];}else {if(_valid0){valid7 = true;passing0 = 25;}const _errs40 = errors;if(typeof data4 === "string"){if(!pattern6.test(data4)){const err29 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 26];}else {if(_valid0){valid7 = true;passing0 = 26;}const _errs41 = errors;if(typeof data4 === "string"){if(!pattern66.test(data4)){const err30 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 27];}else {if(_valid0){valid7 = true;passing0 = 27;}const _errs42 = errors;if(typeof data4 === "string"){if(!pattern67.test(data4)){const err31 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 28];}else {if(_valid0){valid7 = true;passing0 = 28;}const _errs43 = errors;if(typeof data4 === "string"){if(!pattern68.test(data4)){const err32 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 29];}else {if(_valid0){valid7 = true;passing0 = 29;}const _errs44 = errors;if(typeof data4 === "string"){if(!pattern69.test(data4)){const err33 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 30];}else {if(_valid0){valid7 = true;passing0 = 30;}const _errs45 = errors;if(typeof data4 === "string"){if(!pattern70.test(data4)){const err34 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 31];}else {if(_valid0){valid7 = true;passing0 = 31;}const _errs46 = errors;if(typeof data4 === "string"){if(!pattern7.test(data4)){const err35 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 32];}else {if(_valid0){valid7 = true;passing0 = 32;}const _errs47 = errors;if(typeof data4 === "string"){if(!pattern72.test(data4)){const err36 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 33];}else {if(_valid0){valid7 = true;passing0 = 33;}const _errs48 = errors;if(typeof data4 === "string"){if(!pattern73.test(data4)){const err37 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 34];}else {if(_valid0){valid7 = true;passing0 = 34;}const _errs49 = errors;if(typeof data4 === "string"){if(!pattern74.test(data4)){const err38 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 35];}else {if(_valid0){valid7 = true;passing0 = 35;}const _errs50 = errors;if(typeof data4 === "string"){if(!pattern75.test(data4)){const err39 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 36];}else {if(_valid0){valid7 = true;passing0 = 36;}const _errs51 = errors;if(typeof data4 === "string"){if(!pattern76.test(data4)){const err40 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 37];}else {if(_valid0){valid7 = true;passing0 = 37;}const _errs52 = errors;if(typeof data4 === "string"){if(!pattern77.test(data4)){const err41 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 38];}else {if(_valid0){valid7 = true;passing0 = 38;}const _errs53 = errors;if(typeof data4 === "string"){if(!pattern78.test(data4)){const err42 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 39];}else {if(_valid0){valid7 = true;passing0 = 39;}const _errs54 = errors;if(typeof data4 === "string"){if(!pattern79.test(data4)){const err43 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 40];}else {if(_valid0){valid7 = true;passing0 = 40;}const _errs55 = errors;if(typeof data4 === "string"){if(!pattern8.test(data4)){const err44 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 41];}else {if(_valid0){valid7 = true;passing0 = 41;}const _errs56 = errors;if(typeof data4 === "string"){if(!pattern9.test(data4)){const err45 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 42];}else {if(_valid0){valid7 = true;passing0 = 42;}const _errs57 = errors;if(typeof data4 === "string"){if(!pattern10.test(data4)){const err46 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 43];}else {if(_valid0){valid7 = true;passing0 = 43;}const _errs58 = errors;if(typeof data4 === "string"){if(!pattern83.test(data4)){const err47 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 44];}else {if(_valid0){valid7 = true;passing0 = 44;}const _errs59 = errors;if(typeof data4 === "string"){if(!pattern11.test(data4)){const err48 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 45];}else {if(_valid0){valid7 = true;passing0 = 45;}const _errs60 = errors;if(typeof data4 === "string"){if(!pattern85.test(data4)){const err49 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 46];}else {if(_valid0){valid7 = true;passing0 = 46;}const _errs61 = errors;if(typeof data4 === "string"){if(!pattern12.test(data4)){const err50 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 47];}else {if(_valid0){valid7 = true;passing0 = 47;}const _errs62 = errors;if(typeof data4 === "string"){if(!pattern13.test(data4)){const err51 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 48];}else {if(_valid0){valid7 = true;passing0 = 48;}const _errs63 = errors;if(typeof data4 === "string"){if(!pattern14.test(data4)){const err52 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 49];}else {if(_valid0){valid7 = true;passing0 = 49;}const _errs64 = errors;if(typeof data4 === "string"){if(!pattern89.test(data4)){const err53 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 50];}else {if(_valid0){valid7 = true;passing0 = 50;}const _errs65 = errors;if(typeof data4 === "string"){if(!pattern90.test(data4)){const err54 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 51];}else {if(_valid0){valid7 = true;passing0 = 51;}const _errs66 = errors;if(typeof data4 === "string"){if(!pattern15.test(data4)){const err55 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 52];}else {if(_valid0){valid7 = true;passing0 = 52;}const _errs67 = errors;if(typeof data4 === "string"){if(!pattern92.test(data4)){const err56 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 53];}else {if(_valid0){valid7 = true;passing0 = 53;}const _errs68 = errors;if(typeof data4 === "string"){if(!pattern93.test(data4)){const err57 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 54];}else {if(_valid0){valid7 = true;passing0 = 54;}const _errs69 = errors;if(typeof data4 === "string"){if(!pattern94.test(data4)){const err58 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 55];}else {if(_valid0){valid7 = true;passing0 = 55;}const _errs70 = errors;if(typeof data4 === "string"){if(!pattern95.test(data4)){const err59 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 56];}else {if(_valid0){valid7 = true;passing0 = 56;}const _errs71 = errors;if(typeof data4 === "string"){if(!pattern96.test(data4)){const err60 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 57];}else {if(_valid0){valid7 = true;passing0 = 57;}const _errs72 = errors;if(typeof data4 === "string"){if(!pattern97.test(data4)){const err61 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 58];}else {if(_valid0){valid7 = true;passing0 = 58;}const _errs73 = errors;if(typeof data4 === "string"){if(!pattern98.test(data4)){const err62 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 59];}else {if(_valid0){valid7 = true;passing0 = 59;}const _errs74 = errors;if(typeof data4 === "string"){if(!pattern32.test(data4)){const err63 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/60/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 60];}else {if(_valid0){valid7 = true;passing0 = 60;}const _errs75 = errors;if(typeof data4 === "string"){if(!pattern33.test(data4)){const err64 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/61/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 61];}else {if(_valid0){valid7 = true;passing0 = 61;}const _errs76 = errors;if(typeof data4 === "string"){if(!pattern34.test(data4)){const err65 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf/62/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid7){valid7 = false;passing0 = [passing0, 62];}else {if(_valid0){valid7 = true;passing0 = 62;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid7){const err66 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}else {errors = _errs13;if(vErrors !== null){if(_errs13){vErrors.length = _errs13;}else {vErrors = null;}}}if(typeof data4 === "string"){if(!pattern19.test(data4)){const err67 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}else {const err68 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/BlacksmithUpgradeMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}}else {const err69 = {instancePath:instancePath+"/levelList/" + i0+"/modList",schemaPath:"#/properties/levelList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}}else {const err70 = {instancePath:instancePath+"/levelList/" + i0,schemaPath:"#/properties/levelList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}}else {const err71 = {instancePath:instancePath+"/levelList",schemaPath:"#/properties/levelList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}if(data.itemList !== undefined){let data5 = data.itemList;if(Array.isArray(data5)){if(data5.length < 1){const err72 = {instancePath:instancePath+"/itemList",schemaPath:"#/properties/itemList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}const len2 = data5.length;for(let i2=0; i2<len2; i2++){let data6 = data5[i2];if(data6 && typeof data6 == "object" && !Array.isArray(data6)){if(data6.id === undefined){const err73 = {instancePath:instancePath+"/itemList/" + i2,schemaPath:"#/properties/itemList/items/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}if(data6.name === undefined){const err74 = {instancePath:instancePath+"/itemList/" + i2,schemaPath:"#/properties/itemList/items/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}if(data6.reforgeWeights === undefined){const err75 = {instancePath:instancePath+"/itemList/" + i2,schemaPath:"#/properties/itemList/items/required",keyword:"required",params:{missingProperty: "reforgeWeights"},message:"must have required property '"+"reforgeWeights"+"'"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}for(const key2 in data6){if(!(((key2 === "id") || (key2 === "name")) || (key2 === "reforgeWeights"))){delete data6[key2];}}if(data6.id !== undefined){let data7 = data6.id;if(typeof data7 === "string"){if(!pattern20.test(data7)){const err76 = {instancePath:instancePath+"/itemList/" + i2+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}else {const err77 = {instancePath:instancePath+"/itemList/" + i2+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}if(data6.name !== undefined){let data8 = data6.name;if(typeof data8 !== "string"){const err78 = {instancePath:instancePath+"/itemList/" + i2+"/name",schemaPath:"#/definitions/BlacksmithItemName/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}if(!((data8 === "Armour") || (data8 === "Weapon"))){const err79 = {instancePath:instancePath+"/itemList/" + i2+"/name",schemaPath:"#/definitions/BlacksmithItemName/enum",keyword:"enum",params:{allowedValues: schema53.enum},message:"must be equal to one of the allowed values"};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}}if(data6.reforgeWeights !== undefined){let data9 = data6.reforgeWeights;if(Array.isArray(data9)){const len3 = data9.length;for(let i3=0; i3<len3; i3++){let data10 = data9[i3];if(!((typeof data10 == "number") && (isFinite(data10)))){const err80 = {instancePath:instancePath+"/itemList/" + i2+"/reforgeWeights/" + i3,schemaPath:"#/properties/itemList/items/properties/reforgeWeights/items/type",keyword:"type",params:{type: "number"},message:"must be number"};if(vErrors === null){vErrors = [err80];}else {vErrors.push(err80);}errors++;}}}else {const err81 = {instancePath:instancePath+"/itemList/" + i2+"/reforgeWeights",schemaPath:"#/properties/itemList/items/properties/reforgeWeights/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err81];}else {vErrors.push(err81);}errors++;}}}else {const err82 = {instancePath:instancePath+"/itemList/" + i2,schemaPath:"#/properties/itemList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err82];}else {vErrors.push(err82);}errors++;}}}else {const err83 = {instancePath:instancePath+"/itemList",schemaPath:"#/properties/itemList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err83];}else {vErrors.push(err83);}errors++;}}if(data.modLists !== undefined){let data11 = data.modLists;if(Array.isArray(data11)){const len4 = data11.length;for(let i4=0; i4<len4; i4++){let data12 = data11[i4];if(Array.isArray(data12)){const len5 = data12.length;for(let i5=0; i5<len5; i5++){if(!(validate38(data12[i5], {instancePath:instancePath+"/modLists/" + i4+"/" + i5,parentData:data12,parentDataProperty:i5,rootData}))){vErrors = vErrors === null ? validate38.errors : vErrors.concat(validate38.errors);errors = vErrors.length;}}}else {const err84 = {instancePath:instancePath+"/modLists/" + i4,schemaPath:"#/properties/modLists/items/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err84];}else {vErrors.push(err84);}errors++;}}}else {const err85 = {instancePath:instancePath+"/modLists",schemaPath:"#/properties/modLists/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err85];}else {vErrors.push(err85);}errors++;}}if(data.crafting !== undefined){let data14 = data.crafting;if(data14 && typeof data14 == "object" && !Array.isArray(data14)){if(data14.craftList === undefined){const err86 = {instancePath:instancePath+"/crafting",schemaPath:"#/properties/crafting/required",keyword:"required",params:{missingProperty: "craftList"},message:"must have required property '"+"craftList"+"'"};if(vErrors === null){vErrors = [err86];}else {vErrors.push(err86);}errors++;}for(const key3 in data14){if(!((key3 === "advancedReforge") || (key3 === "craftList"))){delete data14[key3];}}if(data14.advancedReforge !== undefined){let data15 = data14.advancedReforge;if(data15 && typeof data15 == "object" && !Array.isArray(data15)){if(data15.requirements === undefined){const err87 = {instancePath:instancePath+"/crafting/advancedReforge",schemaPath:"#/properties/crafting/properties/advancedReforge/required",keyword:"required",params:{missingProperty: "requirements"},message:"must have required property '"+"requirements"+"'"};if(vErrors === null){vErrors = [err87];}else {vErrors.push(err87);}errors++;}for(const key4 in data15){if(!(key4 === "requirements")){delete data15[key4];}}if(data15.requirements !== undefined){let data16 = data15.requirements;if(data16 && typeof data16 == "object" && !Array.isArray(data16)){if(data16.blacksmithLevel === undefined){const err88 = {instancePath:instancePath+"/crafting/advancedReforge/requirements",schemaPath:"#/properties/crafting/properties/advancedReforge/properties/requirements/required",keyword:"required",params:{missingProperty: "blacksmithLevel"},message:"must have required property '"+"blacksmithLevel"+"'"};if(vErrors === null){vErrors = [err88];}else {vErrors.push(err88);}errors++;}for(const key5 in data16){if(!(key5 === "blacksmithLevel")){delete data16[key5];}}if(data16.blacksmithLevel !== undefined){let data17 = data16.blacksmithLevel;if(!(((typeof data17 == "number") && (!(data17 % 1) && !isNaN(data17))) && (isFinite(data17)))){const err89 = {instancePath:instancePath+"/crafting/advancedReforge/requirements/blacksmithLevel",schemaPath:"#/properties/crafting/properties/advancedReforge/properties/requirements/properties/blacksmithLevel/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err89];}else {vErrors.push(err89);}errors++;}if((typeof data17 == "number") && (isFinite(data17))){if(data17 < 1 || isNaN(data17)){const err90 = {instancePath:instancePath+"/crafting/advancedReforge/requirements/blacksmithLevel",schemaPath:"#/properties/crafting/properties/advancedReforge/properties/requirements/properties/blacksmithLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err90];}else {vErrors.push(err90);}errors++;}}}}else {const err91 = {instancePath:instancePath+"/crafting/advancedReforge/requirements",schemaPath:"#/properties/crafting/properties/advancedReforge/properties/requirements/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err91];}else {vErrors.push(err91);}errors++;}}}else {const err92 = {instancePath:instancePath+"/crafting/advancedReforge",schemaPath:"#/properties/crafting/properties/advancedReforge/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err92];}else {vErrors.push(err92);}errors++;}}if(data14.craftList !== undefined){let data18 = data14.craftList;if(Array.isArray(data18)){const len6 = data18.length;for(let i6=0; i6<len6; i6++){if(!(validate40(data18[i6], {instancePath:instancePath+"/crafting/craftList/" + i6,parentData:data18,parentDataProperty:i6,rootData}))){vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors);errors = vErrors.length;}}}else {const err93 = {instancePath:instancePath+"/crafting/craftList",schemaPath:"#/properties/crafting/properties/craftList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err93];}else {vErrors.push(err93);}errors++;}}}else {const err94 = {instancePath:instancePath+"/crafting",schemaPath:"#/properties/crafting/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err94];}else {vErrors.push(err94);}errors++;}}}else {const err95 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err95];}else {vErrors.push(err95);}errors++;}validate36.errors = vErrors;return errors === 0;}const schema59 = {"type":"object","properties":{"requirements":{"$ref":"#/definitions/Requirements"},"levelList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"upgradeCost":{"$ref":"#/definitions/Cost"},"modList":{"items":{"$ref":"#/definitions/TreasuryUpgradeMod"},"type":"array"}},"additionalProperties":false}},"artifacts":{"$ref":"#/definitions/Artifacts"}},"additionalProperties":false};const schema61 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"Burn Lingers"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},{"pattern":"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"}]};const schema62 = {"type":"object","properties":{"artifactList":{"minItems":1,"type":"array","items":{"$ref":"#/definitions/Artifact"}}},"additionalProperties":false,"required":["artifactList"]};const schema63 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"probability":{"type":"integer","minimum":1,"default":100,"description":"Percent = 1/Probability"},"rankList":{"minItems":1,"type":"array","items":{"type":"object","properties":{"exp":{"type":"integer","minimum":0,"description":"1 exp everytime its found"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["modList"]}}},"additionalProperties":false,"required":["id","name","rankList"]};function validate47(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.id === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "id"},message:"must have required property '"+"id"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.name === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "name"},message:"must have required property '"+"name"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.rankList === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "rankList"},message:"must have required property '"+"rankList"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}for(const key0 in data){if(!((((key0 === "id") || (key0 === "name")) || (key0 === "probability")) || (key0 === "rankList"))){delete data[key0];}}if(data.id !== undefined){let data0 = data.id;if(typeof data0 === "string"){if(!pattern20.test(data0)){const err3 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}else {const err4 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}if(data.name !== undefined){let data1 = data.name;if(typeof data1 === "string"){if(!pattern22.test(data1)){const err5 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}else {const err6 = {instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}if(data.probability !== undefined){let data2 = data.probability;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){const err7 = {instancePath:instancePath+"/probability",schemaPath:"#/properties/probability/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}if((typeof data2 == "number") && (isFinite(data2))){if(data2 < 1 || isNaN(data2)){const err8 = {instancePath:instancePath+"/probability",schemaPath:"#/properties/probability/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}}if(data.rankList !== undefined){let data3 = data.rankList;if(Array.isArray(data3)){if(data3.length < 1){const err9 = {instancePath:instancePath+"/rankList",schemaPath:"#/properties/rankList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];if(data4 && typeof data4 == "object" && !Array.isArray(data4)){if(data4.modList === undefined){const err10 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/required",keyword:"required",params:{missingProperty: "modList"},message:"must have required property '"+"modList"+"'"};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}for(const key1 in data4){if(!((key1 === "exp") || (key1 === "modList"))){delete data4[key1];}}if(data4.exp !== undefined){let data5 = data4.exp;if(!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))){const err11 = {instancePath:instancePath+"/rankList/" + i0+"/exp",schemaPath:"#/properties/rankList/items/properties/exp/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}if((typeof data5 == "number") && (isFinite(data5))){if(data5 < 0 || isNaN(data5)){const err12 = {instancePath:instancePath+"/rankList/" + i0+"/exp",schemaPath:"#/properties/rankList/items/properties/exp/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}}if(data4.modList !== undefined){let data6 = data4.modList;if(Array.isArray(data6)){const len1 = data6.length;for(let i1=0; i1<len1; i1++){let data7 = data6[i1];const _errs21 = errors;let valid8 = false;let passing0 = null;const _errs22 = errors;if(typeof data7 === "string"){if(!pattern39.test(data7)){const err13 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0){valid8 = true;passing0 = 0;}const _errs23 = errors;if(typeof data7 === "string"){if(!pattern40.test(data7)){const err14 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 1];}else {if(_valid0){valid8 = true;passing0 = 1;}const _errs24 = errors;if(typeof data7 === "string"){if(!pattern41.test(data7)){const err15 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 2];}else {if(_valid0){valid8 = true;passing0 = 2;}const _errs25 = errors;if(typeof data7 === "string"){if(!pattern42.test(data7)){const err16 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 3];}else {if(_valid0){valid8 = true;passing0 = 3;}const _errs26 = errors;if(typeof data7 === "string"){if(!pattern43.test(data7)){const err17 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 4];}else {if(_valid0){valid8 = true;passing0 = 4;}const _errs27 = errors;if(typeof data7 === "string"){if(!pattern44.test(data7)){const err18 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 5];}else {if(_valid0){valid8 = true;passing0 = 5;}const _errs28 = errors;if(typeof data7 === "string"){if(!pattern45.test(data7)){const err19 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 6];}else {if(_valid0){valid8 = true;passing0 = 6;}const _errs29 = errors;if(typeof data7 === "string"){if(!pattern46.test(data7)){const err20 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 7];}else {if(_valid0){valid8 = true;passing0 = 7;}const _errs30 = errors;if(typeof data7 === "string"){if(!pattern47.test(data7)){const err21 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 8];}else {if(_valid0){valid8 = true;passing0 = 8;}const _errs31 = errors;if(typeof data7 === "string"){if(!pattern48.test(data7)){const err22 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 9];}else {if(_valid0){valid8 = true;passing0 = 9;}const _errs32 = errors;if(typeof data7 === "string"){if(!pattern49.test(data7)){const err23 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 10];}else {if(_valid0){valid8 = true;passing0 = 10;}const _errs33 = errors;if(typeof data7 === "string"){if(!pattern50.test(data7)){const err24 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 11];}else {if(_valid0){valid8 = true;passing0 = 11;}const _errs34 = errors;if(typeof data7 === "string"){if(!pattern4.test(data7)){const err25 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 12];}else {if(_valid0){valid8 = true;passing0 = 12;}const _errs35 = errors;if(typeof data7 === "string"){if(!pattern5.test(data7)){const err26 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 13];}else {if(_valid0){valid8 = true;passing0 = 13;}const _errs36 = errors;if(typeof data7 === "string"){if(!pattern53.test(data7)){const err27 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 14];}else {if(_valid0){valid8 = true;passing0 = 14;}const _errs37 = errors;if(typeof data7 === "string"){if(!pattern54.test(data7)){const err28 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 15];}else {if(_valid0){valid8 = true;passing0 = 15;}const _errs38 = errors;if(typeof data7 === "string"){if(!pattern55.test(data7)){const err29 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 16];}else {if(_valid0){valid8 = true;passing0 = 16;}const _errs39 = errors;if(typeof data7 === "string"){if(!pattern16.test(data7)){const err30 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 17];}else {if(_valid0){valid8 = true;passing0 = 17;}const _errs40 = errors;if(typeof data7 === "string"){if(!pattern17.test(data7)){const err31 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 18];}else {if(_valid0){valid8 = true;passing0 = 18;}const _errs41 = errors;if(typeof data7 === "string"){if(!pattern58.test(data7)){const err32 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 19];}else {if(_valid0){valid8 = true;passing0 = 19;}const _errs42 = errors;if(typeof data7 === "string"){if(!pattern18.test(data7)){const err33 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 20];}else {if(_valid0){valid8 = true;passing0 = 20;}const _errs43 = errors;if(typeof data7 === "string"){if(!pattern60.test(data7)){const err34 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 21];}else {if(_valid0){valid8 = true;passing0 = 21;}const _errs44 = errors;if(typeof data7 === "string"){if(!pattern61.test(data7)){const err35 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 22];}else {if(_valid0){valid8 = true;passing0 = 22;}const _errs45 = errors;if(typeof data7 === "string"){if(!pattern62.test(data7)){const err36 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 23];}else {if(_valid0){valid8 = true;passing0 = 23;}const _errs46 = errors;if(typeof data7 === "string"){if(!pattern63.test(data7)){const err37 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 24];}else {if(_valid0){valid8 = true;passing0 = 24;}const _errs47 = errors;if(typeof data7 === "string"){if(!pattern64.test(data7)){const err38 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 25];}else {if(_valid0){valid8 = true;passing0 = 25;}const _errs48 = errors;if(typeof data7 === "string"){if(!pattern6.test(data7)){const err39 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 26];}else {if(_valid0){valid8 = true;passing0 = 26;}const _errs49 = errors;if(typeof data7 === "string"){if(!pattern66.test(data7)){const err40 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 27];}else {if(_valid0){valid8 = true;passing0 = 27;}const _errs50 = errors;if(typeof data7 === "string"){if(!pattern67.test(data7)){const err41 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 28];}else {if(_valid0){valid8 = true;passing0 = 28;}const _errs51 = errors;if(typeof data7 === "string"){if(!pattern68.test(data7)){const err42 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 29];}else {if(_valid0){valid8 = true;passing0 = 29;}const _errs52 = errors;if(typeof data7 === "string"){if(!pattern69.test(data7)){const err43 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 30];}else {if(_valid0){valid8 = true;passing0 = 30;}const _errs53 = errors;if(typeof data7 === "string"){if(!pattern70.test(data7)){const err44 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 31];}else {if(_valid0){valid8 = true;passing0 = 31;}const _errs54 = errors;if(typeof data7 === "string"){if(!pattern7.test(data7)){const err45 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 32];}else {if(_valid0){valid8 = true;passing0 = 32;}const _errs55 = errors;if(typeof data7 === "string"){if(!pattern72.test(data7)){const err46 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 33];}else {if(_valid0){valid8 = true;passing0 = 33;}const _errs56 = errors;if(typeof data7 === "string"){if(!pattern73.test(data7)){const err47 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 34];}else {if(_valid0){valid8 = true;passing0 = 34;}const _errs57 = errors;if(typeof data7 === "string"){if(!pattern74.test(data7)){const err48 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 35];}else {if(_valid0){valid8 = true;passing0 = 35;}const _errs58 = errors;if(typeof data7 === "string"){if(!pattern75.test(data7)){const err49 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 36];}else {if(_valid0){valid8 = true;passing0 = 36;}const _errs59 = errors;if(typeof data7 === "string"){if(!pattern76.test(data7)){const err50 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 37];}else {if(_valid0){valid8 = true;passing0 = 37;}const _errs60 = errors;if(typeof data7 === "string"){if(!pattern77.test(data7)){const err51 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 38];}else {if(_valid0){valid8 = true;passing0 = 38;}const _errs61 = errors;if(typeof data7 === "string"){if(!pattern78.test(data7)){const err52 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 39];}else {if(_valid0){valid8 = true;passing0 = 39;}const _errs62 = errors;if(typeof data7 === "string"){if(!pattern79.test(data7)){const err53 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 40];}else {if(_valid0){valid8 = true;passing0 = 40;}const _errs63 = errors;if(typeof data7 === "string"){if(!pattern8.test(data7)){const err54 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 41];}else {if(_valid0){valid8 = true;passing0 = 41;}const _errs64 = errors;if(typeof data7 === "string"){if(!pattern9.test(data7)){const err55 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 42];}else {if(_valid0){valid8 = true;passing0 = 42;}const _errs65 = errors;if(typeof data7 === "string"){if(!pattern10.test(data7)){const err56 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 43];}else {if(_valid0){valid8 = true;passing0 = 43;}const _errs66 = errors;if(typeof data7 === "string"){if(!pattern83.test(data7)){const err57 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 44];}else {if(_valid0){valid8 = true;passing0 = 44;}const _errs67 = errors;if(typeof data7 === "string"){if(!pattern11.test(data7)){const err58 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 45];}else {if(_valid0){valid8 = true;passing0 = 45;}const _errs68 = errors;if(typeof data7 === "string"){if(!pattern85.test(data7)){const err59 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 46];}else {if(_valid0){valid8 = true;passing0 = 46;}const _errs69 = errors;if(typeof data7 === "string"){if(!pattern12.test(data7)){const err60 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 47];}else {if(_valid0){valid8 = true;passing0 = 47;}const _errs70 = errors;if(typeof data7 === "string"){if(!pattern13.test(data7)){const err61 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 48];}else {if(_valid0){valid8 = true;passing0 = 48;}const _errs71 = errors;if(typeof data7 === "string"){if(!pattern14.test(data7)){const err62 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 49];}else {if(_valid0){valid8 = true;passing0 = 49;}const _errs72 = errors;if(typeof data7 === "string"){if(!pattern89.test(data7)){const err63 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 50];}else {if(_valid0){valid8 = true;passing0 = 50;}const _errs73 = errors;if(typeof data7 === "string"){if(!pattern90.test(data7)){const err64 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 51];}else {if(_valid0){valid8 = true;passing0 = 51;}const _errs74 = errors;if(typeof data7 === "string"){if(!pattern15.test(data7)){const err65 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 52];}else {if(_valid0){valid8 = true;passing0 = 52;}const _errs75 = errors;if(typeof data7 === "string"){if(!pattern92.test(data7)){const err66 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 53];}else {if(_valid0){valid8 = true;passing0 = 53;}const _errs76 = errors;if(typeof data7 === "string"){if(!pattern93.test(data7)){const err67 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 54];}else {if(_valid0){valid8 = true;passing0 = 54;}const _errs77 = errors;if(typeof data7 === "string"){if(!pattern94.test(data7)){const err68 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}var _valid0 = _errs77 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 55];}else {if(_valid0){valid8 = true;passing0 = 55;}const _errs78 = errors;if(typeof data7 === "string"){if(!pattern95.test(data7)){const err69 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}}var _valid0 = _errs78 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 56];}else {if(_valid0){valid8 = true;passing0 = 56;}const _errs79 = errors;if(typeof data7 === "string"){if(!pattern96.test(data7)){const err70 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}var _valid0 = _errs79 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 57];}else {if(_valid0){valid8 = true;passing0 = 57;}const _errs80 = errors;if(typeof data7 === "string"){if(!pattern97.test(data7)){const err71 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}var _valid0 = _errs80 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 58];}else {if(_valid0){valid8 = true;passing0 = 58;}const _errs81 = errors;if(typeof data7 === "string"){if(!pattern98.test(data7)){const err72 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}}var _valid0 = _errs81 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 59];}else {if(_valid0){valid8 = true;passing0 = 59;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid8){const err73 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}else {errors = _errs21;if(vErrors !== null){if(_errs21){vErrors.length = _errs21;}else {vErrors = null;}}}if(typeof data7 === "string"){if(!pattern19.test(data7)){const err74 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}else {const err75 = {instancePath:instancePath+"/rankList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}}}else {const err76 = {instancePath:instancePath+"/rankList/" + i0+"/modList",schemaPath:"#/properties/rankList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err76];}else {vErrors.push(err76);}errors++;}}}else {const err77 = {instancePath:instancePath+"/rankList/" + i0,schemaPath:"#/properties/rankList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err77];}else {vErrors.push(err77);}errors++;}}}else {const err78 = {instancePath:instancePath+"/rankList",schemaPath:"#/properties/rankList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err78];}else {vErrors.push(err78);}errors++;}}}else {const err79 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err79];}else {vErrors.push(err79);}errors++;}validate47.errors = vErrors;return errors === 0;}function validate46(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.artifactList === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "artifactList"},message:"must have required property '"+"artifactList"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}for(const key0 in data){if(!(key0 === "artifactList")){delete data[key0];}}if(data.artifactList !== undefined){let data0 = data.artifactList;if(Array.isArray(data0)){if(data0.length < 1){const err1 = {instancePath:instancePath+"/artifactList",schemaPath:"#/properties/artifactList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}const len0 = data0.length;for(let i0=0; i0<len0; i0++){if(!(validate47(data0[i0], {instancePath:instancePath+"/artifactList/" + i0,parentData:data0,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate47.errors : vErrors.concat(validate47.errors);errors = vErrors.length;}}}else {const err2 = {instancePath:instancePath+"/artifactList",schemaPath:"#/properties/artifactList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}}else {const err3 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}validate46.errors = vErrors;return errors === 0;}function validate44(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){for(const key0 in data){if(!(((key0 === "requirements") || (key0 === "levelList")) || (key0 === "artifacts"))){delete data[key0];}}if(data.requirements !== undefined){let data0 = data.requirements;if(data0 && typeof data0 == "object" && !Array.isArray(data0)){for(const key1 in data0){if(!((key1 === "curLevel") || (key1 === "world"))){delete data0[key1];}}if(data0.curLevel !== undefined){let data1 = data0.curLevel;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){const err0 = {instancePath:instancePath+"/requirements/curLevel",schemaPath:"#/definitions/Requirements/properties/curLevel/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if((typeof data1 == "number") && (isFinite(data1))){if(data1 < 1 || isNaN(data1)){const err1 = {instancePath:instancePath+"/requirements/curLevel",schemaPath:"#/definitions/Requirements/properties/curLevel/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}}if(data0.world !== undefined){let data2 = data0.world;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){const err2 = {instancePath:instancePath+"/requirements/world",schemaPath:"#/definitions/Requirements/properties/world/type",keyword:"type",params:{type: "integer"},message:"must be integer"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if((typeof data2 == "number") && (isFinite(data2))){if(data2 < 1 || isNaN(data2)){const err3 = {instancePath:instancePath+"/requirements/world",schemaPath:"#/definitions/Requirements/properties/world/minimum",keyword:"minimum",params:{comparison: ">=", limit: 1},message:"must be >= 1"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}}}else {const err4 = {instancePath:instancePath+"/requirements",schemaPath:"#/definitions/Requirements/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}if(data.levelList !== undefined){let data3 = data.levelList;if(Array.isArray(data3)){if(data3.length < 1){const err5 = {instancePath:instancePath+"/levelList",schemaPath:"#/properties/levelList/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];if(data4 && typeof data4 == "object" && !Array.isArray(data4)){for(const key2 in data4){if(!((key2 === "upgradeCost") || (key2 === "modList"))){delete data4[key2];}}if(data4.upgradeCost !== undefined){if(!(validate18(data4.upgradeCost, {instancePath:instancePath+"/levelList/" + i0+"/upgradeCost",parentData:data4,parentDataProperty:"upgradeCost",rootData}))){vErrors = vErrors === null ? validate18.errors : vErrors.concat(validate18.errors);errors = vErrors.length;}}if(data4.modList !== undefined){let data6 = data4.modList;if(Array.isArray(data6)){const len1 = data6.length;for(let i1=0; i1<len1; i1++){let data7 = data6[i1];const _errs21 = errors;let valid9 = false;let passing0 = null;const _errs22 = errors;if(typeof data7 === "string"){if(!pattern39.test(data7)){const err6 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0){valid9 = true;passing0 = 0;}const _errs23 = errors;if(typeof data7 === "string"){if(!pattern40.test(data7)){const err7 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 1];}else {if(_valid0){valid9 = true;passing0 = 1;}const _errs24 = errors;if(typeof data7 === "string"){if(!pattern41.test(data7)){const err8 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 2];}else {if(_valid0){valid9 = true;passing0 = 2;}const _errs25 = errors;if(typeof data7 === "string"){if(!pattern42.test(data7)){const err9 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 3];}else {if(_valid0){valid9 = true;passing0 = 3;}const _errs26 = errors;if(typeof data7 === "string"){if(!pattern43.test(data7)){const err10 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 4];}else {if(_valid0){valid9 = true;passing0 = 4;}const _errs27 = errors;if(typeof data7 === "string"){if(!pattern44.test(data7)){const err11 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 5];}else {if(_valid0){valid9 = true;passing0 = 5;}const _errs28 = errors;if(typeof data7 === "string"){if(!pattern45.test(data7)){const err12 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 6];}else {if(_valid0){valid9 = true;passing0 = 6;}const _errs29 = errors;if(typeof data7 === "string"){if(!pattern46.test(data7)){const err13 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 7];}else {if(_valid0){valid9 = true;passing0 = 7;}const _errs30 = errors;if(typeof data7 === "string"){if(!pattern47.test(data7)){const err14 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 8];}else {if(_valid0){valid9 = true;passing0 = 8;}const _errs31 = errors;if(typeof data7 === "string"){if(!pattern48.test(data7)){const err15 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 9];}else {if(_valid0){valid9 = true;passing0 = 9;}const _errs32 = errors;if(typeof data7 === "string"){if(!pattern49.test(data7)){const err16 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 10];}else {if(_valid0){valid9 = true;passing0 = 10;}const _errs33 = errors;if(typeof data7 === "string"){if(!pattern50.test(data7)){const err17 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 11];}else {if(_valid0){valid9 = true;passing0 = 11;}const _errs34 = errors;if(typeof data7 === "string"){if(!pattern4.test(data7)){const err18 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 12];}else {if(_valid0){valid9 = true;passing0 = 12;}const _errs35 = errors;if(typeof data7 === "string"){if(!pattern5.test(data7)){const err19 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 13];}else {if(_valid0){valid9 = true;passing0 = 13;}const _errs36 = errors;if(typeof data7 === "string"){if(!pattern53.test(data7)){const err20 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 14];}else {if(_valid0){valid9 = true;passing0 = 14;}const _errs37 = errors;if(typeof data7 === "string"){if(!pattern54.test(data7)){const err21 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 15];}else {if(_valid0){valid9 = true;passing0 = 15;}const _errs38 = errors;if(typeof data7 === "string"){if(!pattern55.test(data7)){const err22 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 16];}else {if(_valid0){valid9 = true;passing0 = 16;}const _errs39 = errors;if(typeof data7 === "string"){if(!pattern16.test(data7)){const err23 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 17];}else {if(_valid0){valid9 = true;passing0 = 17;}const _errs40 = errors;if(typeof data7 === "string"){if(!pattern17.test(data7)){const err24 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 18];}else {if(_valid0){valid9 = true;passing0 = 18;}const _errs41 = errors;if(typeof data7 === "string"){if(!pattern58.test(data7)){const err25 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 19];}else {if(_valid0){valid9 = true;passing0 = 19;}const _errs42 = errors;if(typeof data7 === "string"){if(!pattern18.test(data7)){const err26 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 20];}else {if(_valid0){valid9 = true;passing0 = 20;}const _errs43 = errors;if(typeof data7 === "string"){if(!pattern60.test(data7)){const err27 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 21];}else {if(_valid0){valid9 = true;passing0 = 21;}const _errs44 = errors;if(typeof data7 === "string"){if(!pattern61.test(data7)){const err28 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 22];}else {if(_valid0){valid9 = true;passing0 = 22;}const _errs45 = errors;if(typeof data7 === "string"){if(!pattern62.test(data7)){const err29 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 23];}else {if(_valid0){valid9 = true;passing0 = 23;}const _errs46 = errors;if(typeof data7 === "string"){if(!pattern63.test(data7)){const err30 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 24];}else {if(_valid0){valid9 = true;passing0 = 24;}const _errs47 = errors;if(typeof data7 === "string"){if(!pattern64.test(data7)){const err31 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 25];}else {if(_valid0){valid9 = true;passing0 = 25;}const _errs48 = errors;if(typeof data7 === "string"){if(!pattern6.test(data7)){const err32 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 26];}else {if(_valid0){valid9 = true;passing0 = 26;}const _errs49 = errors;if(typeof data7 === "string"){if(!pattern66.test(data7)){const err33 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 27];}else {if(_valid0){valid9 = true;passing0 = 27;}const _errs50 = errors;if(typeof data7 === "string"){if(!pattern67.test(data7)){const err34 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 28];}else {if(_valid0){valid9 = true;passing0 = 28;}const _errs51 = errors;if(typeof data7 === "string"){if(!pattern68.test(data7)){const err35 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 29];}else {if(_valid0){valid9 = true;passing0 = 29;}const _errs52 = errors;if(typeof data7 === "string"){if(!pattern69.test(data7)){const err36 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 30];}else {if(_valid0){valid9 = true;passing0 = 30;}const _errs53 = errors;if(typeof data7 === "string"){if(!pattern70.test(data7)){const err37 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 31];}else {if(_valid0){valid9 = true;passing0 = 31;}const _errs54 = errors;if(typeof data7 === "string"){if(!pattern7.test(data7)){const err38 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 32];}else {if(_valid0){valid9 = true;passing0 = 32;}const _errs55 = errors;if(typeof data7 === "string"){if(!pattern72.test(data7)){const err39 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 33];}else {if(_valid0){valid9 = true;passing0 = 33;}const _errs56 = errors;if(typeof data7 === "string"){if(!pattern73.test(data7)){const err40 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 34];}else {if(_valid0){valid9 = true;passing0 = 34;}const _errs57 = errors;if(typeof data7 === "string"){if(!pattern74.test(data7)){const err41 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 35];}else {if(_valid0){valid9 = true;passing0 = 35;}const _errs58 = errors;if(typeof data7 === "string"){if(!pattern75.test(data7)){const err42 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 36];}else {if(_valid0){valid9 = true;passing0 = 36;}const _errs59 = errors;if(typeof data7 === "string"){if(!pattern76.test(data7)){const err43 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 37];}else {if(_valid0){valid9 = true;passing0 = 37;}const _errs60 = errors;if(typeof data7 === "string"){if(!pattern77.test(data7)){const err44 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 38];}else {if(_valid0){valid9 = true;passing0 = 38;}const _errs61 = errors;if(typeof data7 === "string"){if(!pattern78.test(data7)){const err45 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 39];}else {if(_valid0){valid9 = true;passing0 = 39;}const _errs62 = errors;if(typeof data7 === "string"){if(!pattern79.test(data7)){const err46 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 40];}else {if(_valid0){valid9 = true;passing0 = 40;}const _errs63 = errors;if(typeof data7 === "string"){if(!pattern8.test(data7)){const err47 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 41];}else {if(_valid0){valid9 = true;passing0 = 41;}const _errs64 = errors;if(typeof data7 === "string"){if(!pattern9.test(data7)){const err48 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 42];}else {if(_valid0){valid9 = true;passing0 = 42;}const _errs65 = errors;if(typeof data7 === "string"){if(!pattern10.test(data7)){const err49 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 43];}else {if(_valid0){valid9 = true;passing0 = 43;}const _errs66 = errors;if(typeof data7 === "string"){if(!pattern83.test(data7)){const err50 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 44];}else {if(_valid0){valid9 = true;passing0 = 44;}const _errs67 = errors;if(typeof data7 === "string"){if(!pattern11.test(data7)){const err51 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 45];}else {if(_valid0){valid9 = true;passing0 = 45;}const _errs68 = errors;if(typeof data7 === "string"){if(!pattern85.test(data7)){const err52 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 46];}else {if(_valid0){valid9 = true;passing0 = 46;}const _errs69 = errors;if(typeof data7 === "string"){if(!pattern12.test(data7)){const err53 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 47];}else {if(_valid0){valid9 = true;passing0 = 47;}const _errs70 = errors;if(typeof data7 === "string"){if(!pattern13.test(data7)){const err54 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 48];}else {if(_valid0){valid9 = true;passing0 = 48;}const _errs71 = errors;if(typeof data7 === "string"){if(!pattern14.test(data7)){const err55 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 49];}else {if(_valid0){valid9 = true;passing0 = 49;}const _errs72 = errors;if(typeof data7 === "string"){if(!pattern89.test(data7)){const err56 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 50];}else {if(_valid0){valid9 = true;passing0 = 50;}const _errs73 = errors;if(typeof data7 === "string"){if(!pattern90.test(data7)){const err57 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Increased Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 51];}else {if(_valid0){valid9 = true;passing0 = 51;}const _errs74 = errors;if(typeof data7 === "string"){if(!pattern15.test(data7)){const err58 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 52];}else {if(_valid0){valid9 = true;passing0 = 52;}const _errs75 = errors;if(typeof data7 === "string"){if(!pattern92.test(data7)){const err59 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 53];}else {if(_valid0){valid9 = true;passing0 = 53;}const _errs76 = errors;if(typeof data7 === "string"){if(!pattern93.test(data7)){const err60 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 54];}else {if(_valid0){valid9 = true;passing0 = 54;}const _errs77 = errors;if(typeof data7 === "string"){if(!pattern94.test(data7)){const err61 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/55/pattern",keyword:"pattern",params:{pattern: "Burn Lingers"},message:"must match pattern \""+"Burn Lingers"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid0 = _errs77 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 55];}else {if(_valid0){valid9 = true;passing0 = 55;}const _errs78 = errors;if(typeof data7 === "string"){if(!pattern95.test(data7)){const err62 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/56/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid0 = _errs78 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 56];}else {if(_valid0){valid9 = true;passing0 = 56;}const _errs79 = errors;if(typeof data7 === "string"){if(!pattern96.test(data7)){const err63 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/57/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs79 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 57];}else {if(_valid0){valid9 = true;passing0 = 57;}const _errs80 = errors;if(typeof data7 === "string"){if(!pattern97.test(data7)){const err64 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/58/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Passive Skills Experience Gain$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid0 = _errs80 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 58];}else {if(_valid0){valid9 = true;passing0 = 58;}const _errs81 = errors;if(typeof data7 === "string"){if(!pattern98.test(data7)){const err65 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/59/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Artifacts Found$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid0 = _errs81 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 59];}else {if(_valid0){valid9 = true;passing0 = 59;}const _errs82 = errors;if(typeof data7 === "string"){if(!pattern32.test(data7)){const err66 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/60/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}var _valid0 = _errs82 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 60];}else {if(_valid0){valid9 = true;passing0 = 60;}const _errs83 = errors;if(typeof data7 === "string"){if(!pattern33.test(data7)){const err67 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/61/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Additional Aura Slots$"+"\""};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;}}var _valid0 = _errs83 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 61];}else {if(_valid0){valid9 = true;passing0 = 61;}const _errs84 = errors;if(typeof data7 === "string"){if(!pattern34.test(data7)){const err68 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf/62/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err68];}else {vErrors.push(err68);}errors++;}}var _valid0 = _errs84 === errors;if(_valid0 && valid9){valid9 = false;passing0 = [passing0, 62];}else {if(_valid0){valid9 = true;passing0 = 62;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid9){const err69 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err69];}else {vErrors.push(err69);}errors++;}else {errors = _errs21;if(vErrors !== null){if(_errs21){vErrors.length = _errs21;}else {vErrors = null;}}}if(typeof data7 === "string"){if(!pattern19.test(data7)){const err70 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err70];}else {vErrors.push(err70);}errors++;}}else {const err71 = {instancePath:instancePath+"/levelList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/TreasuryUpgradeMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err71];}else {vErrors.push(err71);}errors++;}}}else {const err72 = {instancePath:instancePath+"/levelList/" + i0+"/modList",schemaPath:"#/properties/levelList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err72];}else {vErrors.push(err72);}errors++;}}}else {const err73 = {instancePath:instancePath+"/levelList/" + i0,schemaPath:"#/properties/levelList/items/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err73];}else {vErrors.push(err73);}errors++;}}}else {const err74 = {instancePath:instancePath+"/levelList",schemaPath:"#/properties/levelList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err74];}else {vErrors.push(err74);}errors++;}}if(data.artifacts !== undefined){if(!(validate46(data.artifacts, {instancePath:instancePath+"/artifacts",parentData:data,parentDataProperty:"artifacts",rootData}))){vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);errors = vErrors.length;}}}else {const err75 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err75];}else {vErrors.push(err75);}errors++;}validate44.errors = vErrors;return errors === 0;}const schema66 = {"type":"object","properties":{"achievementList":{"type":"array","items":{"$ref":"#/definitions/Achievement"}}},"additionalProperties":false,"required":["achievementList"]};const schema67 = {"type":"object","properties":{"description":{"$ref":"#/definitions/AchievementDescription"}},"additionalProperties":false,"required":["description"]};const schema68 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"},{"pattern":"^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"},{"pattern":"^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"}]};const pattern679 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$", "u");const pattern680 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$", "u");const pattern681 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$", "u");const pattern682 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$", "u");const pattern683 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$", "u");const pattern684 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$", "u");const pattern685 = new RegExp("^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$", "u");const pattern686 = new RegExp("^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$", "u");function validate52(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.description === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "description"},message:"must have required property '"+"description"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}for(const key0 in data){if(!(key0 === "description")){delete data[key0];}}if(data.description !== undefined){let data0 = data.description;const _errs5 = errors;let valid2 = false;let passing0 = null;const _errs6 = errors;if(typeof data0 === "string"){if(!pattern679.test(data0)){const err1 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs6 === errors;if(_valid0){valid2 = true;passing0 = 0;}const _errs7 = errors;if(typeof data0 === "string"){if(!pattern680.test(data0)){const err2 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs7 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 1];}else {if(_valid0){valid2 = true;passing0 = 1;}const _errs8 = errors;if(typeof data0 === "string"){if(!pattern681.test(data0)){const err3 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs8 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 2];}else {if(_valid0){valid2 = true;passing0 = 2;}const _errs9 = errors;if(typeof data0 === "string"){if(!pattern682.test(data0)){const err4 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs9 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 3];}else {if(_valid0){valid2 = true;passing0 = 3;}const _errs10 = errors;if(typeof data0 === "string"){if(!pattern683.test(data0)){const err5 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs10 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 4];}else {if(_valid0){valid2 = true;passing0 = 4;}const _errs11 = errors;if(typeof data0 === "string"){if(!pattern684.test(data0)){const err6 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 5];}else {if(_valid0){valid2 = true;passing0 = 5;}const _errs12 = errors;if(typeof data0 === "string"){if(!pattern685.test(data0)){const err7 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"},message:"must match pattern \""+"^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs12 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 6];}else {if(_valid0){valid2 = true;passing0 = 6;}const _errs13 = errors;if(typeof data0 === "string"){if(!pattern686.test(data0)){const err8 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"},message:"must match pattern \""+"^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 7];}else {if(_valid0){valid2 = true;passing0 = 7;}}}}}}}}if(!valid2){const err9 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}else {errors = _errs5;if(vErrors !== null){if(_errs5){vErrors.length = _errs5;}else {vErrors = null;}}}if(typeof data0 === "string"){if(!pattern19.test(data0)){const err10 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}else {const err11 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}}else {const err12 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}validate52.errors = vErrors;return errors === 0;}function validate51(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.achievementList === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "achievementList"},message:"must have required property '"+"achievementList"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}for(const key0 in data){if(!(key0 === "achievementList")){delete data[key0];}}if(data.achievementList !== undefined){let data0 = data.achievementList;if(Array.isArray(data0)){const len0 = data0.length;for(let i0=0; i0<len0; i0++){if(!(validate52(data0[i0], {instancePath:instancePath+"/achievementList/" + i0,parentData:data0,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate52.errors : vErrors.concat(validate52.errors);errors = vErrors.length;}}}else {const err1 = {instancePath:instancePath+"/achievementList",schemaPath:"#/properties/achievementList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}}else {const err2 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}validate51.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(data && typeof data == "object" && !Array.isArray(data)){if(data.playerStartModList === undefined){const err0 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "playerStartModList"},message:"must have required property '"+"playerStartModList"+"'"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}if(data.resources === undefined){const err1 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "resources"},message:"must have required property '"+"resources"+"'"};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}if(data.version === undefined){const err2 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "version"},message:"must have required property '"+"version"+"'"};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}if(data.world === undefined){const err3 = {instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: "world"},message:"must have required property '"+"world"+"'"};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}for(const key0 in data){if(!(((((key0 === "version") || (key0 === "playerStartModList")) || (key0 === "resources")) || (key0 === "world")) || (key0 === "components"))){delete data[key0];}}if(data.version !== undefined){let data0 = data.version;if(typeof data0 !== "string"){const err4 = {instancePath:instancePath+"/version",schemaPath:"#/properties/version/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}if("v0" !== data0){const err5 = {instancePath:instancePath+"/version",schemaPath:"#/properties/version/const",keyword:"const",params:{allowedValue: "v0"},message:"must be equal to constant"};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}if(data.playerStartModList !== undefined){let data1 = data.playerStartModList;if(Array.isArray(data1)){const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs9 = errors;let valid4 = false;let passing0 = null;const _errs10 = errors;if(typeof data2 === "string"){if(!pattern0.test(data2)){const err6 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs10 === errors;if(_valid0){valid4 = true;passing0 = 0;}const _errs11 = errors;if(typeof data2 === "string"){if(!pattern1.test(data2)){const err7 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 1];}else {if(_valid0){valid4 = true;passing0 = 1;}const _errs12 = errors;if(typeof data2 === "string"){if(!pattern2.test(data2)){const err8 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs12 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 2];}else {if(_valid0){valid4 = true;passing0 = 2;}const _errs13 = errors;if(typeof data2 === "string"){if(!pattern3.test(data2)){const err9 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 3];}else {if(_valid0){valid4 = true;passing0 = 3;}const _errs14 = errors;if(typeof data2 === "string"){if(!pattern4.test(data2)){const err10 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 4];}else {if(_valid0){valid4 = true;passing0 = 4;}const _errs15 = errors;if(typeof data2 === "string"){if(!pattern5.test(data2)){const err11 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 5];}else {if(_valid0){valid4 = true;passing0 = 5;}const _errs16 = errors;if(typeof data2 === "string"){if(!pattern6.test(data2)){const err12 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 6];}else {if(_valid0){valid4 = true;passing0 = 6;}const _errs17 = errors;if(typeof data2 === "string"){if(!pattern7.test(data2)){const err13 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs17 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 7];}else {if(_valid0){valid4 = true;passing0 = 7;}const _errs18 = errors;if(typeof data2 === "string"){if(!pattern8.test(data2)){const err14 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 8];}else {if(_valid0){valid4 = true;passing0 = 8;}const _errs19 = errors;if(typeof data2 === "string"){if(!pattern9.test(data2)){const err15 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 9];}else {if(_valid0){valid4 = true;passing0 = 9;}const _errs20 = errors;if(typeof data2 === "string"){if(!pattern10.test(data2)){const err16 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 10];}else {if(_valid0){valid4 = true;passing0 = 10;}const _errs21 = errors;if(typeof data2 === "string"){if(!pattern11.test(data2)){const err17 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 11];}else {if(_valid0){valid4 = true;passing0 = 11;}const _errs22 = errors;if(typeof data2 === "string"){if(!pattern12.test(data2)){const err18 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 12];}else {if(_valid0){valid4 = true;passing0 = 12;}const _errs23 = errors;if(typeof data2 === "string"){if(!pattern13.test(data2)){const err19 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 13];}else {if(_valid0){valid4 = true;passing0 = 13;}const _errs24 = errors;if(typeof data2 === "string"){if(!pattern14.test(data2)){const err20 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 14];}else {if(_valid0){valid4 = true;passing0 = 14;}const _errs25 = errors;if(typeof data2 === "string"){if(!pattern15.test(data2)){const err21 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 15];}else {if(_valid0){valid4 = true;passing0 = 15;}const _errs26 = errors;if(typeof data2 === "string"){if(!pattern16.test(data2)){const err22 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 16];}else {if(_valid0){valid4 = true;passing0 = 16;}const _errs27 = errors;if(typeof data2 === "string"){if(!pattern17.test(data2)){const err23 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+)([-]([0-9]+))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 17];}else {if(_valid0){valid4 = true;passing0 = 17;}const _errs28 = errors;if(typeof data2 === "string"){if(!pattern18.test(data2)){const err24 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 18];}else {if(_valid0){valid4 = true;passing0 = 18;}}}}}}}}}}}}}}}}}}}if(!valid4){const err25 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}else {errors = _errs9;if(vErrors !== null){if(_errs9){vErrors.length = _errs9;}else {vErrors = null;}}}if(typeof data2 === "string"){if(!pattern19.test(data2)){const err26 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}else {const err27 = {instancePath:instancePath+"/playerStartModList/" + i0,schemaPath:"#/definitions/PlayerStartMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}}else {const err28 = {instancePath:instancePath+"/playerStartModList",schemaPath:"#/properties/playerStartModList/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}if(data.resources !== undefined){let data3 = data.resources;if(Array.isArray(data3)){const len1 = data3.length;for(let i1=0; i1<len1; i1++){if(!(validate11(data3[i1], {instancePath:instancePath+"/resources/" + i1,parentData:data3,parentDataProperty:i1,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}}}else {const err29 = {instancePath:instancePath+"/resources",schemaPath:"#/properties/resources/type",keyword:"type",params:{type: "array"},message:"must be array"};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}if(data.world !== undefined){if(!(validate13(data.world, {instancePath:instancePath+"/world",parentData:data,parentDataProperty:"world",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}}if(data.components !== undefined){let data6 = data.components;if(data6 && typeof data6 == "object" && !Array.isArray(data6)){for(const key1 in data6){if(!(((((key1 === "guildHall") || (key1 === "character")) || (key1 === "blacksmith")) || (key1 === "treasury")) || (key1 === "achievements"))){delete data6[key1];}}if(data6.guildHall !== undefined){if(!(validate17(data6.guildHall, {instancePath:instancePath+"/components/guildHall",parentData:data6,parentDataProperty:"guildHall",rootData}))){vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);errors = vErrors.length;}}if(data6.character !== undefined){if(!(validate27(data6.character, {instancePath:instancePath+"/components/character",parentData:data6,parentDataProperty:"character",rootData}))){vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);errors = vErrors.length;}}if(data6.blacksmith !== undefined){if(!(validate36(data6.blacksmith, {instancePath:instancePath+"/components/blacksmith",parentData:data6,parentDataProperty:"blacksmith",rootData}))){vErrors = vErrors === null ? validate36.errors : vErrors.concat(validate36.errors);errors = vErrors.length;}}if(data6.treasury !== undefined){if(!(validate44(data6.treasury, {instancePath:instancePath+"/components/treasury",parentData:data6,parentDataProperty:"treasury",rootData}))){vErrors = vErrors === null ? validate44.errors : vErrors.concat(validate44.errors);errors = vErrors.length;}}if(data6.achievements !== undefined){if(!(validate51(data6.achievements, {instancePath:instancePath+"/components/achievements",parentData:data6,parentDataProperty:"achievements",rootData}))){vErrors = vErrors === null ? validate51.errors : vErrors.concat(validate51.errors);errors = vErrors.length;}}}else {const err30 = {instancePath:instancePath+"/components",schemaPath:"#/properties/components/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}}else {const err31 = {instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}validate10.errors = vErrors;return errors === 0;}