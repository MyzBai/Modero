{
  "version": 3,
  "sources": ["../../../node_modules/lz-string/libs/lz-string.js", "../../../src/shared/utils/utils.ts", "../../../src/shared/utils/assert.ts", "../../../src/extensions/arrayExtensions.ts", "../../../src/extensions/DOMExtensions.ts", "../../../src/shared/utils/EventEmitter.ts", "../../../src/game/gameConfig/gameModRegister.json", "../../../src/shared/customElements/CustomElement.ts", "../../../src/shared/customElements/ProgressElement.ts", "../../../src/shared/customElements/customElements.ts", "../../../src/game/effects/effectSystems.ts", "../../../src/game/effects/Effects.ts", "../../../src/game/calc/calcMod.ts", "../../../src/game/mods/types.ts", "../../../src/game/utils/utils.ts", "../../../src/game/calc/calcStats.ts", "../../../src/game/calc/calcDamage.ts", "../../../src/shared/utils/Value.ts", "../../../src/game/statistics/Statistic.ts", "../../../src/game/statistics/stats.ts", "../../../src/shared/customElements/ModalElement.ts", "../../../src/game/mods/combatCtxModTemplates.ts", "../../../src/game/mods/modUtils.ts", "../../../src/game/mods/playerModTemplates.ts", "../../../src/game/mods/enemyModTemplates.ts", "../../../src/game/mods/modTemplates.ts", "../../../src/game/gameConfig/GameConfig.ts", "../../../src/shared/utils/constants.ts", "../../../src/shared/utils/textParsing.ts", "../../../src/game/mods/Modifier.ts", "../../../src/game/utils/dom.ts", "../../../src/game/combat/Combat.ts", "../../../src/game/components/Component.ts", "../../../src/game/tasks/taskTemplates.ts", "../../../src/game/tasks/Task.ts", "../../../src/game/components/achievements/Achievements.ts", "../../../src/shared/customElements/TextInputDropdownElement.ts", "../../../src/game/utils/rankObjectUtils.ts", "../../../src/game/utils/objectUtils.ts", "../../../src/game/components/character/SkillPage.ts", "../../../src/game/components/character/attackSkills/AttackSkills.ts", "../../../src/game/components/character/auraSkills/AuraSkills.ts", "../../../src/game/components/character/passiveSkills/PassiveSkills.ts", "../../../src/shared/customElements/TabMenuElement.ts", "../../../src/game/mods/ModDB.ts", "../../../src/config.ts", "../../../src/game/Player.ts", "../../../src/game/components/character/Character.ts", "../../../src/game/components/blacksmith/craftTemplates.ts", "../../../src/game/components/blacksmith/CraftManager.ts", "../../../src/game/mods/ModifierInfoPopup.ts", "../../../src/game/mods/modUtilsDOM.ts", "../../../src/game/components/blacksmith/Crafting.ts", "../../../src/game/components/blacksmith/CraftTable.ts", "../../../src/game/components/blacksmith/Blacksmith.ts", "../../../src/game/statistics/statRequirements.ts", "../../../src/game/components/guildHall/GuildHall.ts", "../../../src/game/components/treasury/artifacts/Artifacts.ts", "../../../src/game/components/treasury/Treasury.ts", "../../../src/game/components/Components.ts", "../../../src/shared/customElements/AccordionElement.ts", "../../../src/game/statistics/Statistics.ts", "../../../src/shared/utils/LoopWorker.ts", "../../../src/shared/utils/Loop.ts", "../../../src/shared/utils/saveManager.ts", "../../../src/game/dev.ts", "../../../src/shared/utils/date.ts", "../../../src/game/Notifications.ts", "../../../src/game/combat/Enemy.ts", "../../../src/game/combat/CombatContext.ts", "../../../src/game/world/World.ts", "../../../src/home/dom.ts", "../../../src/game/game.ts"],
  "sourcesContent": ["// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.5\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n", "export const hasAllFlags = (a: number, b: number) => (a & b) === b;\nexport const hasAnyFlag = (a: number, b: number) => b === 0 ? true : (a & b) !== 0;\nexport const avg = (a: number, b: number) => (a + b) / 2;\nexport const randomRange = (min: number, max: number) => Math.random() * (max - min) + min;\nexport const randomRangeInt = (min: number, max: number) => Math.floor(randomRange(min, max));\nexport const clamp = (value: number, min: number, max: number) => Math.max(min, Math.min(value, max));\nexport const lerp = (a: number, b: number, t: number) => a + (b - a) * t;\nexport const invLerp = (a: number, b: number, v: number) => (v - a) / ((b - a) || 1);\nexport const remap = (iMin: number, iMax: number, oMin: number, oMax: number, v: number) => lerp(oMin, oMax, invLerp(iMin, iMax, v));\nexport const inRange = (value: number, min: number, max: number) => value >= min && value <= max;\n\nexport const isNumber = (v?: unknown): v is number => typeof v === 'number';\nexport const isString = (v?: unknown): v is string => typeof v === 'string';\nexport const isBoolean = (v?: unknown): v is boolean => typeof v === 'boolean';\nexport const isDefined = <T>(v?: T): v is T => v !== undefined;\nexport const isNull = <T>(v: T | null | undefined): v is T => v === null;\nexport const isUndefined = <T>(v: T | null | undefined): v is T => !isDefined(v);\nexport const isNonNullable = <T>(v: T | null | undefined): v is T => isDefined(v) && !isNull(v);\nexport const isArrayOf = <T>(arr: T[], predicate: (element: unknown) => element is T): arr is T[] => arr.every(predicate);\n\nexport const includes = <T>(arr: T[]) => (v: T): boolean => arr.includes(v);\n\nexport const uuid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n};\n\nexport function getRandomWeightedIndex(weights: readonly number[], nullWeight = 0): number | -1 {\n    const tempWeights = [nullWeight, ...weights];\n    let sum = tempWeights.reduce((a, c) => a + c, 0);\n    const random = Math.random() * sum;\n    if (random === 0) {\n        return -1;\n    }\n    for (const [i, v] of tempWeights.entries()) {\n        sum -= v;\n        if (sum <= random) {\n            return i - 1;\n        }\n    }\n    return -1;\n}\n\nexport function getRandomWeightedItem<T extends readonly { weight: number; }[]>(items: T, nullWeight = 0) {\n    const index = getRandomWeightedIndex(items.map(x => x.weight), nullWeight);\n    const item = items[index] as T[number] | undefined;\n    return item;\n}\n\nexport function pickOneFromPickProbability<T extends { probability?: number; }>(items: readonly T[]): T | undefined {\n    for (const item of items) {\n        const random = randomRangeInt(1, (item.probability ?? 0) + 1);\n        const pick = item.probability === random;\n        if (pick) {\n            return item;\n        }\n    }\n    return undefined;\n}\n\nexport function pickManyFromPickProbability<T extends { probability: number; }>(items: readonly T[]): T[] {\n    const result: T[] = [];\n    for (const item of items) {\n        const random = randomRangeInt(1, item.probability + 1);\n        const pick = item.probability === random;\n        if (pick) {\n            result.push(item);\n        }\n    }\n    return result;\n}\n\nexport function toRatios(arr: number[]) {\n    const sum = arr.reduce((a, c) => a + c, 0) || Number.EPSILON;\n    return arr.map((num) => num / sum);\n}\n\nexport function toDecimals(value: number, decimals: number, rounding: (v: number) => number = Math.floor) {\n    return rounding(value * Math.pow(10, decimals)) / Math.pow(10, decimals);\n}", "import { isDefined, isNonNullable, isUndefined } from './utils';\n\nexport function assertDefined(value?: unknown | null, msg?: string): asserts value {\n    if (!isDefined(value)) {\n        throw new TypeError(msg ?? 'value is undefined');\n    }\n}\n\nexport function assertUndefined<T>(value: undefined | T, msg?: string): asserts value is T {\n    if (!isUndefined(value)) {\n        throw new TypeError(msg ?? 'value is defined');\n    }\n}\n\nexport function assertNullable<T>(value: T | undefined | null, msg?: string): asserts value is T {\n    if (isNonNullable(value)) {\n        throw new TypeError(msg ?? 'value is not null or undefined');\n    }\n}\n\nexport function assertNonNullable<T>(value: T | undefined | null, msg?: string): asserts value is T {\n    if (!isNonNullable(value)) {\n        throw new TypeError(msg ?? 'value is null or undefined');\n    }\n}\n\nexport function assertType<T>(value: T | null | undefined, func: (arg?: T | null) => boolean, msg?: string): asserts value is T {\n    if (!func(value)) {\n        throw new TypeError(msg);\n    }\n}", "import { assertDefined } from '../shared/utils/assert';\nimport { randomRangeInt } from '../shared/utils/utils';\n\nArray.prototype.remove = function <T>(this: T[], item: T) {\n    const index = this.indexOf(item);\n    if (index === -1) {\n        return false;\n    }\n    this.splice(index, 1);\n    return true;\n};\n\nArray.prototype.replace = function <T>(this: T[], oldValue: T, newValue: T) {\n    const index = this.indexOf(oldValue);\n    if (index === -1) {\n        return false;\n    }\n    this[index] = newValue;\n    return true;\n};\n\nArray.prototype.clear = function <T>(this: T[]) {\n    this.splice(0);\n};\nArray.prototype.random = function <T>(this: T[]) {\n    const index = randomRangeInt(0, this.length);\n    const value = this[index];\n    assertDefined(value);\n    return value;\n};\nArray.prototype.findStrict = function <T>(this: T[], predicate: (value: T, index: number, arr: T[]) => unknown) {\n    const item = this.find(predicate);\n    assertDefined(item, 'Item must exist when called with Array.findStrict()');\n    return item;\n};\n", "import { assertDefined, assertType } from '../shared/utils/assert';\nimport { isString } from '../shared/utils/utils';\n\n\nif (typeof Document !== 'undefined') {\n    Document.prototype.querySelectorStrict = function <E extends Element = Element>(this: Element, selectors: string) {\n        const element = this.querySelector<E>(selectors);\n        assertDefined(element, `Element with selectors ${selectors} could not be found!`);\n        return element;\n    };\n}\nif (typeof Element !== 'undefined') {\n    Element.prototype.querySelectorStrict = function <E extends Element = Element>(this: Element, selectors: string) {\n        const element = this.querySelector<E>(selectors);\n        assertDefined(element, `Element with selectors ${selectors} could not be found!`);\n        return element;\n    };\n\n    Element.prototype.getAttributeStrict = function (this: Element, qualifiedName: string) {\n        const attr = this.getAttribute(qualifiedName);\n        assertType(attr, isString, `missing attribute: ${qualifiedName}`);\n        return attr;\n    };\n}", "type Callback<T> = (args: T, instance: EventInstance<T>) => void;\n\ninterface EventInstance<T> {\n    callback: Callback<T>;\n    opts?: CallbackInputOptions;\n    removeListener: () => void;\n}\ninterface CallbackInputOptions {\n    once?: boolean;\n}\n\nexport class EventEmitter<T> {\n    private readonly listeners = new Map<Callback<T>, EventInstance<T>>;\n\n    listen(callback: Callback<T>, opts?: CallbackInputOptions) {\n        const removeListener = () => this.removeListener(callback);\n        const instance: EventInstance<T> = { callback, opts, removeListener };\n        this.listeners.set(callback, instance);\n    }\n    removeListener(callback: Callback<T>) {\n        this.listeners.delete(callback);\n    }\n    removeAllListeners() {\n        this.listeners.clear();\n    }\n\n    invoke(value: T) {\n        for (const [callback, listener] of this.listeners.entries()) {\n            listener.callback(value, listener);\n            if (listener.opts?.once) {\n                this.listeners.delete(callback);\n            }\n        }\n    }\n}", "{\n    \"$schema\": \"gameModRegister.schema.json\",\n    \"list\": [\n        {\n            \"id\": \"1ea84a\",\n            \"name\": \"Demo\",\n            \"url\": \"./gameMods/demo.jsonc\",\n            \"author\": \"MyzBai\",\n            \"description\": \"This mod acts as a demo. \\nIt's made by the developer of this game.\\nThe purpose of this mod is to showcase the base game and may contain a lot of missing features.\"\n        }\n    ]\n}", "\nexport abstract class CustomElement extends HTMLElement {\n    init?(): void;\n\n    cloneNode(deep?: boolean | undefined): Node {\n        super.cloneNode(deep);\n        this.init?.();\n        return this;\n    }\n\n    disconnectedCallback() {\n        // this.remove();\n    }\n}", "import { CustomElement } from './CustomElement';\n\nexport class ProgressElement extends CustomElement {\n    static name = 'progress-element';\n    private _value: number = 0;\n    private readonly valueElement: HTMLElement;\n    constructor() {\n        super();\n        this.valueElement = document.createElement('div');\n        this.valueElement.classList.add('value');\n    }\n\n    set value(v: number) {\n        this._value = Number.isFinite(v) ? v : 1;\n        this.update();\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    private update() {\n        const pct = this._value * 100;\n        this.valueElement.style.width = CSS.percent(pct).toString();\n    }\n\n    init(): void {\n        this.appendChild(this.valueElement);\n        const inner = document.createElement('div');\n        inner.classList.add('inner');\n        this.valueElement.appendChild(inner);\n        this.update();\n    }\n}", "import type { CustomElement } from './CustomElement';\n\nexport function createCustomElement<T extends new () => CustomElement>(ctor: T) {\n    const name = ctor.name;\n    if (!customElements.get(name)) {\n        customElements.define(name, ctor);\n    }\n    const element = document.createElement(name) as InstanceType<T>;\n    element.init?.();\n    return element;\n}", "import { lerp } from 'src/shared/utils/utils';\nimport { combat, player } from '../game';\nimport type { DOTEffect, EffectType } from './Effects';\nimport type * as GameSerialization from '../serialization';\nimport { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\n\nconst sortByDamage = (a: { damage: number; }, b: { damage: number; }) => b.damage - a.damage;\n\nexport type EffectSystem = BleedSystem | BurnSystem;\n\nexport abstract class BaseEffectSystem<T extends BaseEffectInstance = BaseEffectInstance> {\n    readonly element: HTMLElement;\n    protected readonly timeSpan: HTMLElement;\n    protected readonly stackSpan: HTMLElement;\n    protected readonly progressBar: ProgressElement;\n    protected _effectInstances: T[] = [];\n    private time = 0;\n    protected sort = <U extends T>(a: U, b: U) => b.time - a.time;\n    constructor(readonly type: EffectType) {\n        this.element = this.createElement();\n        this.timeSpan = this.element.querySelectorStrict('[data-time]');\n        this.stackSpan = this.element.querySelectorStrict('[data-stacks]');\n        this.progressBar = this.element.querySelectorStrict(ProgressElement.name);\n    }\n\n    get effectInstances() {\n        return this._effectInstances;\n    }\n\n    abstract get duration(): number;\n    abstract get maxStacks(): number;\n\n    update() {\n        let maxTime = 0;\n        for (const effectInstance of this._effectInstances) {\n            effectInstance.time = this.duration * effectInstance.timePct;\n            maxTime = Math.max(maxTime, effectInstance.time);\n        }\n    }\n\n    addEffect(effect: T) {\n        this.effectInstances.push(effect);\n        this.time = effect.time;\n        this.update();\n        this.updateElements();\n    }\n\n    removeEffect(effect: T) {\n        this._effectInstances.remove(effect);\n        this.updateElements();\n    }\n\n    clear() {\n        this._effectInstances = [];\n    }\n\n    updateElements() {\n        const stacks = Math.min(this._effectInstances.length, this.maxStacks);\n        const visible = stacks > 0 && this.time > 0;\n        this.element.classList.toggle('hidden', !visible);\n        if (!visible) {\n            return;\n        }\n        this.timeSpan.textContent = `${this.time.toFixed()}s`;\n        this.stackSpan.textContent = stacks.toFixed();\n        const pct = this.time / this.duration;\n        this.progressBar.value = pct;\n    }\n\n    protected dealDamageOverTime(effectInstances: DOTEffectInstance[], dt: number) {\n        const count = Math.min(effectInstances.length, this.maxStacks);\n        for (let i = 0; i < count; i++) {\n            const instance = effectInstances[i];\n            if (!instance) {\n                break;\n            }\n            const damage = instance.damage * dt;\n            combat.dealDamageOverTime(damage, instance.type);\n        }\n    }\n\n    tick(dt: number) {\n        let maxTime = 0;\n        for (let i = this._effectInstances.length - 1; i >= 0; i--) {\n            const effectInstance = this._effectInstances[i];\n            if (!effectInstance) {\n                continue;\n            }\n            effectInstance.time -= dt;\n            maxTime = Math.max(effectInstance.time, maxTime);\n            if (effectInstance.time <= 0) {\n                this.removeEffect(effectInstance);\n            }\n            effectInstance.timePct = effectInstance.time / this.duration;\n        }\n        this.time = Math.min(maxTime, this.duration);\n    }\n\n    private createElement() {\n        const li = document.createElement('li');\n        li.classList.add('hidden', 's-effect');\n        li.insertAdjacentHTML('beforeend', `<div><span>${this.type}</span> | Time: <span data-time></span> | Stacks: <span data-stacks></span></div>`);\n        const progressBar = createCustomElement(ProgressElement);\n        progressBar.classList.add('progress-bar');\n        li.appendChild(progressBar);\n        return li;\n    }\n\n    serialize(): GameSerialization.Effect[] {\n        return this._effectInstances.map(x => ({ type: x.type, timePct: x.timePct, effectivenessFactor: x.effectivenessFactor }));\n    }\n}\n\nexport class BleedSystem extends BaseEffectSystem<DOTEffectInstance> {\n    readonly type = 'Bleed';\n    constructor() {\n        super('Bleed');\n\n        this.sort = sortByDamage;\n    }\n\n    get maxStacks() {\n        return player.stats.maxBleedStackCount.value;\n    }\n    get duration() {\n        return player.stats.bleedDuration.value;\n    }\n\n    update() {\n        super.update();\n        for (const instance of this._effectInstances) {\n            instance.damage = lerp(player.stats.minBleedDamage.value, player.stats.maxBleedDamage.value, instance.effectivenessFactor);\n        }\n        this._effectInstances.sort(this.sort);\n    }\n\n    tick(dt: number) {\n        this.dealDamageOverTime(this._effectInstances, dt);\n        super.tick(dt);\n    }\n}\n\nexport class BurnSystem extends BaseEffectSystem<DOTEffectInstance> {\n    readonly type = 'Burn';\n    constructor() {\n        super('Burn');\n        this.sort = sortByDamage;\n    }\n\n    get maxStacks() {\n        return player.stats.maxBurnStackCount.value;\n    }\n\n    get duration() {\n        return player.stats.burnDuration.value;\n    }\n\n    update() {\n        super.update();\n        for (const instance of this._effectInstances) {\n            instance.damage = lerp(player.stats.minBurnDamage.value, player.stats.maxBurnDamage.value, instance.effectivenessFactor);\n        }\n        this._effectInstances.sort(this.sort);\n    }\n\n    tick(dt: number) {\n        this.dealDamageOverTime(this._effectInstances, dt);\n        super.tick(dt);\n    }\n}\n\nexport interface BaseEffectInstance {\n    type: EffectType;\n    timePct: number;\n    time: number;\n    effectivenessFactor?: number;\n}\n\n\nexport interface DOTEffectInstance extends BaseEffectInstance {\n    type: DOTEffect;\n    effectivenessFactor: number;\n    damage: number;\n}", "import { EventEmitter } from 'src/shared/utils/EventEmitter';\nimport { isString } from 'src/shared/utils/utils';\nimport { combat, gameLoop, gameLoopAnim, player } from '../game';\nimport { type BaseEffectInstance, type BaseEffectSystem, BleedSystem, BurnSystem } from './effectSystems';\nimport type * as GameSerialization from '../serialization';\n\nexport const effectTypes = ['Bleed', 'Burn'] as const;\nexport type EffectType = typeof effectTypes[number];\nexport type AilmentType = Extract<EffectType, 'Bleed' | 'Burn'>;\nexport type DOTEffect = ExtractStrict<EffectType, 'Bleed' | 'Burn'>;\n\nexport class Effects {\n    readonly onEffectChanged = new EventEmitter<EffectType>();\n    private readonly systems = {\n        Bleed: new BleedSystem(),\n        Burn: new BurnSystem(),\n    } as const satisfies Record<EffectType, BaseEffectSystem>;\n\n    init() {\n        gameLoopAnim.registerCallback(() => this.updateElements());\n        gameLoop.registerCallback(dt => this.tick(dt));\n        player.onStatsChange.listen(() => this.updateInstances());\n\n        const effectListContainer = combat.page.querySelectorStrict('[data-effect-list]');\n        effectListContainer.replaceChildren();\n        for (const system of Object.values(this.systems)) {\n            effectListContainer.appendChild(system.element);\n        }\n    }\n\n    setup() {\n        this.updateValues();\n        this.updateElements();\n    }\n    clear() {\n        for (const system of Object.values(this.systems)) {\n            system.clear();\n        }\n    }\n    updateValues() {\n        for (const system of Object.values(this.systems)) {\n            system.update();\n        }\n    }\n    updateElements() {\n        for (const system of Object.values(this.systems)) {\n            system.updateElements();\n        }\n    }\n    hasEffect(type: EffectType) {\n        return this.getSystem(type).effectInstances.length > 0;\n    }\n\n    reset() {\n        this.removeAllEffects();\n    }\n\n    getSystem<T extends keyof typeof this.systems>(type: T): typeof this.systems[T] {\n        const system = this.systems[type];\n        return system;\n    }\n\n    addEffects(...effects: EffectData[]) {\n        for (const effectData of effects) {\n            const system = this.getSystem(effectData.type) as BaseEffectSystem;\n            const instance: BaseEffectInstance = {\n                type: effectData.type,\n                timePct: effectData.timePct || 1,\n                time: 0,\n                effectivenessFactor: effectData.effectivenessFactor\n            };\n            system.addEffect(instance);\n            this.onEffectChanged.invoke(effectData.type);\n        }\n\n        this.updateInstances();\n    }\n\n    clearEffectsByType(types: EffectType[]) {\n        for (const type of types) {\n            const system = this.getSystem(type) as BaseEffectSystem;\n            system.clear();\n            this.onEffectChanged.invoke(type);\n        }\n        player.updateStats();\n        combat.enemy?.updateStats();\n    }\n\n    removeAllEffects() {\n        this.clear();\n        this.updateElements();\n    }\n\n    private updateInstances() {\n        this.updateValues();\n    }\n\n    private tick(dt: number) {\n        for (const system of Object.values(this.systems)) {\n            const instanceCount = system.effectInstances.length;\n            if (instanceCount === 0) {\n                continue;\n            }\n\n            system.tick(dt);\n\n            if (system.effectInstances.length !== instanceCount) {\n                this.onEffectChanged.invoke(system.type);\n            }\n        }\n    }\n\n    serialize(save: GameSerialization.Serialization) {\n        save.effects = { effectList: Object.values(this.systems).flatMap(x => x.serialize()) };\n    }\n\n    deserialize({ effects: save }: GameSerialization.UnsafeSerialization) {\n        if (!save) {\n            return;\n        }\n\n        for (const serializedEffect of save.effectList ?? []) {\n            if (!serializedEffect) {\n                continue;\n            }\n            if (!isString(serializedEffect.type)) {\n                continue;\n            }\n\n            const system = this.getSystem(serializedEffect.type) as BaseEffectSystem;\n            system.effectInstances.push({\n                type: serializedEffect.type,\n                timePct: serializedEffect.timePct || 0,\n                time: 0,\n                effectivenessFactor: serializedEffect.effectivenessFactor\n            });\n        }\n    }\n}\n\nexport type EffectData = BaseEffectData | DOTEffectData;\nexport interface BaseEffectData {\n    type: EffectType;\n    effectivenessFactor?: number;\n    timePct?: number;\n}\nexport type DOTEffectData = BaseEffectData & { type: DOTEffect; effectivenessFactor: number; };", "import type { ConditionFlags, ModifierFlags, StatModConditionTag, StatModifierValueType, StatModTag, StatName } from '../mods/types';\nimport type { ModDB, StatModifier } from '../mods/ModDB';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport { isDefined, hasAnyFlag, hasAllFlags } from 'src/shared/utils/utils';\nimport type { EnemyStatCollection, PlayerStatCollection } from '../statistics/stats';\n\nexport type CalcMinMax = (min: number, max: number) => number;\n\nexport interface Source {\n    stats?: { [key: string]: number; };\n    modDB?: ModDB;\n    conditionFlags?: ConditionFlags;\n}\n\nexport interface PlayerSource extends Omit<Source, 'stats'> {\n    type: 'Player';\n    stats: Record<keyof PlayerStatCollection, number>;\n}\nexport interface EnemySource extends Omit<Source, 'stats'> {\n    type: 'Enemy';\n    stats?: Record<keyof EnemyStatCollection, number>;\n}\n\nexport interface Configuration {\n    source?: Source;\n    target?: Source;\n    flags?: ModifierFlags;\n    reference?: { type: string; name: string; };\n}\n\nexport interface OffenceConfiguration extends Omit<Configuration, 'source' | 'target'> {\n    source: PlayerSource;\n    target?: EnemySource;\n}\n\nexport type PlayerConfiguration = OffenceConfiguration;\nexport type EnemyConfiguration = Omit<Configuration, 'source'> & { source: EnemySource; target?: PlayerSource; };\n\n\nconst isConditionTag = (tag: StatModTag): tag is StatModConditionTag => tag.type === 'Condition';\n\n//#region calcMod\nexport function calcModBase(modName: StatName | StatName[], config: Configuration) {\n    return calcModSum('Base', modName, config);\n}\nexport function calcModInc(modName: StatName | StatName[], config: Configuration) {\n    return Math.max(0, 1 + calcModSum('Inc', modName, config) / 100);\n}\nexport function calcModMore(modName: StatName | StatName[], config: Configuration) {\n    return Math.max(0, calcModSum('More', modName, config));\n}\nexport function calcModIncMore(modName: StatName | StatName[], base: number, config: Configuration) {\n    if (base <= 0) return 0;\n    const inc = calcModInc(modName, config);\n    const more = calcModMore(modName, config);\n    return base * inc * more;\n}\nexport function calcModTotal(modName: StatName | StatName[], config: Configuration) {\n    const base = calcModBase(modName, config);\n    if (base === 0) {\n        return 0;\n    }\n    const inc = calcModInc(modName, config);\n    const more = calcModMore(modName, config);\n    return base * inc * more;\n}\nexport function calcModFlag(modName: StatName, config: Configuration) {\n    return Math.min(calcModSum('Flag', modName, config), 1);\n}\nexport function calcModSum(valueType: StatModifierValueType, names: StatName | StatName[], config: Configuration) {\n    names = Array.isArray(names) ? names : [names]; // force array\n    let result = valueType === 'More' ? 1 : 0;\n\n    const modDB = config.source?.modDB;\n    assertDefined(modDB, 'modDB is undefined');\n    const modList = names.flatMap(x => modDB.getModListByName(x)).filter(isDefined).filter(x => x.valueType === valueType);\n    const override = modList.find(x => x.override);\n    if (isDefined(override)) {\n        return evalMod(override, config) || 0;\n    }\n\n    for (const mod of modList) {\n        const value = evalMod(mod, config);\n        switch (valueType) {\n            case 'More': result *= 1 + (value / 100); break;\n            default: result += value;\n        }\n    }\n    return result;\n}\n\nfunction evalMod(mod: StatModifier, config: Configuration) {\n    if (!hasAllFlags(config.flags || 0, mod.modFlagsAll || 0)) {\n        return 0;\n    }\n    if (!hasAnyFlag(config.flags || 0, mod.modFlagsAny || 0)) {\n        return 0;\n    }\n    if (mod.reference) {\n        if (!config.reference) {\n            return 0;\n        }\n        if (mod.reference.type !== config.reference.type) {\n            return 0;\n        }\n        if (mod.reference.name && mod.reference.name !== config.reference.name) {\n            return 0;\n        }\n    }\n    const conditionsPassed = evalConditions(mod.extends?.filter(isConditionTag) || [], config);\n    if (!conditionsPassed) {\n        return 0;\n    }\n\n    let value = mod.negate ? -mod.value : mod.value;\n    for (const tag of mod.extends || []) {\n        if (tag.type === 'Multiplier') {\n            const multiplier = config.source?.stats?.[tag.statName as keyof typeof config.source.stats] || 1;\n            value *= multiplier;\n        } else if (tag.type === 'PerStat') {\n            value /= tag.value || 1;\n            value /= tag.div || 1;\n            const statValue = config.source?.stats?.[tag.statName as keyof typeof config.source.stats] || 0;\n            value *= statValue;\n        }\n    }\n    return value;\n}\n\nfunction evalConditions(conditions: ReadonlyArray<StatModConditionTag>, config: Configuration) {\n    for (const condition of conditions) {\n        let flag = condition.flagsAny || condition.flagsAll || 0;\n        if (condition.negate) {\n            flag = flag & ~flag;\n        }\n        let targetConditionFlags = 0;\n        switch (condition.target) {\n            case 'Self': targetConditionFlags = config.source?.conditionFlags || 0; break;\n            case 'Other': targetConditionFlags = config.target?.conditionFlags || 0; break;\n        }\n        if (condition.flagsAny !== 0) {\n            if (!hasAnyFlag(targetConditionFlags, flag)) {\n                return false;\n            }\n        } else if (condition.flagsAll !== 0) {\n            if (!hasAllFlags(targetConditionFlags, flag)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n//#endregion calcMod", "import type { DamageType } from '../calc/calcDamage';\nimport type { AilmentType, EffectType } from '../effects/Effects';\nimport type { ReferenceNames } from '../gameConfig/GameConfig';\nimport type { PlayerStatCollection, StatCollection } from '../statistics/stats';\n\n\nexport type StatModifierValueType = 'Base' | 'Inc' | 'More' | 'Flag';\n\nexport type CriticalStatName = 'CriticalHitChance' | 'CriticalHitMultiplier';\n\nexport type StatName =\n    | DamageStatName\n    | 'AttackManaCost'\n    | 'AttackSpeed'\n    | 'HitChance'\n    | CriticalStatName\n    | 'ManaRegen' | 'MaxMana'\n    | `${AilmentType}Stack`\n    | `Base${AilmentType}DamageMultiplier`\n    | `${EffectType}Chance`\n    | `${EffectType}Duration`\n    | Attributes\n    | 'AilmentDuration' | 'LingeringBurn'\n    | 'AuraDuration'\n    | 'AttackSkillCost'\n    | 'MaxArtifact' | 'ArtifactFind'\n    | 'Insight' | 'AuraSlot'\n    | `${'Attack' | 'Aura' | 'Passive'}SkillExpMultiplier`\n    | EnemyStatNames\n    | AreaStatNames\n    | 'ResourceChanceOnEnemyDeath' | 'ResourceAmountOnEnemyDeath'\n    ;\n\nexport type DamageStatName =\n    | 'Damage'\n    | 'MinDamage' | 'MaxDamage'\n    | `Min${DamageType}Damage` | `Max${DamageType}Damage`\n    | `${DamageType}Damage`\n    | 'DamageOverTimeMultiplier'\n    | DamageConvertion | DamageAsExtra;\n\n\n\nexport type DamageConvertion =\n    | 'PhysicalConvertedToElemental'\n    | 'ElementalConvertedToPhysical'\n    | 'PhysicalConvertedToChaos'\n    | 'ElementalConvertedToChaos';\n\nexport type DamageAsExtra =\n    | 'PhysicalAsExtraElemental'\n    | 'ElementalAsExtraChaos'\n    | 'PhysicalAsExtraChaos';\n\nexport type Attributes = 'Attribute' | 'Strength' | 'Dexterity' | 'Intelligence';\n\ntype EnemyStatNames =\n    | 'DamageTaken'\n    | 'Evade'\n    | 'Life';\n\ntype AreaStatNames = 'EnemyCount';\n\n\nexport type StatModTag = StatModConditionTag | StatModMultiplierTag | StatModPerStat;\nexport interface StatModConditionTag {\n    type: 'Condition';\n    target: 'Self' | 'Other';\n    flagsAny?: ConditionFlags;\n    flagsAll?: ConditionFlags;\n    negate?: boolean;\n}\n\nexport interface StatModMultiplierTag {\n    type: 'Multiplier';\n    statName: KeysOfUnion<StatCollection>;\n    limit?: number;\n    div?: number;\n}\n\nexport interface StatModPerStat {\n    type: 'PerStat';\n    statName: keyof PlayerStatCollection;\n    index?: number;\n    value?: number;\n    div?: number;\n}\n\nexport interface ModReference {\n    type: typeof ReferenceNames[number];\n    name?: string;\n}\n\nexport interface ModTemplateStat {\n    name: StatName;\n    valueType: StatModifierValueType;\n    negate?: boolean;\n    override?: boolean;\n    modFlagsAny?: number;\n    modFlagsAll?: number;\n    extends?: ReadonlyArray<StatModTag>;\n    reference?: ModReference;\n}\nexport type ModTemplateTarget = 'Player' | 'Enemy';\nexport interface ModTemplate {\n    desc: string;\n    stats: ReadonlyArray<ModTemplateStat>;\n    id: string;\n}\n\n\nexport enum ModifierFlags {\n    None = 0,\n    Attack = 1 << 0,\n    Physical = 1 << 1,\n    Elemental = 1 << 2,\n    Chaos = 1 << 3,\n    Skill = 1 << 4,\n    Bleed = 1 << 5,\n    Burn = 1 << 6,\n    DOT = ModifierFlags.Bleed | ModifierFlags.Burn,\n    Ailment = 1 << 7\n}\n\nexport enum ConditionFlags {\n    None = 0,\n    Bleed = 1 << 0,\n    Burn = 1 << 1,\n    DOT = ConditionFlags.Bleed | ConditionFlags.Burn\n}\n\nexport type ModifierTag = typeof ModifierTagList[number];\nexport const ModifierTagList = [\n    'Global',\n    'Damage',\n    'DamageOverTime',\n    'Attack',\n    'Physical',\n    'Elemental',\n    'Speed',\n    'Mana',\n    'Critical',\n    'Ailment',\n    'Bleed',\n    'Burn',\n    'Duration',\n    'Skill',\n    'Aura',\n    'Attribute',\n    'Life'\n] as const;", "import { assertDefined } from '../../shared/utils/assert';\nimport { game } from '../game';\nimport type GameConfig from '../gameConfig/GameConfigExport';\nimport type { ModifierTag } from '../mods/types';\n\nexport const compareValueTypes = (v1: number, v2: number): v1 is typeof v2 => typeof v1 === typeof v2;\n\nexport function getFormattedTag(tag: ModifierTag) {\n    return `<span data-tag=\"${tag.toLowerCase()}\">${tag}</span>`;\n}\n\nexport function getResourceByName(name: string) {\n    const id = game.gameConfig.resources.findStrict(x => x.name === name).id;\n    const resource = game.resources[id];\n    assertDefined(resource);\n    return resource;\n}\n\nexport function evalCost(cost: GameConfig.Cost) {\n    const stat = getResourceByName(cost.name);\n    return stat.value >= cost.value;\n}\n\nexport function subtractCost(cost: GameConfig.Cost) {\n    const resource = getResourceByName(cost.name);\n    resource.subtract(cost.value);\n}", "import { clamp, avg, isNumber, isDefined, randomRange } from 'src/shared/utils/utils';\nimport { calcBaseAttackDamage, calcAilmentBaseDamage } from './calcDamage';\nimport { calcModBase, calcModFlag, calcModIncMore, calcModTotal, type Configuration, type EnemyConfiguration, type PlayerConfiguration } from './calcMod';\nimport { ModifierFlags } from '../mods/types';\nimport type { EnemyStatCollection, PlayerStatCollection, StatCollection } from '../statistics/stats';\nimport type { Statistic } from '../statistics/Statistic';\nimport { compareValueTypes } from '../utils/utils';\nimport type { ModDB } from '../mods/ModDB';\nimport type { PlayerUpdateStatsFlag } from '../Player';\nimport type GameConfig from '../gameConfig/GameConfigExport';\n\nexport interface PlayerOptions {\n    flags?: PlayerUpdateStatsFlag;\n    stats: Record<keyof PlayerStatCollection, number>;\n    conditionFlags?: number;\n    modDB: ModDB;\n    enemy?: EnemyOptions;\n}\nexport interface EnemyOptions {\n    stats?: EnemyStatCollection;\n    conditionFlags?: number;\n    modDB?: ModDB;\n}\nexport interface CombatContextOptions {\n    stats: Record<'baseEnemyCount', number>;\n    modDB?: ModDB;\n}\n\nexport function extractStats<T extends StatCollection>(stats: T) {\n    return Object.keys(stats).reduce((a, key) => {\n        const value = stats[key]?.value;\n        if (isNumber(value)) {\n            a[key as keyof typeof stats] = value;\n        }\n        return a;\n    }, {} as Record<keyof T, number>);\n}\n\nexport function applyStatValues<T extends StatCollection>(stats: T, values: Record<keyof T, number>) {\n    for (const key of Object.keys(stats)) {\n        const stat = stats[key] as Statistic;\n        const value = values[key];\n        if (!isDefined(value)) {\n            continue;\n        }\n        if (compareValueTypes(value, stat.value)) {\n            stat.set(value);\n        }\n    }\n}\n\nexport function calcPlayerCombatStats(player: PlayerOptions) {\n    const stats = player.stats;\n    const config: PlayerConfiguration = {\n        source: {\n            type: 'Player',\n            ...player,\n            modDB: player.modDB,\n        }\n    };\n    config.flags = config.flags ?? 0;\n    //Attributes\n    stats.strength = calcModTotal(['Attribute', 'Strength'], config);\n    stats.dexterity = calcModTotal(['Attribute', 'Dexterity'], config);\n    stats.intelligence = calcModTotal(['Attribute', 'Intelligence'], config);\n\n    //Mana\n    stats.maxMana = calcModTotal('MaxMana', config);\n    stats.manaRegeneration = calcModTotal('ManaRegen', config);\n    config.flags |= ModifierFlags.Skill;\n    stats.attackManaCost = calcModTotal('AttackManaCost', config);\n    config.flags &= ~ModifierFlags.Skill;\n\n    //create target\n    if (config.target) {\n        config.target = {\n            type: 'Enemy',\n            stats: extractStats((config.target.stats || {}) as StatCollection),\n            conditionFlags: config.target.conditionFlags,\n            modDB: config.target.modDB\n        };\n    }\n\n    config.flags = ModifierFlags.Attack;\n    //Hit Chance\n    stats.hitChance = calcModBase('HitChance', config) / 100;\n    const clampedHitChance = clamp(stats.hitChance, 0, 1);\n\n    //Attack Speed\n    stats.attackSpeed = calcModTotal('AttackSpeed', config);\n\n    //Crit\n    stats.criticalHitChance = calcModBase('CriticalHitChance', config) / 100;\n    const clampedCritChance = clamp(stats.criticalHitChance, 0, 1);\n    stats.criticalHitMultiplier = (150 + calcModBase('CriticalHitMultiplier', config)) / 100;\n    stats.criticalHitMultiplier = Math.min(stats.criticalHitMultiplier, 100);\n\n\n    let attackDps = 0;\n    {\n        const baseDamageResult = calcBaseAttackDamage(config, avg);\n        const critDamageMultiplier = 1 + (clampedCritChance * (stats.criticalHitMultiplier - 1));\n        attackDps = baseDamageResult.totalBaseDamage * clampedHitChance * stats.attackSpeed * critDamageMultiplier;\n\n        stats.minPhysicalDamage = baseDamageResult.minPhysicalDamage * critDamageMultiplier;\n        stats.maxPhysicalDamage = baseDamageResult.maxPhysicalDamage * critDamageMultiplier;\n        stats.minElementalDamage = baseDamageResult.minElementalDamage * critDamageMultiplier;\n        stats.maxElementalDamage = baseDamageResult.maxElementalDamage * critDamageMultiplier;\n    }\n\n    //bleed\n    let bleedDps = 0;\n    {\n        config.flags = ModifierFlags.Physical | ModifierFlags.Bleed;\n        stats.bleedChanceOnHit = calcModBase('BleedChance', config) / 100;\n        stats.bleedDuration = calcModTotal(['BleedDuration', 'AilmentDuration'], config);\n        stats.maxBleedStackCount = calcModBase('BleedStack', config);\n        const { min, max } = calcAilmentBaseDamage('Physical', config);\n        const stacksPerSecond = clampedHitChance * stats.bleedChanceOnHit * stats.attackSpeed * stats.bleedDuration;\n        const maxStacks = Math.min(stacksPerSecond, stats.maxBleedStackCount);\n        stats.baseBleedDamageMultiplier = calcModTotal('BaseBleedDamageMultiplier', config) / 100;\n        stats.bleedDamageMultiplier = 1 + calcModTotal('DamageOverTimeMultiplier', config) / 100;\n        stats.minBleedDamage = min * stats.baseBleedDamageMultiplier * stats.bleedDamageMultiplier;\n        stats.maxBleedDamage = max * stats.baseBleedDamageMultiplier * stats.bleedDamageMultiplier;\n        const avgDamage = avg(stats.minBleedDamage, stats.maxBleedDamage);\n        bleedDps = avgDamage * maxStacks;\n    }\n\n    //burn\n    let burnDps = 0;\n    {\n        config.flags = ModifierFlags.Elemental | ModifierFlags.Burn;\n        stats.burnChanceOnHit = calcModBase('BurnChance', config) / 100;\n        stats.burnDuration = calcModTotal(['BurnDuration', 'AilmentDuration'], config);\n        stats.maxBurnStackCount = calcModBase('BurnStack', config);\n        const { min, max } = calcAilmentBaseDamage('Elemental', config);\n        const stacksPerSecond = clampedHitChance * stats.burnChanceOnHit * stats.attackSpeed * stats.burnDuration;\n        const maxStacks = Math.min(stacksPerSecond, stats.maxBurnStackCount);\n        stats.baseBurnDamageMultiplier = calcModTotal('BaseBurnDamageMultiplier', config) / 100;\n        stats.burnDamageMultiplier = 1 + calcModTotal('DamageOverTimeMultiplier', config) / 100;\n        stats.minBurnDamage = min * stats.baseBurnDamageMultiplier * stats.burnDamageMultiplier;\n        stats.maxBurnDamage = max * stats.baseBurnDamageMultiplier * stats.burnDamageMultiplier;\n\n        const baseDamage = avg(stats.minBurnDamage, stats.maxBurnDamage);\n        burnDps = baseDamage * maxStacks;\n    }\n\n    const ailmentDps = bleedDps + burnDps;\n\n    stats.dps = (attackDps + ailmentDps);\n\n    config.flags = 0;\n    stats.auraDurationMultiplier = calcModIncMore('AuraDuration', 1, config);\n\n    stats.lingeringBurn = calcModFlag('LingeringBurn', config);\n\n    return stats;\n}\n\nexport function calcPlayerPersistantStats(player: PlayerOptions) {\n    const stats = player.stats;\n    const config: PlayerConfiguration = {\n        source: {\n            type: 'Player',\n            ...player,\n            modDB: player.modDB,\n        }\n    };\n    config.flags = config.flags ?? 0;\n    stats.maxAura = calcModBase('AuraSlot', config);\n    stats.maxArtifacts = calcModBase('MaxArtifact', config);\n    stats.insightCapacity = calcModBase('Insight', config);\n\n    return stats;\n}\n\nexport function calcCombatContextStats(ctx: CombatContextOptions) {\n    const config: Configuration = {\n        flags: 0,\n        source: { modDB: ctx.modDB, stats: ctx.stats }\n    };\n\n    const baseEnemyCount = ctx.stats.baseEnemyCount + calcModBase('EnemyCount', config);\n    const maxEnemyCount = calcModIncMore('EnemyCount', baseEnemyCount, config);\n\n    return { maxEnemyCount };\n}\n\nexport function calcEnemyStats(enemy: EnemyOptions) {\n    const stats = extractStats(enemy.stats || {} as StatCollection);\n    const config: EnemyConfiguration = {\n        flags: 0,\n        source: { type: 'Enemy', conditionFlags: enemy.conditionFlags, stats, modDB: enemy.modDB }\n    };\n\n    const baseLife = stats.baseLife;\n    stats.maxLife = calcModIncMore('Life', baseLife, config);\n\n    stats.evadeChance = calcModBase('Evade', config) / 100;\n    stats.reducedDamageTakenMultiplier = calcModIncMore('DamageTaken', 1, config);\n\n    applyStatValues(enemy.stats || {} as StatCollection, stats);\n}\n\nexport function calcEnemyResourceDrop(enemy: EnemyOptions, resources: GameConfig.Resource[]) {\n    const stats = extractStats(enemy.stats || {} as StatCollection);\n\n    const out: Partial<Record<string, number>> = {};\n    for (const resource of resources) {\n        const config: EnemyConfiguration = {\n            source: { type: 'Enemy', conditionFlags: enemy.conditionFlags, modDB: enemy.modDB, stats },\n            reference: { type: 'Resource', name: resource.name },\n        };\n\n        const resourceChance = calcModTotal('ResourceChanceOnEnemyDeath', config);\n        if (resourceChance >= randomRange(0, 100)) {\n            out[resource.id] = calcModTotal('ResourceAmountOnEnemyDeath', config);\n        }\n    }\n    return out;\n}", "import { type CalcMinMax, calcModBase, calcModIncMore, type OffenceConfiguration, type PlayerConfiguration } from './calcMod';\nimport { ModifierFlags, type DamageStatName, type StatName } from '../mods/types';\nimport { randomRange, lerp } from 'src/shared/utils/utils';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport type { ModDB } from '../mods/ModDB';\nimport { extractStats } from './calcStats';\nimport type { EffectData } from '../effects/Effects';\nimport type { EnemyStatCollection, PlayerStatCollection } from '../statistics/stats';\n\ninterface Player {\n    stats: PlayerStatCollection;\n    modDB: ModDB;\n}\n\ninterface Enemy {\n    stats: EnemyStatCollection;\n    modDB: ModDB;\n}\n\ntype ConversionValues = Partial<Record<keyof typeof DamageTypeFlags | 'multi', number>>;\nexport type ConversionTable = Partial<Record<keyof typeof DamageTypeFlags, ConversionValues>>;\n\nexport const DamageTypes = ['Physical', 'Elemental'] as const;\nexport type DamageType = typeof DamageTypes[number];\ntype DamageFlag = number;\nexport const DamageTypeFlags: Record<DamageType, DamageFlag> = {\n    Physical: 1 << 0,\n    Elemental: 1 << 1,\n} as const;\n\n\nexport interface AttackResult {\n    hit: boolean;\n    crit?: boolean;\n    totalDamage?: number;\n}\n\nconst damageNamesMetaTable = (() => {\n    const names: DamageStatName[][] = [];\n    const length = Object.values(DamageTypeFlags).reduce((a, v) => a + v);\n    for (let i = 0; i <= length; i++) {\n        const flagList: DamageStatName[] = ['Damage'];\n        for (const [key, flag] of Object.entries(DamageTypeFlags)) {\n            if (flag & i) {\n                flagList.push(`${key as keyof typeof DamageTypeFlags}Damage`);\n            }\n        }\n        names.push(flagList);\n    }\n    return names;\n})();\n\nexport function calcAttack(source: Player, enemy: Enemy) {\n\n    const stats = extractStats(source.stats);\n    const enemyStats = extractStats(enemy.stats);\n\n    //Hit\n    const hitChance = stats.hitChance;\n\n    const hitFac = randomRange(0, 1);\n    const hit = hitChance >= hitFac;\n    if (!hit) {\n        return;\n    }\n    const enemyEvade = enemyStats.evadeChance;\n    const evadeFac = randomRange(0, 1);\n    if (evadeFac < enemyEvade) {\n        return;\n    }\n\n    const attackEffectiveness = randomRange(0, 1);\n\n    const critChance = stats.criticalHitChance;\n    const critFac = randomRange(0, 1);\n    const crit = critChance >= critFac;\n\n    //Crit\n    let critMultiplier = 1;\n    if (crit) {\n        critMultiplier = stats.criticalHitMultiplier;\n    }\n\n    //finalize\n    const finalMultiplier = critMultiplier;\n\n    const minPhysicalDamage = stats.minPhysicalDamage;\n    const maxPhysicalDamage = stats.maxPhysicalDamage;\n    const physicalDamage = lerp(minPhysicalDamage, maxPhysicalDamage, attackEffectiveness);\n\n    const minElementalDamage = stats.minElementalDamage;\n    const maxElementalDamage = stats.maxElementalDamage;\n    const elementalDamage = lerp(minElementalDamage, maxElementalDamage, attackEffectiveness);\n\n    const reducedDamageMultiplier = enemy.stats.reducedDamageTakenMultiplier.value;\n\n    const totalDamage = (physicalDamage + elementalDamage) * finalMultiplier * reducedDamageMultiplier;\n\n\n    const effects: EffectData[] = [];\n    //ailments\n    {\n        if (physicalDamage > 0) {\n            //bleed\n            const bleedChance = stats.bleedChanceOnHit;\n            if (bleedChance >= randomRange(0, 1)) {\n                effects.push({ type: 'Bleed', effectivenessFactor: attackEffectiveness });\n            }\n        }\n\n        if (elementalDamage > 0) {\n            //burn\n            const burnChance = stats.burnChanceOnHit;\n            if (burnChance >= randomRange(0, 1)) {\n                effects.push({ type: 'Burn', effectivenessFactor: attackEffectiveness });\n            }\n        }\n    }\n    return {\n        hit,\n        crit,\n        physicalDamage,\n        elementalDamage,\n        totalDamage,\n        effects\n    };\n}\n\nexport function calcBaseAttackDamage(config: PlayerConfiguration, calcMinMax: CalcMinMax) {\n    config.flags = config.flags || 0;\n\n    const conversionTable = generateConversionTable(config);\n    const output = {\n        totalBaseDamage: 0,\n        minPhysicalDamage: 0,\n        maxPhysicalDamage: 0,\n        minElementalDamage: 0,\n        maxElementalDamage: 0\n    };\n\n    const damageMultiplier = config.source.stats.attackEffectiveness / 100;\n    let totalBaseDamage = 0;\n    for (const damageType of Object.keys(DamageTypeFlags) as (keyof typeof DamageTypeFlags)[]) {\n        const bit = ModifierFlags[damageType];\n        config.flags |= bit;\n        let { min, max } = calcDamage(damageType, config, conversionTable);\n        min *= damageMultiplier;\n        max *= damageMultiplier;\n        output[`min${damageType}Damage`] = min;\n        output[`max${damageType}Damage`] = max;\n        const baseDamage = calcMinMax(min, max);\n        totalBaseDamage += baseDamage;\n        config.flags &= ~bit;\n    }\n\n    output.totalBaseDamage = totalBaseDamage;\n    return output;\n}\n\nfunction calcDamage(damageType: DamageType, config: OffenceConfiguration, conversionTable: ConversionTable, damageFlag = 0) {\n\n    damageFlag |= DamageTypeFlags[damageType];\n    let addMin = 0;\n    let addMax = 0;\n    for (const type of DamageTypes) {\n        if (type === damageType) {\n            break;\n        }\n        const conversionValue = conversionTable[type] || {};\n        const convMulti = conversionValue[damageType] || 0;\n        if (convMulti > 0) {\n            const { min, max } = calcDamage(type, config, conversionTable, damageFlag);\n            addMin += min * convMulti;\n            addMax += max * convMulti;\n        }\n    }\n\n    const baseMin = calcModBase('MinDamage', config);\n    const baseMax = calcModBase('MaxDamage', config);\n\n    const modNames = damageNamesMetaTable[damageFlag];\n    assertDefined(modNames);\n    const min = calcModIncMore(modNames, baseMin, config) + addMin;\n    const max = calcModIncMore(modNames, baseMax, config) + addMax;\n    return { min, max };\n}\n\nexport function calcAilmentBaseDamage(damageType: DamageType, config: PlayerConfiguration, typeFlags = 0) {\n    const conversionTable = generateConversionTable(config);\n    let { min, max } = calcDamage(damageType, config, conversionTable, typeFlags);\n    const convMulti = conversionTable[damageType]?.multi || 1;\n    const attackEffectiveness = config.source.stats.attackEffectiveness / 100;\n    min *= attackEffectiveness;\n    max *= attackEffectiveness;\n    return { min: min * convMulti, max: max * convMulti };\n}\n\nfunction generateConversionTable(config: OffenceConfiguration) {\n    type Conversion = Partial<Record<DamageType, number>>;\n    const conversionTable: ConversionTable = {};\n    const damageTypeFlagKeys = Object.keys(DamageTypeFlags) as (keyof typeof DamageTypeFlags)[];\n    for (let i = 0; i < damageTypeFlagKeys.length; i++) {\n        const damageType = damageTypeFlagKeys[i];\n        assertDefined(damageType);\n        const globalConv: Conversion = {};\n        const skillConv: Conversion = {};\n        const add: Conversion = {};\n        let globalTotal = 0;\n        let skillTotal = 0;\n        for (let j = i + 1; j < damageTypeFlagKeys.length; j++) {\n            const otherDamageType = damageTypeFlagKeys[i] as DamageType;\n            const convertedToName = `${damageType}ConvertedTo${otherDamageType}` as DamageStatName;\n            globalConv[otherDamageType] = calcModBase(convertedToName, config);\n\n            globalTotal += (globalConv[otherDamageType] || 0);\n            skillConv[otherDamageType] = calcModBase(convertedToName as StatName, config);\n\n            skillTotal += (skillConv[otherDamageType] || 0);\n            add[otherDamageType] = calcModBase(`${damageType}GainAs${otherDamageType}` as StatName, config);\n        }\n\n        const fac = skillTotal > 100 ? 100 / skillTotal : (100 - skillTotal) / globalTotal;\n        for (const key of Object.keys(skillConv) as DamageType[]) {\n            skillConv[key] = (skillConv[key] || 0) * fac;\n        }\n\n        const conversionValues: ConversionValues = { multi: 1 };\n        for (const key of Object.keys(globalConv) as DamageType[]) {\n            const value = conversionValues[key];\n            const skillConvValue = skillConv[key] || 0;\n            const addValue = add[key] || 0;\n            conversionValues[key] = ((value || 0) + skillConvValue + addValue) / 100;\n        }\n        conversionValues.multi = 1 - Math.min((globalTotal + skillTotal) / 100, 1);\n        conversionTable[damageType] = conversionValues;\n    }\n    return conversionTable;\n}", "import { EventEmitter } from './EventEmitter';\n\nexport type ValueEventType = 'change' | 'set' | 'add' | 'subtract';\ntype Callback = (args: EventEmitterCallbackArgs) => void;\ntype TargetValueCallback = (v: number) => void;\ntype EventEmitterCallbackArgs = { curValue: number; change: number; };\n\nexport class Value {\n    private _value: number;\n    readonly listeners = {\n        change: new EventEmitter<EventEmitterCallbackArgs>,\n        set: new EventEmitter<EventEmitterCallbackArgs>,\n        add: new EventEmitter<EventEmitterCallbackArgs>,\n        subtract: new EventEmitter<EventEmitterCallbackArgs>,\n    } as const;\n    mutated = false;\n    constructor(public defaultValue: number) {\n        this._value = defaultValue;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    set(v: number, silent = false) {\n        if (v === this._value) {\n            return;\n        }\n        this._value = v;\n        if (!silent) {\n            this.listeners.set.invoke({ curValue: this._value, change: v });\n            this.listeners.change.invoke({ curValue: this._value, change: v });\n        }\n        this.mutated = true;\n    }\n\n    add(v: number) {\n        if (v === 0) {\n            return;\n        }\n        this._value += v;\n        this.listeners.add.invoke({ curValue: this._value, change: v });\n        this.listeners.change.invoke({ curValue: this._value, change: v });\n        this.mutated = true;\n    }\n\n    subtract(v: number) {\n        if (v === 0) {\n            return;\n        }\n        this._value -= v;\n        this.listeners.subtract.invoke({ curValue: this._value, change: v });\n        this.listeners.change.invoke({ curValue: this._value, change: v });\n        this.mutated = true;\n    }\n\n    reset() {\n        this.mutated = false;\n        this._value = this.defaultValue;\n        Object.values(this.listeners).forEach(x => x.removeAllListeners());\n    }\n\n    addListener(type: keyof typeof this.listeners, callback: Callback) {\n        this.listeners[type].listen(callback);\n    }\n\n    removeListener(type: keyof typeof this.listeners, callback: Callback) {\n        this.listeners[type].removeListener(callback);\n    }\n\n    registerTargetValueCallback(targetValue: number, callback: TargetValueCallback) {\n        if (this._value >= targetValue) {\n            callback(this._value);\n            return;\n        }\n        const listener = () => {\n            if (this._value >= targetValue) {\n                callback(this._value);\n                this.removeListener('change', listener);\n            }\n        };\n        this.addListener('change', listener);\n    }\n}", "import type { ColorTag } from 'src/shared/types/types';\nimport { Value } from 'src/shared/utils/Value';\nimport { isString } from 'src/shared/utils/utils';\n\nexport interface StatisticOptions {\n    type?: 'number' | 'text' | 'boolean';\n    defaultValue?: number;\n    label?: string;\n    sticky?: boolean;\n    valueColorTag?: ColorTag;\n    computed?: boolean;\n    hiddenBeforeMutation?: boolean;\n    hoverTip?: string;\n    /**@description add() will apply to these stats as well */\n    accumulators?: Statistic[];\n    /**@description Overrides formatting and performs formatting in sequence on array elements, e.g [{@link self}, '/', Statistic] > formattedSelf/formattedOther */\n    statFormat?: (self: Statistic) => (Statistic | string)[];\n\n    decimals?: number;\n    isTime?: boolean;\n    suffix?: '%' | 's';\n    multiplier?: number;\n}\n\nexport class Statistic extends Value {\n    sticky: boolean;\n    texts?: string[];\n    constructor(readonly options: StatisticOptions = {}) {\n        super(options.defaultValue || 0);\n        options.type = options.type || 'number';\n        this.sticky = options.sticky || false;\n        this.mutated = false;\n\n        this.options.accumulators?.forEach(x => this.addAccumulator(x));\n    }\n\n    // static extractEnumType<T extends readonly string[]>(arr: T): T extends readonly (infer U)[] ? U : never {\n    //     return arr as any;\n    // }\n\n    get visible() {\n        if (this.options.hiddenBeforeMutation && !this.mutated) {\n            return false;\n        }\n        return isString(this.options.label);\n    }\n\n    setDefault() {\n        this.set(this.options.defaultValue ?? 0);\n    }\n\n    setText(text: string) {\n        this.texts = this.texts || [];\n        if (!this.texts.includes(text)) {\n            this.texts.push(text);\n        }\n        this.set((this.texts).indexOf(text));\n        this.mutated = true;\n    }\n\n    getText() {\n        return this.texts?.[this.value];\n    }\n\n    reset(): void {\n        super.reset();\n        this.sticky = this.options.sticky || false;\n        this.mutated = false;\n    }\n\n    addAccumulator(stat: Statistic) {\n        this.options.accumulators = this.options.accumulators || [];\n        this.addListener('add', ({ change }) => stat.add(change));\n        this.options.accumulators.push(stat);\n    }\n}", "import { Statistic } from './Statistic';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport type * as GameSerialization from '../serialization';\nimport { isDefined } from 'src/shared/utils/utils';\nimport { compareValueTypes } from '../utils/utils';\nimport type GameConfig from '../gameConfig/GameConfigExport';\n\nexport type StatCollection = Readonly<Record<string, Statistic>>;\nexport type GameStatCollection = ReturnType<typeof createGameStats>;\nexport type PlayerStatCollection = ReturnType<typeof createPlayerStats>;\nexport type EnemyStatCollection = ReturnType<typeof createEnemyStats>;\n\n\nexport function createGameStats(parent?: StatCollection) {\n    const maxLevel = new Statistic();\n    const statList = {\n        timePlayed: new Statistic({ label: 'Time Played', isTime: true }),\n        maxLevel,\n        level: new Statistic({ sticky: true, label: 'Level', defaultValue: 1, statFormat: self => [self, '/', maxLevel] }),\n        world: new Statistic({ defaultValue: 1 }),\n        totalDamage: new Statistic(),\n        totalAttackDamage: new Statistic(),\n        totalDamageOverTime: new Statistic(),\n        totalPhysicalAttackDamage: new Statistic(),\n        totalPhysicalDamage: new Statistic(),\n        totalElementalAttackDamage: new Statistic(),\n        totalElementalDamage: new Statistic(),\n        totalBleedDamage: new Statistic(),\n        totalBurnDamage: new Statistic(),\n        totalHitCount: new Statistic(),\n        totalCriticalHitCount: new Statistic(),\n        totalMana: new Statistic(),\n    };\n    if (parent) {\n        Object.entries(statList).forEach(([statName, stat]) => {\n            const parentStat = parent[statName as keyof typeof parent];\n            assertDefined(parentStat);\n            stat.addAccumulator(parentStat);\n        });\n    }\n    return statList;\n}\n\nexport function createResources(resources: GameConfig.Resource[]) {\n    const resourceStats: Statistic[] = [];\n    for (const resource of resources) {\n        const stat = new Statistic({ label: resource.name, sticky: resource.sticky, hiddenBeforeMutation: resource.hiddenBeforeMutation });\n        resourceStats.push(stat);\n    }\n    return resourceStats.reduce((a, c) => {\n        const key = resources.findStrict(x => x.name === c.options.label).id;\n        a[key] = c;\n        return a;\n    }, {} as Record<string, Statistic>);\n}\n\nexport function createCombatStats() {\n    // const area = new Statistic({ label: 'Area', sticky: true, computed: true, type: 'text' });\n    const maxEnemyCount = new Statistic({ computed: true });\n    const enemyCount = new Statistic({ label: 'Enemies', sticky: true, computed: true, statFormat: (self) => [self, '/', maxEnemyCount] });\n    return {\n        maxEnemyCount,\n        enemyCount\n    };\n}\n\nexport function createPlayerStats(gameStats: GameStatCollection) {\n    const maxMana = new Statistic({ defaultValue: Infinity, computed: true });\n    const minPhysicalDamage = new Statistic({ computed: true });\n    const maxPhysicalDamage = new Statistic({ computed: true });\n    const minElementalDamage = new Statistic({ computed: true });\n    const maxElementalDamage = new Statistic({ computed: true });\n    return {\n        guildClass: new Statistic({ label: 'Player Class', type: 'text', computed: true, hiddenBeforeMutation: true }),\n        dps: new Statistic({ label: 'DPS', sticky: true, computed: true, decimals: 1, hoverTip: 'Damage Per Second' }),\n        totalHitCount: new Statistic({ accumulators: [gameStats.totalHitCount] }),\n        hitChance: new Statistic({ label: 'Hit Chance', sticky: true, computed: true, multiplier: 100, suffix: '%' }),\n        attackSpeed: new Statistic({ label: 'Attack Speed', sticky: true, computed: true, decimals: 2, hoverTip: 'Attacks Per Second' }),\n        attackManaCost: new Statistic({ label: 'Attack Mana Cost', computed: true }),\n        attackEffectiveness: new Statistic({ computed: true }),\n        attackTime: new Statistic(),\n        //Mana\n        maxMana,\n        mana: new Statistic({ label: 'Mana', sticky: true, defaultValue: Infinity, statFormat: (self) => [self, '/', maxMana], accumulators: [gameStats.totalMana] }),\n        manaRegeneration: new Statistic({ label: 'Mana Regeneration', 'decimals': 1, computed: true, sticky: true }),\n\n        //Physical\n        physicalAttackDamage: new Statistic({ label: 'Physical Attack Damage', computed: true, statFormat: () => [minPhysicalDamage, '-', maxPhysicalDamage] }),\n        minPhysicalDamage,\n        maxPhysicalDamage,\n        //Elemental\n        elementalAttackDamage: new Statistic({ label: 'Elemental Attack Damage', computed: true, statFormat: () => [minElementalDamage, '-', maxElementalDamage] }),\n        minElementalDamage,\n        maxElementalDamage,\n        //Crit\n        criticalHitChance: new Statistic({ label: 'Critical Hit Chance', computed: true, multiplier: 100, suffix: '%' }),\n        criticalHitMultiplier: new Statistic({ label: 'Critical Hit Multiplier', computed: true, multiplier: 100, suffix: '%' }),\n        //Bleed\n        bleedChanceOnHit: new Statistic({ label: 'Bleed Chance', computed: true, multiplier: 100, suffix: '%' }),\n        bleedDuration: new Statistic({ label: 'Bleed Duration', computed: true, suffix: 's', decimals: 1 }),\n        maxBleedStackCount: new Statistic({ label: 'Maximum Bleed Stacks', computed: true }),\n        minBleedDamage: new Statistic({ computed: true }),\n        maxBleedDamage: new Statistic({ computed: true }),\n        baseBleedDamageMultiplier: new Statistic({ computed: true }),\n        bleedDamageMultiplier: new Statistic({ computed: true }),\n        //Burn\n        burnChanceOnHit: new Statistic({ label: 'Burn Chance', computed: true, multiplier: 100, suffix: '%' }),\n        burnDuration: new Statistic({ label: 'Burn Duration', computed: true, decimals: 1, suffix: 's', }),\n        maxBurnStackCount: new Statistic({ label: 'Maximum Burn Stacks', computed: true }),\n        baseBurnDamageMultiplier: new Statistic({ computed: true }),\n        burnDamageMultiplier: new Statistic({ computed: true }),\n        minBurnDamage: new Statistic({ computed: true }),\n        maxBurnDamage: new Statistic({ computed: true }),\n        lingeringBurn: new Statistic({ computed: true, type: 'boolean' }),\n\n        //Attributes\n        strength: new Statistic({ label: 'Strength', computed: true }),\n        dexterity: new Statistic({ label: 'Dexterity', computed: true }),\n        intelligence: new Statistic({ label: 'Intelligence', computed: true }),\n\n        //Skills\n        maxAura: new Statistic({ computed: true }),\n        auraDurationMultiplier: new Statistic({ computed: true }),\n        insightCapacity: new Statistic({ computed: true }),\n        maxArtifacts: new Statistic({ computed: true }),\n        guildTokenCount: new Statistic(),\n\n        trainingMultiplier: new Statistic({ defaultValue: 1, computed: true }),\n        explorationMultiplier: new Statistic({ defaultValue: 1, computed: true }),\n        meditationMultiplier: new Statistic({ defaultValue: 1, computed: true }),\n\n    } as const;\n}\n\nexport function createEnemyStats() {\n    return {\n        baseLife: new Statistic({}),\n        maxLife: new Statistic({ label: 'Max Life', sticky: true }),\n        life: new Statistic({ label: 'Life', sticky: true, valueColorTag: 'life' }),\n        evadeChance: new Statistic({ computed: true }),\n        reducedDamageTakenMultiplier: new Statistic({ computed: true }),\n    } as const;\n}\n\nexport function copyStats<T extends StatCollection>(stats: T): Readonly<Record<keyof T, Statistic>> {\n    const copy = Object.entries(stats).reduce((a, [propName, stat]) => {\n        a[propName as keyof T] = new Statistic(stat.options);\n        return a;\n    }, {} as Record<keyof T, Statistic>);\n    return copy;\n}\n\n\nexport function serializeStats<T extends StatCollection, U extends keyof T>(stats: T): Record<U, GameSerialization.Statistic> {\n    const obj: Record<U, GameSerialization.Statistic> = Object.create({});\n    for (const [key, stat] of Object.entries(stats)) {\n        const hasChanged = [(stat.options.sticky || false) !== stat.sticky, !stat.options.computed && stat.mutated].some(x => x);\n        if (!hasChanged) {\n            continue;\n        }\n        obj[key as U] = { sticky: stat.sticky, value: stat.value };\n    }\n    return obj;\n}\n\nexport function deserializeStats(statList: StatCollection, serializedStats: DeepPartial<Record<string, GameSerialization.Statistic>>) {\n    for (const [key, serializedStat] of Object.entries(serializedStats)) {\n        if (!isDefined(serializedStat?.value)) {\n            continue;\n        }\n        const stat = statList[key] as Statistic | undefined;\n        if (!isDefined(stat)) {\n            continue;\n        }\n        if (compareValueTypes(serializedStat.value, stat.value)) {\n            stat.set(serializedStat.value);\n        }\n        if (isDefined(serializedStat.sticky)) {\n            stat.sticky = serializedStat.sticky;\n        }\n    }\n}\n", "import { CustomElement } from './CustomElement';\n\nexport interface ButtonArgs {\n    text: string;\n    type?: 'confirm' | 'utility' | 'cancel';\n    waitId?: string;\n    callback?: () => Promise<void>;\n}\n\nexport class ModalElement extends CustomElement {\n    static readonly name = 'modal-element';\n    set minWidth(v: string) {\n        this.querySelectorStrict<HTMLElement>('[data-body]').style.minWidth = v;\n    }\n\n    get body() {\n        return this.querySelectorStrict('[data-body]');\n    }\n\n    init() {\n        const content = document.createElement('div');\n        content.classList.add('s-content');\n        this.appendChild(content);\n\n        content.insertAdjacentHTML('beforeend', '<div class=\"title hidden\" data-title></div>');\n        content.insertAdjacentHTML('beforeend', '<div class=\"s-body\" data-body></div>');\n        content.insertAdjacentHTML('beforeend', '<div class=\"s-buttons\" data-buttons></div>');\n\n        const backdrop = document.createElement('div');\n        backdrop.classList.add('backdrop');\n        backdrop.addEventListener('mousedown', this.remove.bind(this));\n        this.appendChild(backdrop);\n\n        document.body.appendChild(this);\n\n        if (document.activeElement instanceof HTMLElement) {\n            document.activeElement.blur();\n            this.focus();\n        }\n    }\n\n    setTitle(text: string) {\n        const titleElement = this.querySelectorStrict<HTMLElement>('[data-title]');\n        titleElement.textContent = text;\n        titleElement.classList.toggle('hidden', text.length === 0);\n    }\n\n    setBodyText(text: string) {\n        this.querySelectorStrict<HTMLElement>('[data-body]').textContent = text;\n    }\n\n    addBodyElement(element: HTMLElement) {\n        this.querySelectorStrict<HTMLElement>('[data-body]').appendChild(element);\n    }\n\n    async setButtons<T extends ButtonArgs[], U extends T[number]['waitId']>(buttons: (T[number] & { waitId?: U; })[], align: 'vertical' | 'horizontal' = 'horizontal') {\n        return new Promise<U | undefined>((resolve) => {\n            const buttonElements: HTMLButtonElement[] = [];\n            for (const buttonData of buttons) {\n                const button = document.createElement('button');\n                button.setAttribute('type', 'submit');\n                if (buttonData.type) {\n                    button.setAttribute('data-role', buttonData.type);\n                }\n                button.textContent = buttonData.text;\n                button.addEventListener('click', async () => {\n                    await buttonData.callback?.();\n                    this.remove();\n                    resolve(buttonData.waitId);\n                });\n                buttonElements.push(button);\n            }\n            const buttonsElement = this.querySelectorStrict<HTMLElement>('[data-buttons]');\n            buttonsElement.replaceChildren(...buttonElements);\n            buttonsElement.style.display = 'flex';\n            buttonsElement.style.flexDirection = align === 'horizontal' ? 'column' : 'row';\n        });\n    }\n}", "import type { ModTemplate } from './types';\n\nexport interface CombatContextModTemplate extends ModTemplate {\n    target?: 'Player' | 'Enemy';\n}\n\nexport const combatCtxModTemplateList: ReadonlyArray<CombatContextModTemplate> = [\n    { desc: '#% More Enemy Life', stats: [{ name: 'Life', valueType: 'More' }], target: 'Enemy', id: '0c0148' },\n    { desc: '#% More Enemies', stats: [{ name: 'EnemyCount', valueType: 'More' }], id: 'd4b6e5' },\n    { desc: 'Enemies Drop #% More Resources On Death', stats: [{ name: 'ResourceAmountOnEnemyDeath', valueType: 'Inc', reference: { type: 'Resource' } }], id: '7e7466' },\n] as const satisfies readonly CombatContextModTemplate[];\n", "import { hasAnyFlag } from 'src/shared/utils/utils';\nimport { ModifierFlags, type ModTemplate, type ModTemplateStat, type ModifierTag } from './types';\nimport { modTemplateList } from './modTemplates';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport { Modifier, type ModGroupList } from './Modifier';\n\n\nexport function createModTags(statList: readonly ModTemplateStat[]) {\n    const generateModTags = function* (): Generator<ModifierTag> {\n        for (const stat of statList) {\n            switch (stat.name) {\n                case 'AttackSpeed': yield 'Speed'; break;\n                case 'AilmentDuration':\n                case 'BleedDuration':\n                case 'BurnDuration':\n                    yield 'Duration';\n                    yield 'Ailment';\n                    break;\n                case 'LingeringBurn': yield 'Ailment'; break;\n                case 'Attribute':\n                case 'Strength':\n                case 'Dexterity':\n                case 'Intelligence':\n                    yield 'Attribute';\n                    break;\n                case 'AuraDuration': yield 'Aura'; yield 'Duration'; break;\n                case 'BleedChance': yield 'Bleed'; yield 'Ailment'; break;\n                case 'BleedStack': yield 'Bleed'; break;\n                case 'BurnChance': yield 'Burn'; break;\n                case 'CriticalHitChance':\n                case 'CriticalHitMultiplier':\n                    yield 'Critical';\n                    break;\n                case 'DamageOverTimeMultiplier': yield 'Damage'; break;\n                case 'Damage':\n                case 'MinDamage':\n                case 'MaxDamage':\n                case 'MinPhysicalDamage':\n                case 'MaxPhysicalDamage':\n                case 'MinElementalDamage':\n                case 'MaxElementalDamage':\n                case 'PhysicalDamage':\n                case 'ElementalDamage':\n                    yield 'Damage';\n                    break;\n                case 'ManaRegen':\n                case 'MaxMana':\n                    yield 'Mana';\n                    break;\n            }\n            const flags = (stat.modFlagsAny ?? 0) | (stat.modFlagsAll ?? 0);\n            if (hasAnyFlag(flags, ModifierFlags.Attack)) {\n                yield 'Attack';\n            }\n            if (hasAnyFlag(flags, ModifierFlags.Physical)) {\n                yield 'Physical';\n            }\n            if (hasAnyFlag(flags, ModifierFlags.Elemental)) {\n                yield 'Elemental';\n            }\n            if (hasAnyFlag(flags, ModifierFlags.Bleed)) {\n                yield 'Bleed';\n            }\n            if (hasAnyFlag(flags, ModifierFlags.Burn)) {\n                yield 'Burn';\n            }\n            if (hasAnyFlag(flags, ModifierFlags.DOT)) {\n                yield 'DamageOverTime';\n            }\n            if (hasAnyFlag(flags, ModifierFlags.Ailment)) {\n                yield 'Ailment';\n            }\n        }\n    };\n    return [...new Set(generateModTags())];\n}\n\nexport function sortModifiers(modList: string[] | Modifier[]) {\n    const descriptions = modTemplateList.map(x => x.desc);\n    modList.sort((a, b) => descriptions.indexOf(typeof a === 'string' ? Modifier.getTemplate(a)?.desc ?? '' : a.template.desc) - descriptions.indexOf(typeof b === 'string' ? Modifier.getTemplate(b)?.desc ?? '' : b.template.desc));\n}\n\nexport function extractModifier<T extends ReadonlyArray<ModTemplate>>(list: T, desc: T[number]['desc']) {\n    const template = list.find(x => x.desc === desc);\n    assertDefined(template);\n    return template;\n}\n\nexport function getModGroupList(modText: string, modGroupsList: ModGroupList[], filterName?: string): ModGroupList {\n    const modGroup = modGroupsList.find(x => x.some(x => x.text === modText)) ?? [];\n    return modGroup.filter(x => !x.filter || x.filter.length === 0 || x.filter.some(x => x === filterName));\n}\n\nexport function calcModTier(modText: string, modGroupList: ModGroupList) {\n    const index = modGroupList.map(x => x.text).indexOf(modText);\n    return Math.abs(index - modGroupList.length);\n}\n\n", "import { ModifierFlags, type ModTemplate } from './types';\nimport { extractModifier } from './modUtils';\n\n\nexport const generalPlayerModTemplateList = [\n    { desc: '#% Increased Damage', stats: [{ name: 'Damage', valueType: 'Inc' }], id: '45cb6e' },\n    { desc: '#% Increased Attack Damage', stats: [{ name: 'Damage', valueType: 'Inc', modFlagsAll: ModifierFlags.Attack }], id: '090fda' },\n    { desc: '#% Increased Physical Attack Damage', stats: [{ name: 'Damage', valueType: 'Inc', modFlagsAll: ModifierFlags.Attack | ModifierFlags.Physical }], id: 'b8fdf4' },\n    { desc: '#% Increased Elemental Attack Damage', stats: [{ name: 'Damage', valueType: 'Inc', modFlagsAll: ModifierFlags.Attack | ModifierFlags.Elemental }], id: '556d9d' },\n    { desc: '#% Increased Physical Damage', stats: [{ name: 'Damage', valueType: 'Inc', modFlagsAll: ModifierFlags.Physical }], id: '230cba' },\n    { desc: '#% Increased Elemental Damage', stats: [{ name: 'Damage', valueType: 'Inc', modFlagsAll: ModifierFlags.Elemental }], id: 'a2501d' },\n    { desc: '#% More Attack Damage', stats: [{ name: 'Damage', valueType: 'More', modFlagsAll: ModifierFlags.Attack }], id: 'a8c4ed' },\n    { desc: '#% More Physical Attack Damage', stats: [{ name: 'Damage', valueType: 'More', modFlagsAll: ModifierFlags.Attack | ModifierFlags.Physical }], id: '3f55a8' },\n    { desc: '#% More Elemental Attack Damage', stats: [{ name: 'Damage', valueType: 'More', modFlagsAll: ModifierFlags.Attack | ModifierFlags.Elemental }], id: 'b7e353' },\n    { desc: '#% More Physical Damage', stats: [{ name: 'Damage', valueType: 'More', modFlagsAll: ModifierFlags.Physical }], id: '1acbcd' },\n    { desc: '#% More Elemental Damage', stats: [{ name: 'Damage', valueType: 'More', modFlagsAll: ModifierFlags.Elemental }], id: 'a67808' },\n    { desc: '#% More Damage', stats: [{ name: 'Damage', valueType: 'More' }], id: '647b68' },\n    { desc: 'Adds # To # Physical Damage', stats: [{ name: 'MinDamage', valueType: 'Base', modFlagsAll: ModifierFlags.Physical }, { name: 'MaxDamage', valueType: 'Base', modFlagsAll: ModifierFlags.Physical }], id: '35fe5d' },\n    { desc: 'Adds # To # Elemental Damage', stats: [{ name: 'MinDamage', valueType: 'Base', modFlagsAll: ModifierFlags.Elemental }, { name: 'MaxDamage', valueType: 'Base', modFlagsAll: ModifierFlags.Elemental }], id: 'f798af' },\n    { desc: '#% Increased Attack Speed', stats: [{ name: 'AttackSpeed', valueType: 'Inc' }], id: 'a9714e' },\n    { desc: '#% More Attack Speed', stats: [{ name: 'AttackSpeed', valueType: 'More' }], id: '5fa13d' },\n    { desc: '#% Increased Maximum Mana', stats: [{ name: 'MaxMana', valueType: 'Inc' }], id: '29a502' },\n    { desc: '+# Maximum Mana', stats: [{ name: 'MaxMana', valueType: 'Base' }], id: 'a12998' },\n    { desc: '+# Mana Regeneration', stats: [{ name: 'ManaRegen', valueType: 'Base' }], id: 'b63646' },\n    { desc: '#% Increased Mana Regeneration', stats: [{ name: 'ManaRegen', valueType: 'Inc' }], id: '012b35' },\n    { desc: '+##% Of Maximum Mana Regeneration', stats: [{ name: 'ManaRegen', valueType: 'Base', extends: [{ type: 'PerStat', statName: 'maxMana', div: 100 }] }], id: '6214e1' },\n    { desc: '#% Increased Aura Duration', stats: [{ name: 'AuraDuration', valueType: 'Inc' }], id: '9e1042' },\n\n    { desc: '+#% Chance To Bleed', stats: [{ name: 'BleedChance', valueType: 'Base' }], id: '8d66dc' },\n    { desc: '#% Increased Bleed Damage', stats: [{ name: 'Damage', valueType: 'Inc', modFlagsAll: ModifierFlags.Bleed }], id: '3ef1f1' },\n    { desc: '#% More Bleed Damage', stats: [{ name: 'Damage', valueType: 'More', modFlagsAll: ModifierFlags.Bleed }], id: '3fb3a5' },\n    { desc: '#% Increased Bleed Duration', stats: [{ name: 'BleedDuration', valueType: 'Inc' }], id: 'b2e5e2' },\n    { desc: '+# Maximum Bleed Stack', stats: [{ name: 'BleedStack', valueType: 'Base' }], id: 'e9f87c' },\n    { desc: '+#% Bleed Damage Multiplier', stats: [{ name: 'DamageOverTimeMultiplier', valueType: 'Base', modFlagsAll: ModifierFlags.Bleed }], id: 'aac96b' },\n\n    { desc: '+#% Chance To Burn', stats: [{ name: 'BurnChance', valueType: 'Base' }], id: '6fc5fb' },\n    { desc: '#% Increased Burn Damage', stats: [{ name: 'Damage', valueType: 'Inc', modFlagsAll: ModifierFlags.Burn }], id: '76a311' },\n    { desc: '#% More Burn Damage', stats: [{ name: 'Damage', valueType: 'More', modFlagsAll: ModifierFlags.Burn }], id: 'e04515' },\n    { desc: '#% Increased Burn Duration', stats: [{ name: 'BurnDuration', valueType: 'Inc' }], id: '650378' },\n    { desc: '+# Maximum Burn Stack', stats: [{ name: 'BurnStack', valueType: 'Base' }], id: 'cb3565' },\n    { desc: '+#% Burn Damage Multiplier', stats: [{ name: 'DamageOverTimeMultiplier', valueType: 'Base', modFlagsAll: ModifierFlags.Burn }], id: 'c1c53f' },\n\n    { desc: '+#% Critical Hit Chance', stats: [{ name: 'CriticalHitChance', valueType: 'Base' }], id: '71540b' },\n    { desc: '+#% Critical Hit Multiplier', stats: [{ name: 'CriticalHitMultiplier', valueType: 'Base' }], id: '3ba4ed' },\n\n    { desc: '+#% Hit Chance', stats: [{ name: 'HitChance', valueType: 'Base' }], id: '796465' },\n    { desc: '-#% Hit Chance', stats: [{ name: 'HitChance', valueType: 'Base', negate: true }], id: 'a953ee' },\n    { desc: '#% Increased Ailment Duration', stats: [{ name: 'AilmentDuration', valueType: 'Inc' }], id: '823b17' },\n    { desc: '#% More Damage Over Time', stats: [{ name: 'Damage', valueType: 'More', modFlagsAny: ModifierFlags.DOT }], id: 'b07ed8' },\n\n    { desc: '+# To All Attributes', stats: [{ name: 'Attribute', valueType: 'Base' }], id: '1a540a' },\n    { desc: '+# Strength', stats: [{ name: 'Strength', valueType: 'Base' }], id: 'fa36b3' },\n    { desc: '+# Dexterity', stats: [{ name: 'Dexterity', valueType: 'Base' }], id: 'f15046' },\n    { desc: '+# Intelligence', stats: [{ name: 'Intelligence', valueType: 'Base' }], id: '9382d2' },\n    { desc: '#% Increased Strength', stats: [{ name: 'Strength', valueType: 'Inc' }], id: '30136a' },\n    { desc: '#% Increased Attack Damage Per # Strength', stats: [{ name: 'Damage', valueType: 'Inc', modFlagsAll: ModifierFlags.Attack, extends: [{ type: 'PerStat', statName: 'strength', index: 1 }] }], id: '30330f' },\n    { desc: '#% Increased Dexterity', stats: [{ name: 'Dexterity', valueType: 'Inc' }], id: 'ff267e' },\n    { desc: '#% Increased Attack Speed Per # Dexterity', stats: [{ name: 'AttackSpeed', valueType: 'Inc', extends: [{ type: 'PerStat', statName: 'dexterity', index: 1 }] }], id: 'de97b1' },\n    { desc: '+#% Hit Chance Per # Dexterity', stats: [{ name: 'HitChance', valueType: 'Base', extends: [{ type: 'PerStat', statName: 'dexterity', index: 1 }] }], id: 'a2a83b' },\n    { desc: '+#% Critical Hit Chance Per # Dexterity', stats: [{ name: 'CriticalHitChance', valueType: 'Base', extends: [{ type: 'PerStat', statName: 'dexterity', index: 1 }] }], id: 'a28612' },\n    { desc: '#% Increased Intelligence', stats: [{ name: 'Intelligence', valueType: 'Inc' }], id: 'ed7c87' },\n    { desc: '#% More Increased Mana Per # Intelligence', stats: [{ name: 'MaxMana', valueType: 'Inc', extends: [{ type: 'PerStat', statName: 'intelligence', index: 1 }] }], id: '0f6507' },\n    { desc: '+# Maximum Mana Per # Intelligence', stats: [{ name: 'MaxMana', valueType: 'Base', extends: [{ type: 'PerStat', statName: 'intelligence', index: 1 }] }], id: 'e2fb4f' },\n    { desc: '#% Reduced Mana Cost Of Skills', stats: [{ name: 'AttackSkillCost', valueType: 'Inc', negate: true }], id: 'f8655d' },\n    { desc: '+#% Damage Over Time Multiplier', stats: [{ name: 'DamageOverTimeMultiplier', valueType: 'Base' }], id: '142327' },\n\n    { desc: 'Burn Lingers', stats: [{ name: 'LingeringBurn', valueType: 'Flag' }], id: '5d6b21' },\n\n    { desc: '+#% Increased Attack Skills Experience Gain', stats: [{ name: 'AttackSkillExpMultiplier', valueType: 'Base' }], id: '69ca51' },\n    { desc: '+#% Increased Aura Skills Experience Gain', stats: [{ name: 'AuraSkillExpMultiplier', valueType: 'Base' }], id: '118098' },\n    { desc: '+#% Increased Passive Skills Experience Gain', stats: [{ name: 'PassiveSkillExpMultiplier', valueType: 'Base' }], id: '80ad3c' },\n\n    { desc: '+#% Increased Artifacts Found', stats: [{ name: 'ArtifactFind', valueType: 'Base' }], id: 'fdcab4' } as const,\n] as const satisfies readonly ModTemplate[];\n\n\n//Modifiers which can be assigned but never unassigned\nexport const persistentPlayerModTemplateList = [\n    { desc: '+# Maximum Artifacts', stats: [{ name: 'MaxArtifact', valueType: 'Base' }], id: '51cc9c' } as const,\n    { desc: '+# Additional Aura Slots', stats: [{ name: 'AuraSlot', valueType: 'Base' }], id: '45357c' } as const,\n    { desc: '+# Maximum Insight', stats: [{ name: 'Insight', valueType: 'Base' }], id: '419541' } as const,\n] as const satisfies readonly ModTemplate[];\n\nexport const permanentPlayerModTemplateList = [\n    { desc: '#% Base Bleed Damage Multiplier', stats: [{ name: 'BaseBleedDamageMultiplier', valueType: 'Base', override: true }], id: '01f233' },\n    { desc: '#% Base Burn Damage Multiplier', stats: [{ name: 'BaseBurnDamageMultiplier', valueType: 'Base', override: true }], id: '7519a5' },\n    { desc: '# Base Bleed Duration', stats: [{ name: 'BleedDuration', valueType: 'Base', override: true }], id: '1ec53c' },\n    { desc: '# Base Burn Duration', stats: [{ name: 'BurnDuration', valueType: 'Base', override: true }], id: 'b56e1d' },\n] as const satisfies readonly ModTemplate[];\n\n//Modifiers which can be assigned at start\nexport const playerStartModTemplateList = [\n    extractModifier(permanentPlayerModTemplateList, '#% Base Bleed Damage Multiplier'),\n    extractModifier(permanentPlayerModTemplateList, '# Base Bleed Duration'),\n    extractModifier(permanentPlayerModTemplateList, '#% Base Burn Damage Multiplier'),\n    extractModifier(permanentPlayerModTemplateList, '# Base Burn Duration'),\n    extractModifier(generalPlayerModTemplateList, 'Adds # To # Physical Damage'),\n    extractModifier(generalPlayerModTemplateList, 'Adds # To # Elemental Damage'),\n    extractModifier(generalPlayerModTemplateList, '+# Maximum Bleed Stack'),\n    extractModifier(generalPlayerModTemplateList, '+# Maximum Burn Stack'),\n    extractModifier(generalPlayerModTemplateList, '+# Strength'),\n    extractModifier(generalPlayerModTemplateList, '+# Dexterity'),\n    extractModifier(generalPlayerModTemplateList, '+# Intelligence'),\n    extractModifier(generalPlayerModTemplateList, '#% Increased Attack Damage Per # Strength'),\n    extractModifier(generalPlayerModTemplateList, '#% Increased Attack Speed Per # Dexterity'),\n    extractModifier(generalPlayerModTemplateList, '+#% Hit Chance Per # Dexterity'),\n    extractModifier(generalPlayerModTemplateList, '+#% Critical Hit Chance Per # Dexterity'),\n    extractModifier(generalPlayerModTemplateList, '+# Maximum Mana Per # Intelligence'),\n    extractModifier(generalPlayerModTemplateList, '+# Maximum Mana'),\n    extractModifier(generalPlayerModTemplateList, '+# Mana Regeneration'),\n    extractModifier(generalPlayerModTemplateList, '+##% Of Maximum Mana Regeneration'),\n] as const satisfies readonly ModTemplate[];\n\nexport const playerModTemplateList = [...generalPlayerModTemplateList, ...persistentPlayerModTemplateList, ...permanentPlayerModTemplateList];", "import type { ModTemplate } from './types';\n\n\nexport const enemyModTemplateList = [\n    { desc: '#% Reduced Damage Taken', stats: [{ name: 'DamageTaken', valueType: 'Inc', negate: true }], id: 'b1be9a' },\n    { desc: '+#% Evade Chance', stats: [{ name: 'Evade', valueType: 'Base' }], id: 'e2297b' },\n    { desc: '#% More Life', stats: [{ name: 'Life', valueType: 'More' }], id: 'fbefc9' },\n    { desc: '#% Less Life', stats: [{ name: 'Life', valueType: 'More', negate: true }], id: '6a0379' },\n    { desc: '#% Increased Life', stats: [{ name: 'Life', valueType: 'Inc' }], id: '3d298b' },\n    { desc: '#% Reduced Life', stats: [{ name: 'Life', valueType: 'Inc', negate: true }], id: '7e6b87' },\n    { desc: '#% Chance To Drop # @Resource On Death', stats: [{ name: 'ResourceChanceOnEnemyDeath', valueType: 'Base', reference: { type: 'Resource' } }, { name: 'ResourceAmountOnEnemyDeath', valueType: 'Base', reference: { type: 'Resource' } }], id: '31827b' },\n] as const satisfies readonly ModTemplate[];", "import { type ModTemplate } from './types';\nimport { combatCtxModTemplateList } from './combatCtxModTemplates';\nimport { persistentPlayerModTemplateList, playerModTemplateList } from './playerModTemplates';\nimport { enemyModTemplateList } from './enemyModTemplates';\n\nexport type ModDescription = typeof modTemplateList[number]['desc'];\n\nexport const worldModTemplateList = [\n    ...persistentPlayerModTemplateList,\n    ...combatCtxModTemplateList\n] as const satisfies readonly ModTemplate[];\n\n\nexport const modTemplateList = [\n    ...playerModTemplateList,\n    ...enemyModTemplateList,\n    ...combatCtxModTemplateList,\n];\n", "export const GAME_CONFIG_VERSION = 'v0' as const;\n\nexport type Components = Required<Config>['components'];\nexport type ComponentName = keyof Components;\n\nexport interface Config {\n    version: typeof GAME_CONFIG_VERSION;\n    playerStartModList: PlayerStartModList;\n    resources: Resource[];\n    world: World;\n    components?: {\n        guildHall?: GuildHall;\n        character?: Character;\n        blacksmith?: Blacksmith;\n        treasury?: Treasury;\n        achievements?: Achievements;\n    };\n}\n\nexport interface Requirements {\n    curLevel?: Level;\n    /**@TJS-minimum 1 */\n    world?: UnsignedInteger;\n}\n\nexport interface Resource {\n    id: Id;\n    name: ResourceName;\n    sticky: boolean;\n    hiddenBeforeMutation: boolean;\n}\n\nexport interface Enemy {\n    id: Id;\n    name: Name;\n    level?: LevelRange;\n    world?: LevelRange;\n    weight?: Weight;\n    modList?: EnemyModList;\n}\n\nexport interface World {\n    enemyBaseLifeList: EnemyBaseLifeList;\n    enemyBaseCountList: EnemyBaseCountList;\n    /**@TJS-minItems 1 */\n    enemyList: Enemy[];\n    /**\n     * @TJS-minItems 1\n     * @description Each world is completly independent of one another\n     */\n    worldList: {\n        id: Id;\n        /**@description Each world can have global Area Modifiers applied */\n        modList: WorldModList;\n    }[];\n}\n\nexport interface Blacksmith {\n    levelList?: {\n        upgradeCost?: Cost;\n        modList?: BlacksmithUpgradeModList;\n    }[];\n    /**@TJS-minItems 1 */\n    itemList: {\n        id: Id;\n        name: BlacksmithItemName;\n        reforgeWeights: UnsignedInteger[];\n    }[];\n    modLists: BlacksmithMod[][];\n    crafting: {\n        advancedReforge?: {\n            requirements: { blacksmithLevel: Level; };\n        };\n        craftList: BlacksmithCraft[];\n    };\n}\n\ninterface BlacksmithMod {\n    id: Id;\n    level: Level;\n    weight: Weight;\n    mod: PlayerMod;\n    itemFilter?: BlacksmithItemName[];\n}\nexport interface BlacksmithCraft {\n    desc: BlacksmithCraftDescription;\n    cost?: Cost;\n    successRates: { min: UnsignedInteger; max: UnsignedInteger; };\n}\n\nexport interface Character {\n    levelList?: {\n        upgradeCost?: Cost;\n        modList?: SkillsUpgradeModList;\n    }[];\n    attackSkills?: {\n        /**TJS-minItems 1 */\n        attackSkillList: AttackSkill[];\n    };\n    auraSkills?: {\n        requirements?: { characterLevel: Level; };\n        /**TJS-minItems 1 */\n        auraSkillList: AuraSkill[];\n    };\n    passiveSkills?: {\n        /**TJS-minItems 1 */\n        insightCapacityEnhancerList: {\n            id: Id;\n            name: Name;\n            probability: Probability;\n            insight: UnsignedInteger;\n        }[];\n        /**TJS-minItems 1 */\n        passiveSkillList: PassiveSkill[];\n    };\n}\nexport interface AttackSkill {\n    id: Id;\n    name: Name;\n    /**@description only applies to first rank */\n    requirements?: { characterLevel: Level; };\n    /**@TJS-minItems 1 */\n    rankList: {\n        /**@description 1 exp gained per attack */\n        exp?: Exp;\n        manaCost: UnsignedInteger;\n        /**@TJS-default 1 @TJS-minimum 0.1 */\n        attackSpeed: number;\n        /**@TJS-default 100 */\n        attackEffectiveness: UnsignedInteger;\n        modList: PlayerModList;\n    }[];\n}\nexport interface AuraSkill {\n    id: Id;\n    name: Name;\n    /**@description only applies to first rank */\n    requirements?: { characterLevel: Level; };\n    /**@TJS-minItems 1 */\n    rankList: {\n        /**@description 1 exp gained per attack */\n        exp?: Exp;\n        manaCost: UnsignedInteger;\n        baseDuration: UnsignedInteger;\n        modList: PlayerModList;\n    }[];\n}\nexport interface PassiveSkill {\n    id: Id;\n    name: Name;\n    /**@description only applies to first rank */\n    requirements?: { characterLevel: Level; };\n    insightCost: UnsignedInteger;\n    /**@TJS-minItems 1 */\n    rankList: {\n        /**@description 1 exp gained per attack */\n        exp?: Exp;\n        modList: PlayerModList;\n    }[];\n}\n\nexport interface Treasury {\n    requirements?: Requirements;\n    /**@TJS-minItems 1 */\n    levelList?: {\n        upgradeCost?: Cost;\n        modList?: TreasuryUpgradeModList;\n    }[];\n    artifacts?: Artifacts;\n}\n\nexport interface Artifacts {\n    /**@TJS-minItems 1 */\n    artifactList: Artifact[];\n}\nexport interface Artifact {\n    id: Id;\n    name: Name;\n    probability?: Probability;\n    /**@TJS-minItems 1 */\n    rankList: {\n        /**@description 1 exp everytime its found */\n        exp?: UnsignedInteger;\n        modList: PlayerModList;\n    }[];\n}\n\nexport type GuildName = 'Vanguard' | 'Wanderer' | 'Arcane';\n\nexport interface GuildHall {\n    requirements?: Requirements;\n    levelList?: {\n        upgradeCost?: Cost;\n        modList?: GuildHallModList;\n    }[];\n    guildList: Guild[];\n    guildClassList: GuildClass[];\n}\nexport interface Guild {\n    name: GuildName;\n    modList: PlayerModList;\n}\n\nexport interface GuildClass {\n    id: Id;\n    guildName: GuildName;\n    requirements?: { guildHallLevel: Level; };\n    name: Name;\n    modList: PlayerModList;\n}\n\nexport interface Achievements {\n    achievementList: Achievement[];\n}\nexport interface Achievement {\n    description: AchievementDescription;\n}\n\nexport const SchemaOverrideSymbolNames = [\n    'PlayerMod',\n    'PlayerStartMod',\n    'EnemyMod',\n    'EnemyBaseLife',\n    'EnemyBaseCount',\n    'SkillsUpgradeMod',\n    'BlacksmithUpgradeMod',\n    'BlacksmithCraftDescription',\n    'TreasuryUpgradeMod',\n    'GuildHallMod',\n    'WorldMod',\n    'AchievementDescription'\n] as const satisfies readonly string[];\nexport type SchemaOverrideSymbolName = typeof SchemaOverrideSymbolNames[number];\n\n/**\n * @TJS-type integer\n * @TJS-minimum 0\n */\ntype UnsignedInteger = number;\n\n/**\n * @TJS-type integer\n * @TJS-minimum 1\n * @default 1\n */\ntype Level = number;\n\ninterface LevelRange {\n    min: Level;\n    max?: Level;\n}\n\n/**@$ref #/definitions/Id */\ntype Id = string;\n\n/**\n * @TJS-type integer\n * @TJS-minimum 0\n * @TJS-default 100\n */\ntype Weight = number;\n\n/**\n * @TJS-type integer\n * @TJS-minimum 1\n * @TJS-default 100\n * @TJS-description Percent = 1/Probability\n */\ntype Probability = number;\n\n/**\n * @TJS-type integer\n * @TJS-minimum 1\n * @TJS-default 0\n */\ntype Exp = number;\n\n/**@TJS-pattern ^[A-Za-z 0-9]{3,32}$*/\ntype Name = string;\n\n// /**@pattern ^[A-Za-z .,!?0-9]{3,128}$ */\n// type FlavourText = string;\n\n/**\n * @TJS-type integer\n * @minimum 1\n * @maximum 9007199254740991\n */\ntype EnemyBaseLife = number;\n\n/**\n * @description Enemy life for each level starting at level 1. This will determine the max level. Max Level == array.length + 1.\n * @items {\"$ref\": \"#/definitions/EnemyBaseLife\"}\n*/\ntype EnemyBaseLifeList = EnemyBaseLife[];\n\n/**\n * @TJS-type integer\n * @minimum 1\n * @maximum 9007199254740991\n */\ntype EnemyBaseCount = number;\n\n/**\n * @description Number of enemies for each level starting at level 1\n * @items {\"$ref\": \"#/definitions/EnemyBaseCount\"}\n */\ntype EnemyBaseCountList = EnemyBaseCount[];\n\n/**@$ref #/definitions/PlayerMod */\ntype PlayerMod = string;\n/**@items {\"$ref\": \"#/definitions/PlayerMod\"} */\ntype PlayerModList = PlayerMod[];\n\n/**@$ref #/definitions/PlayerStartMod */\ntype PlayerStartMod = string;\n/**@items {\"$ref\": \"#/definitions/PlayerStartMod\"} */\ntype PlayerStartModList = PlayerStartMod[];\n\n/**@$ref #/definitions/EnemyMod */\ntype EnemyMod = string;\n/**@items {\"$ref\": \"#/definitions/EnemyMod\"}*/\ntype EnemyModList = EnemyMod[];\n\n/**@$ref #/definitions/SkillsUpgradeMod */\ntype SkillsUpgradeMod = string;\n/**@items {\"$ref\": \"#/definitions/SkillsUpgradeMod\"} */\ntype SkillsUpgradeModList = SkillsUpgradeMod[];\n\n/**@$ref #/definitions/BlacksmithUpgradeMod */\ntype BlacksmithUpgradeMod = string;\n/**@items {\"$ref\": \"#/definitions/BlacksmithUpgradeMod\"} */\ntype BlacksmithUpgradeModList = BlacksmithUpgradeMod[];\n\n/**@$ref #/definitions/BlacksmithCraftDescription */\ntype BlacksmithCraftDescription = string;\n\n/**@$ref #/definitions/TreasuryUpgradeMod */\ntype TreasuryUpgradeMod = string;\n/**@items {\"$ref\": \"#/definitions/TreasuryUpgradeMod\"} */\ntype TreasuryUpgradeModList = TreasuryUpgradeMod[];\n\n/**@$ref #/definitions/GuildHallMod */\ntype GuildHallMod = string;\n/**@items {\"$ref\": \"#/definitions/GuildHallMod\"} */\ntype GuildHallModList = GuildHallMod[];\n\n/**@$ref #/definitions/WorldMod */\ntype WorldMod = string;\n/**@items {\"$ref\": \"#/definitions/WorldMod\"} */\ntype WorldModList = WorldMod[];\n\n/**@$ref #/definitions/AchievementDescription */\ntype AchievementDescription = string;\n\n\nexport interface Cost {\n    name: ResourceName;\n    value: UnsignedInteger;\n}\n\nexport const ReferenceNames = ['Resource'] as const;\n\n//User Override\nexport const BlacksmithItemNames = ['Weapon', 'Armour'] as const satisfies readonly Name[];\nexport type BlacksmithItemName = typeof BlacksmithItemNames[number] extends undefined ? Name : typeof BlacksmithItemNames[number];\n\nexport const ResourceNames = ['Gold', 'Silver', 'Copper'] as const satisfies readonly Name[];\nexport type ResourceName = typeof ResourceNames[number] extends undefined ? Name : typeof ResourceNames[number];", "export const ROMAN_NUMERALS = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'] as const;", "import { ReferenceNames } from '../../game/gameConfig/GameConfig';\nimport type { ModReference } from '../../game/mods/types';\nimport { assertDefined } from './assert';\nimport { ROMAN_NUMERALS } from './constants';\n\nexport const numberRangeRegex = /((?<min>[0-9]+(\\.[0-9]+)?)([-](?<max>[0-9]+(\\.[0-9]+)?))?)/;\nexport const integerRangeRegex = /((?<min>[0-9]+)([-](?<max>[0-9]+))?)/;\nexport const numberRegex = /([0-9]+(\\.[0-9]+)?)/;\nexport const integerRegex = /([0]|[1-9][0-9]+)/;\nexport const symbolsRegex = /([-+])/;\nexport const referenceRegex = new RegExp(`@(?<type>${ReferenceNames.join('|')}){(?<name>\\\\w+)}`);\nexport const costRegex = new RegExp(`(?<value>${integerRegex.source}) (?<name>\\\\w+)`);\nexport const rankNumeralsRegex = new RegExp(`\\\\b(?<rank>${ROMAN_NUMERALS.join('|')})$`);\nexport const strToPascal = (str: string) => str[0]?.toLowerCase() + str.replace(/(\\w)(\\w*)/g, (_, g1: string, g2: string) => `${g1.toUpperCase()}${g2.toLowerCase()}`).replaceAll(' ', '').substring(1);\nexport const strToCamel = (str: string) => str.toLowerCase().split(' ').map((v, i) => i === 0 ? v : v[0]?.toUpperCase() + v.substring(1)).join('');\nexport const strToKebab = (str: string) => str.split(' ').join('-').toLowerCase();\nexport const camelToKebab = (str: string) => str.replace(/(?=[A-Z])/g, '-').toLowerCase();\n\nexport function parseTextValues(text: string) {\n    try {\n        const matches = [...text.matchAll(new RegExp(numberRangeRegex, 'g'))];\n        const values = [];\n        for (const match of matches) {\n            assertDefined(match.groups, `failed matching groups on mod: (${text})`);\n            const { min, max } = match.groups;\n            if (!min) {\n                throw Error(`failed matching min value on mod: (${text})`);\n            }\n            values.push({\n                min: parseFloat(min),\n                max: parseFloat(max ?? min),\n                value: parseFloat(min),\n                startIndex: match.index || 0,\n                text: match[0],\n            });\n        }\n        return values;\n    } catch (error) {\n        console.error('parseTextValues failed', text);\n    }\n}\n\nexport function parseTextReferences(text: string): ModReference | undefined {\n    const match = text.match(referenceRegex);\n    const groups = match?.groups;\n    if (!groups) {\n        return;\n    }\n    assertDefined(groups['type']);\n    assertDefined(groups['name']);\n    const type = ReferenceNames.find(x => x === groups['type']);\n    assertDefined(type);\n    const name = groups['name'];\n    return { type, name };\n}\n\nexport function pluralizeWords(text: string) {\n    text = text.replace(/\\b(time)\\b/gi, '$1s');\n    return text;\n}\n\nexport function textContainsRankNumerals(text: string) {\n    return rankNumeralsRegex.test(text);\n}\n\nexport function compareNamesWithNumerals(name1: string, name2: string) {\n    return name1.replace(rankNumeralsRegex, '') === name2.replace(rankNumeralsRegex, '');\n}", "import { type ModReference, type ModTemplate } from './types';\nimport { modTemplateList } from './modTemplates';\nimport { parseTextReferences as parseTextReference, parseTextValues } from 'src/shared/utils/textParsing';\nimport type { StatModifier } from './ModDB';\nimport { clamp, isNumber, randomRangeInt } from 'src/shared/utils/utils';\nimport { assertDefined } from '../../shared/utils/assert';\n\nexport interface PopupOptions {\n    title?: string;\n    fields?: { [key: string]: string; };\n}\nexport interface GroupModOptions {\n    mod: string;\n    levelReq?: number;\n    weight?: number;\n    groups?: GroupModOptions[];\n}\n\nexport interface ModValueRange {\n    min: number;\n    max: number;\n    decimalCount: number;\n    value: number;\n}\n\nexport interface SerializedModifier {\n    srcId: string;\n    values: number[];\n}\n\nexport type ModGroupList = {\n    text: string;\n    filter?: string[];\n}[];\n\nexport class Modifier {\n    weight = 0;\n    constructor(\n        readonly text: string,\n        readonly template: ModTemplate,\n        readonly rangeValues: ModValueRange[],\n        readonly reference?: ModReference) { }\n\n    get desc() {\n        return Modifier.parseDescription(this);\n    }\n\n    get values() {\n        return this.rangeValues.map(x => x.value);\n    }\n\n    private extractStatModifiers() {\n        const stats: StatModifier[] = [];\n        for (const [index, stat] of this.template.stats.entries()) {\n            const value = stat.valueType === 'Flag' ? { value: 1, min: 1, max: 1, decimals: 0 } : this.rangeValues[index];\n            if (!value) {\n                continue;\n            }\n            if (this.reference) {\n                stat.reference = this.reference;\n            }\n            const newStat: StatModifier = { ...stat, ...value };\n            for (const tag of newStat.extends || []) {\n                if (tag.type === 'PerStat') {\n                    const value = this.rangeValues[tag.index || -1]?.value;\n                    tag.value = value;\n                }\n            }\n            stats.push(newStat);\n        }\n        return stats;\n    }\n\n    static extractStatModifierList(...items: Modifier[]) {\n        return items.flatMap(x => x.extractStatModifiers());\n    }\n\n    static toDescription(text: string) {\n        return this.modFromText(text).desc;\n    }\n\n    static parseDescription(mod: Modifier) {\n        const regex = /(@\\w+|#+)/g;\n        let i = 0;\n        const replacer: (_: string, $1: string) => string = (_, $1) => {\n            if ($1.startsWith('@')) {\n                assertDefined(mod.reference?.name, 'mod is missing a name in reference property');\n                return mod.reference.name;\n            } else if ($1.startsWith('#')) {\n                const rangeValue = mod.rangeValues[i++];\n                assertDefined(rangeValue);\n                const { value, decimalCount } = rangeValue;\n                return value.toFixed(decimalCount);\n            }\n            throw new Error(`failed parsing mod description: (${mod.text} > ${mod.template.desc})`);\n        };\n        return mod.template.desc.replace(regex, replacer);\n    }\n\n    static modListFromTexts(texts: string[]) {\n        return texts.map(text => Modifier.modFromText(text)).filter((x): x is Modifier => x instanceof Modifier);\n    }\n\n    static modFromText(text: string) {\n        const template = Modifier.getTemplate(text);\n\n        if (!template) {\n            console.warn(`invalid mod: ${text}`);\n            return Modifier.empty();\n        }\n        const textValues = parseTextValues(text);\n        if (!textValues) {\n            return Modifier.empty();\n        }\n        const valueRanges: ModValueRange[] = [];\n        for (const [i, valueRange] of textValues.entries()) {\n            const decimalCount = Math.max(0, (template.desc.match(/#+/g)?.[i]?.length || 0) - 1);\n            valueRanges.push({ ...valueRange, decimalCount });\n        }\n        const references = parseTextReference(text);\n        return new Modifier(text, template, valueRanges, references);\n    }\n\n    static getTemplate(text: string) {\n        const desc = text.replace(/@(\\w+){\\w+}/, '@$1').replace(/{[^}]+}/g, '#');\n        return modTemplateList.find(x => x.desc.replace(/#+/g, '#').replace(/@\\w+{}/, '') === desc);\n    }\n\n    sort(other: Modifier) {\n        return modTemplateList.findIndex(x => x.desc === this.template.desc) - modTemplateList.findIndex(x => x.desc === other.template.desc);\n    }\n\n    static sort(a: Modifier, b: Modifier) {\n        return a.sort(b);\n    }\n\n    compare(other: Modifier) {\n        return this.template.desc === other.template.desc;\n    }\n\n    static compare(a: Modifier, b: Modifier) {\n        return a.compare(b);\n    }\n\n    copy() {\n        const copy = Modifier.modFromText(this.text);\n        copy.setValues(this.values);\n        return copy;\n    }\n\n    setValues(values: number[]) {\n        if (values.length !== this.rangeValues.length) {\n            console.error(`${this.template.desc} has incompatible stats`);\n            return;\n        }\n        for (let i = 0; i < this.rangeValues.length; i++) {\n            const rangeValue = this.rangeValues[i];\n            if (rangeValue) {\n                rangeValue.value = clamp(values[i] ?? rangeValue.min, rangeValue.min, rangeValue.max);\n            }\n        }\n    }\n\n    randomizeValues() {\n        for (const rangeValue of this.rangeValues) {\n            const pow = Math.pow(10, rangeValue.decimalCount + 1);\n            const min = rangeValue.min * pow;\n            const max = rangeValue.min === rangeValue.max ? min : rangeValue.max * pow + 1 * pow;\n            rangeValue.value = Math.floor(randomRangeInt(min, max) / pow);\n        }\n    }\n\n    static empty() {\n        const template: ModTemplate = { desc: '[Removed]', stats: [], id: '' };\n        return new Modifier(template.desc, template, []);\n    }\n\n    static serialize(...modList: Modifier[]): SerializedModifier[] {\n        return modList.map(x => ({ srcId: x.template.id, values: x.values }));\n    }\n    static deserialize(...modList: (DeepPartial<{ text: string; } & SerializedModifier>)[]): Modifier[] {\n        return modList.reduce((a, c) => {\n            if (!c.text) {\n                return a;\n            }\n            const mod = Modifier.modFromText(c.text);\n            const template = Modifier.getTemplate(c.text);\n            if (template) {\n                mod.setValues((c.values ?? []).filter(isNumber));\n                a.push(mod);\n            }\n            return a;\n        }, [] as Modifier[]);\n    }\n}", "import { isString } from 'src/shared/utils/utils';\nimport { Modifier } from '../mods/Modifier';\nimport { sortModifiers } from '../mods/modUtils';\nimport { createCustomElement } from '../../shared/customElements/customElements';\nimport { ModalElement } from '../../shared/customElements/ModalElement';\nimport type { Value } from '../../shared/utils/Value';\nimport type { Cost } from '../gameConfig/GameConfig';\nimport { evalCost, subtractCost, getResourceByName } from './utils';\nimport { assertDefined } from '../../shared/utils/assert';\n\n\nexport function createModListElement(modList: string[]): HTMLUListElement;\nexport function createModListElement(modList: Modifier[]): HTMLUListElement;\nexport function createModListElement(modList: string[] | Modifier[]) {\n    sortModifiers(modList);\n    const modListElement = document.createElement('ul');\n    modListElement.classList.add('g-mod-list');\n    modListElement.setAttribute('data-mod-list', '');\n    for (const mod of modList) {\n        const desc = isString(mod) ? Modifier.toDescription(mod) : mod.desc;\n        modListElement.insertAdjacentHTML('beforeend', `<li>${desc}</li>`);\n    }\n    return modListElement;\n}\n\nexport interface LevelModalOptions {\n    title: string;\n    info?: string;\n    level: Value;\n    levelData: { upgradeCost?: Cost; modList?: string[]; }[];\n}\nexport function createLevelModal(opts: LevelModalOptions) {\n    const modal = createCustomElement(ModalElement);\n    modal.classList.add('g-level-modal');\n    modal.setTitle(`${opts.title} Lv.${opts.level.value.toFixed()}`);\n\n    if (opts.info) {\n        modal.body.insertAdjacentHTML('beforeend', opts.info);\n    }\n    const levelData = opts.levelData[opts.level.value - 1];\n    assertDefined(levelData);\n\n    if (levelData.modList) {\n        const modListElement = createModListElement(levelData.modList);\n        modal.body.appendChild(modListElement);\n    }\n\n    const upgradeCost = levelData.upgradeCost;\n    if (upgradeCost) {\n        const upgradeButton = document.createElement('button');\n        let text = 'Upgrade';\n        if (upgradeCost.value > 0) {\n            text += `\\n${upgradeCost.value.toFixed()} ${upgradeCost.name}`;\n        }\n        upgradeButton.toggleAttribute('disabled', !evalCost(upgradeCost));\n        upgradeButton.textContent = text;\n        upgradeButton.addEventListener('click', () => {\n            subtractCost(upgradeCost);\n            opts.level.add(1);\n            modal.remove();\n            createLevelModal(opts);\n        });\n        modal.body.appendChild(upgradeButton);\n\n        const callback = () => {\n            upgradeButton.toggleAttribute('disabled', !evalCost(upgradeCost));\n        };\n        const resource = getResourceByName(upgradeCost.name);\n        resource.addListener('change', callback);\n        new IntersectionObserver((entries) => {\n            const entry = entries[0];\n            if (entry?.target === modal && !entry.isIntersecting) {\n                resource.removeListener('change', callback);\n            }\n        }).observe(modal);\n    }\n}\n\nexport async function fadeOut(): Promise<void> {\n    return new Promise((resolve) => {\n        const fadeElement = document.createElement('div');\n        fadeElement.setAttribute('data-fade', '');\n        fadeElement.style.cssText = `\n                position: absolute;\n                inset: 0;\n                background-color: black;\n                z-index: 50;\n                opacity: 0;\n                text-align: center;\n                padding-top: 5em;\n            `;\n        document.body.appendChild(fadeElement);\n        const anim = fadeElement.animate([{ opacity: 0 }, { opacity: 1 }], { duration: 1000, fill: 'forwards' });\n        anim.addEventListener('finish', () => {\n            resolve();\n        });\n    });\n}\n\nexport async function fadeIn(): Promise<void> {\n    return new Promise((resolve) => {\n        const fadeElement = document.body.querySelectorStrict('[data-fade]');\n        const anim = fadeElement.animate([{ opacity: 1 }, { opacity: 0 }], { duration: 1000, fill: 'forwards' });\n        anim.addEventListener('finish', () => {\n            fadeElement.remove();\n            resolve();\n        });\n    });\n}\n\n\nexport interface TitleElementParams {\n    label: string;\n    levelClickCallback?: () => void;\n    helpText?: string | (() => string);\n}\nexport function createTitleElement(params: TitleElementParams) {\n    const titleElement = document.createElement('div');\n    titleElement.classList.add('g-title');\n    if (params.levelClickCallback) {\n        const span = document.createElement('span');\n        span.classList.add('g-clickable-text');\n        span.innerHTML = `${params.label} Lv.<var data-level>1</var>`;\n        span.addEventListener('click', params.levelClickCallback);\n        titleElement.appendChild(span);\n    } else {\n        titleElement.textContent = params.label;\n    }\n\n    if (params.helpText) {\n        const helpIcon = document.createElement('div');\n        helpIcon.classList.add('g-help-icon', 'help-icon');\n        helpIcon.textContent = '?';\n        helpIcon.addEventListener('click', () => {\n            const modal = createCustomElement(ModalElement);\n            modal.setTitle(params.label);\n            const text = isString(params.helpText) ? params.helpText : params.helpText?.() ?? '';\n            modal.setBodyText(text);\n        });\n        titleElement.appendChild(helpIcon);\n    }\n    return titleElement;\n}", "import type { CombatContext as CombatContext } from './CombatContext';\nimport { game, gameLoop, gameLoopAnim, player, statistics } from '../game';\nimport type { Enemy } from './Enemy';\nimport { Effects, effectTypes, type DOTEffect } from '../effects/Effects';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport { calcAttack } from '../calc/calcDamage';\nimport { createCombatStats } from '../statistics/stats';\nimport { EventEmitter } from 'src/shared/utils/EventEmitter';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\nimport { ModalElement } from 'src/shared/customElements/ModalElement';\nimport type { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { calcEnemyResourceDrop } from '../calc/calcStats';\nimport { createModListElement } from '../utils/dom';\n\ninterface CombatEventData {\n    ctx: CombatContext;\n    enemy: Enemy;\n}\n\nexport class Combat {\n    readonly events = {\n        contextChanged: new EventEmitter<{ oldCtx: CombatContext; newCtx: CombatContext | null; }>(),\n        enemyHit: new EventEmitter<CombatEventData>(),\n        enemyDeath: new EventEmitter<CombatEventData>()\n    };\n    readonly stats = createCombatStats();\n    readonly page: HTMLElement;\n    readonly effectHandler: Effects;\n    private lifebarElement: ProgressElement;\n    private attackWaitTime = 0;\n    private autoAttackLoopId?: string;\n    private _ctx: CombatContext | null = null;\n    constructor() {\n        this.page = document.createElement('div');\n        this.page.classList.add('p-combat', 'hidden');\n\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Combat</div>');\n\n        this.lifebarElement = game.page.querySelectorStrict('[data-combat-overview] [data-life-bar]');\n\n        const enemyLabel = game.page.querySelectorStrict('[data-combat-overview] [data-enemy-name]');\n        enemyLabel.addEventListener('click', () => {\n            const modal = createCustomElement(ModalElement);\n            modal.minWidth = '15em';\n            modal.setTitle('Enemy Modifiers');\n            modal.addBodyElement(createModListElement(this.ctx?.enemy.modList ?? []));\n        });\n\n        const effectsElement = document.createElement('fieldset');\n        effectsElement.insertAdjacentHTML('beforeend', '<legend>Effects</legend>');\n        effectsElement.classList.add('s-effects');\n        effectsElement.insertAdjacentHTML('beforeend', '<ul class=\"effect-list\" data-effect-list></ul>');\n        this.page.appendChild(effectsElement);\n\n        //effects relies on\n        this.effectHandler = new Effects();\n\n        game.addPage(this.page, 'Combat', 'combat');\n\n        this.attackLoop = this.attackLoop.bind(this);\n    }\n\n    get ctx() {\n        return this._ctx;\n    }\n\n    get enemy() {\n        return this.ctx?.enemy;\n    }\n\n    private processEnemyDeath() {\n        assertDefined(this._ctx);\n\n        if (game.gameConfig.resources) {\n            const resources = calcEnemyResourceDrop(this._ctx.enemy, game.gameConfig.resources);\n            for (const [id, value] of Object.entries(resources)) {\n                game.resources[id]?.add(value ?? 0);\n                statistics.updateStats('Resources');\n            }\n        }\n\n        const removeBurn = player.stats.lingeringBurn.value === 0;\n        const effectTypesToRemove = [...effectTypes];\n        if (!removeBurn) {\n            effectTypesToRemove.remove('Burn');\n        }\n        this.effectHandler.clearEffectsByType(effectTypesToRemove);\n\n        this.events.enemyDeath.invoke({ ctx: this._ctx, enemy: this._ctx.enemy });\n\n        this._ctx.next();\n        if (this._ctx.completed) {\n            return;\n        }\n\n        player.updateStats();\n\n        this.stats.enemyCount.set(this._ctx.enemyCount);\n\n        this.updateElements();\n        statistics.updateStats('Combat');\n    }\n\n    private updateElements() {\n        this.updateLifebar();\n        game.page.querySelectorStrict('[data-combat-overview] [data-enemy-name]').textContent = this._ctx?.enemy.enemyData.name ?? 'unknown';\n    }\n\n    private startAutoAttack() {\n        const calcAttackTime = () => 1 / player.stats.attackSpeed.value;\n        this.attackWaitTime = calcAttackTime();\n        player.stats.attackSpeed.addListener('change', () => {\n            this.attackWaitTime = calcAttackTime();\n        });\n        this.autoAttackLoopId = gameLoop.registerCallback(this.attackLoop);\n    }\n\n    private stopAutoAttack() {\n        if (this.autoAttackLoopId) {\n            gameLoop.unregister(this.autoAttackLoopId);\n        }\n    }\n\n    private attackLoop(dt: number) {\n        player.stats.attackTime.add(dt);\n        if (player.stats.attackTime.value >= this.attackWaitTime) {\n            const manaCost = player.stats.attackManaCost.value;\n            if (player.stats.mana.value < manaCost) {\n                return;\n            }\n            player.stats.mana.subtract(manaCost);\n            this.performAttack();\n            player.stats.attackTime.set(0);\n        }\n    }\n\n    private performAttack() {\n        assertDefined(this._ctx);\n        const enemy = this.enemy;\n        assertDefined(enemy, 'enemy is undefined');\n\n        const result = calcAttack({ stats: player.stats, modDB: player.modDB }, enemy);\n        if (!result) {\n            return;\n        }\n\n        this.events.enemyHit.invoke({ enemy, ctx: this._ctx });\n\n        game.stats.totalPhysicalAttackDamage.add(result.physicalDamage);\n        game.stats.totalElementalAttackDamage.add(result.elementalDamage);\n        game.stats.totalHitCount.add(1);\n        if (result.crit) {\n            game.stats.totalCriticalHitCount.add(1);\n        }\n\n        this.dealDamage(result.totalDamage);\n        if (result.effects.length > 0) {\n            this.effectHandler.addEffects(...result.effects);\n        }\n    }\n\n    private updateLifebar() {\n        const life = this._ctx?.enemy?.life ?? 0;\n        const maxLife = this._ctx?.enemy?.stats.maxLife.value ?? 0;\n\n        const value = life / maxLife;\n        this.lifebarElement.value = value;\n    }\n\n    private updateLifebarName() {\n        if (this._ctx) {\n            game.page.querySelectorStrict('[data-combat-overview] [data-enemy-name]').textContent = this._ctx.enemy.enemyData.name;\n        }\n        game.page.querySelectorStrict('[data-combat-overview] [data-enemy]').classList.toggle('hidden', !this._ctx);\n    }\n\n    init() {\n        this._ctx = null;\n        statistics.createGroup('Combat', this.stats);\n        this.effectHandler.init();\n        gameLoopAnim.registerCallback(this.updateLifebar.bind(this), { delay: 100 });\n    }\n\n    startCombat(ctx: CombatContext) {\n        if (this.autoAttackLoopId) {\n            this.stopAutoAttack();\n        }\n\n        this._ctx = ctx;\n        this._ctx.active = true;\n\n        this.stats.maxEnemyCount.set(ctx.maxEnemyCount);\n        this.stats.enemyCount.set(ctx.enemyCount);\n        statistics.updateStats('Combat');\n\n        this.updateLifebarName();\n        this.updateElements();\n        this.startAutoAttack();\n    }\n\n    stopCombat(ctx: CombatContext) {\n        if (ctx !== this._ctx) {\n            throw Error('cannot stop combat context as it is not the active context');\n        }\n        this._ctx = null;\n        this.events.contextChanged.invoke({ oldCtx: ctx, newCtx: null });\n        this.effectHandler.removeAllEffects();\n        this.stopAutoAttack();\n        this.updateLifebarName();\n    }\n\n    dealDamageOverTime(damage: number, type: DOTEffect) {\n        this.dealDamage(damage);\n\n        game.stats.totalDamage.add(damage);\n        const damageType = type === 'Bleed' ? 'Physical' : 'Elemental';\n        game.stats[`total${damageType}Damage`].add(damage);\n        game.stats[`total${type}Damage`].add(damage);\n\n        game.stats.totalDamage.add(damage);\n        game.stats[`total${type}Damage`].add(damage);\n        game.stats[`total${damageType}Damage`].add(damage);\n    }\n\n    dealDamage(damage: number) {\n        assertDefined(this._ctx);\n        this._ctx.enemy.life -= damage;\n        if (this._ctx.enemy.life <= 0) {\n            this.processEnemyDeath();\n        }\n    }\n\n    reset() {\n        this._ctx = null;\n        this.effectHandler.reset();\n        Object.values(this.events).forEach(x => x.removeAllListeners());\n        Object.values(this.stats).forEach(x => x.reset());\n    }\n}", "\nimport type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport { game } from '../game';\nimport type { Serialization, UnsafeSerialization } from '../serialization';\n\nexport abstract class Component {\n    readonly page: HTMLElement;\n    constructor(readonly name: GameConfig.ComponentName) {\n        this.page = document.createElement('div');\n        this.page.classList.add(`p-${name}`, 'hidden');\n        game.page.appendChild(this.page);\n    }\n\n    setup?(): void;\n    dispose?(): void;\n    serialize?(save: Serialization): void;\n    deserialize?(save: UnsafeSerialization): void;\n}", "import type { player } from '../game';\nimport type { GameStatCollection } from '../statistics/stats';\n\n\nexport interface TaskTemplate {\n    desc: string;\n    progress: (data: TaskTemplateArgs) => number;\n}\n\nexport interface TaskTemplateArgs {\n    gameStats: GameStatCollection;\n    playerStats: typeof player.stats;\n    value: number;//first element in values\n    values: number[];\n    reference: string;//first element in references\n    references: string[];\n\n}\n\nexport const taskTemplates = [\n    { desc: 'Deal # Total Physical Attack Damage', progress: (data) => data.gameStats.totalPhysicalAttackDamage.value / data.value },\n    { desc: 'Deal # Total Elemental Attack Damage', progress: (data) => data.gameStats.totalElementalAttackDamage.value / data.value },\n    { desc: 'Deal # Total Physical Damage', progress: (data) => data.gameStats.totalPhysicalDamage.value / data.value },\n    { desc: 'Deal # Total Elemental Damage', progress: (data) => data.gameStats.totalElementalDamage.value / data.value },\n    { desc: 'Deal # Total Bleed Damage', progress: (data) => data.gameStats.totalBleedDamage.value / data.value },\n    { desc: 'Deal # Total Burn Damage', progress: (data) => data.gameStats.totalBurnDamage.value / data.value },\n    { desc: 'Perform # Critical Hits', progress: (data) => data.gameStats.totalCriticalHitCount.value / data.value },\n    { desc: 'Regenerate # Mana', progress: (data) => data.gameStats.totalMana.value / data.value },\n] as const satisfies TaskTemplate[];", "import { game, player } from '../game';\nimport { numberRegex, pluralizeWords, referenceRegex } from 'src/shared/utils/textParsing';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport { taskTemplates } from './taskTemplates';\n\nexport interface TextData {\n    values: NumberValue[];\n    references: ReferenceValue[];\n}\nexport interface NumberValue {\n    value: number;\n    indices: [number, number];\n}\nexport interface ReferenceValue {\n    value: string;\n    indices: [number, number];\n}\nexport class Task {\n    public readonly text: string;\n    readonly desc: string;\n    private readonly textData: TextData;\n\n    constructor(text: string) {\n        try {\n            this.text = text;\n\n            //values\n            const extractValues = (): NumberValue[] => {\n                const matches = [...text.matchAll(new RegExp(`\\\\{(${numberRegex.source})\\\\}`, 'gd'))];\n                return matches.map(match => {\n                    const indices = match.indices?.[0];\n                    assertDefined(indices);\n                    assertDefined(match[1]);\n                    const value = parseFloat(match[1]);\n                    return { value, indices };\n                });\n            };\n            const extractReferences = (): ReferenceValue[] => {\n                const matches = [...text.matchAll(new RegExp(referenceRegex.source, 'gd'))];\n                return matches.map(match => {\n                    const indices = match.indices?.[0];\n                    assertDefined(indices);\n                    assertDefined(match[2]);\n                    const value = match[2];\n                    return { value, indices };\n                });\n            };\n\n            this.textData = {\n                values: extractValues(),\n                references: extractReferences()\n            };\n\n            this.desc = text.replace(/{[^}]+}/g, '#').replace(/@(\\w+)({[^}]+})/g, '@$1');\n        } catch (error) {\n            console.error(error);\n            throw new Error(`invalid task description: ${text}`);\n        }\n    }\n\n    get completed() {\n        return this.getProgess() >= 1;\n    }\n\n    get pct() {\n        return Math.min(this.getProgess(), 1);\n    }\n\n    getProgess() {\n        const template = taskTemplates.find(x => x.desc === pluralizeWords(this.desc));\n        assertDefined(template, 'invalid description');\n        const values = this.textData.values.map(x => x.value);\n        const references = this.textData.references.map(x => x.value);\n        const pct = template.progress({\n            gameStats: game.stats,\n            playerStats: player.stats,\n            value: values[0] ?? 0,\n            values,\n            reference: references[0] ?? '',\n            references: references\n        });\n        return pct;\n    }\n\n    createHTML(): string {\n        let offset = 0;\n        const html = [...this.textData.values, ...this.textData.references].sort((a, b) => a.indices[0] - b.indices[0]).reduce((a, c) => {\n            a += this.text.substring(offset, c.indices[0]).concat(`<var data-type=\"${typeof c.value}\">${c.value.toString()}</var>`);\n            offset = c.indices[1];\n            return a;\n        }, '').concat(this.text.substring(offset));\n        return `<div>${html}</div>`;\n    }\n}", "import { Component } from '../Component';\nimport { game } from '../../game';\nimport { Task } from '../../tasks/Task';\nimport { parseTextValues } from 'src/shared/utils/textParsing';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport type * as GameConfig from 'src/game/gameConfig/GameConfig';\n\n\nexport class Achievements extends Component {\n    readonly achievements: Achievement[] = [];\n    constructor(readonly data: GameConfig.Achievements) {\n        super('achievements');\n\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Achievements</div>');\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"g-scroll-list-v\" data-achievement-list></ul>');\n\n        const container = this.page.querySelectorStrict('[data-achievement-list]');\n        for (const achievementData of data.achievementList) {\n            const achievement = new Achievement(this, achievementData);\n            container.appendChild(achievement.element);\n            // achievement.updateLabel();\n            this.achievements.push(achievement);\n            // achievement.tryCompletion();\n        }\n\n        setTimeout(() => {\n            this.achievements.forEach(x => {\n                x.updateLabel();\n                x.tryCompletion();\n            });\n        }, 1);\n\n        game.tickSecondsEvent.listen(() => {\n            const visible = !this.page.classList.contains('hidden');\n            this.achievements.forEach(x => {\n                x.tryCompletion();\n                if (visible) {\n                    x.updateLabel();\n                }\n            });\n        });\n    }\n}\n\nclass Achievement {\n    readonly task: Task;\n    readonly element: HTMLElement;\n    private completed = false;\n    constructor(readonly achievements: Achievements, readonly data: GameConfig.Achievement) {\n        this.task = new Task(data.description);\n        this.element = this.createElement();\n    }\n    get taskCompleted() {\n        return this.task.completed;\n    }\n    tryCompletion() {\n        if (!this.taskCompleted || this.completed) {\n            return;\n        }\n\n        this.updateLabel();\n        this.completed = true;\n\n        this.element.querySelectorStrict('[data-pct]').setAttribute('data-valid', '');\n    }\n\n    updateLabel() {\n        if (this.completed) {\n            return;\n        }\n        this.element.querySelectorStrict('[data-pct]').textContent = `${(this.task.pct * 100).toFixed()}%`;\n    }\n\n    private createElement() {\n        const element = document.createElement('div');\n        element.classList.add('s-achievement', 'g-field');\n\n        const textData = parseTextValues(this.task.text)?.[0];\n        assertDefined(textData);\n\n        element.insertAdjacentHTML('beforeend', this.task.createHTML());\n        element.insertAdjacentHTML('beforeend', '<var data-pct></var>');\n\n        return element;\n    }\n}", "import { game } from 'src/game/game';\nimport { CustomElement } from './CustomElement';\n\nexport class TextInputDropdownElement extends CustomElement {\n    static readonly name = 'text-input-dropdown-element';\n    readonly input: HTMLInputElement;\n    private prevValue?: string;\n    private inputAnchor: 'top left' | 'top right' | 'bottom right' | 'bottom left' = 'bottom left';\n    private boxAnchor: 'top left' | 'top right' | 'bottom right' | 'bottom left' = 'top left';\n    private dropdownList: string[] = [];\n    private abortController?: AbortController;\n    validator = (text: string) => text.length > 0 ? this.dropdownList.includes(text) : true;\n    onInputChange?: (args: { text: string; index: number; valid: boolean; }) => void;\n    onInputOpen?: () => void;\n\n    constructor() {\n        super();\n\n        this.input = document.createElement('input');\n        this.input.setAttribute('spellcheck', 'false');\n        this.input.setAttribute('type', 'text');\n        this.input.addEventListener('mouseup', (e) => {\n            e.stopPropagation();\n            if (!this.isOpen) {\n                this.openContent();\n            } else {\n                this.closeDropdownContentElement();\n            }\n        }, { capture: true });\n        this.input.addEventListener('input', () => {\n            for (const child of this.dropdownContentElement.children) {\n                const include = child.textContent?.toLowerCase().includes(this.input.value.toLowerCase());\n                child.classList.toggle('hidden', !include);\n            }\n        });\n\n        this.closeDropdownContentElement = this.closeDropdownContentElement.bind(this);\n        this.updateDropdownContentElementPosition = this.updateDropdownContentElementPosition.bind(this);\n    }\n\n    get validText() {\n        return this.validator(this.input.value);\n    }\n\n    get dropdownContentElement() {\n        return this.querySelector<HTMLElement>('[data-dropdown-content]') ?? this.createDropdownContentElement();\n    }\n\n    get isOpen() {\n        return !this.dropdownContentElement.classList.contains('hidden');\n    }\n\n    private createDropdownContentElement() {\n        const element = document.createElement('div');\n        element.classList.add('s-dropdown-content', 'hidden');\n        element.setAttribute('data-dropdown-content', '');\n        // window.addEventListener('resize', this.updateDropdownContentElementPosition.bind(this));\n        this.appendChild(element);\n        return element;\n    }\n\n    private updateBackgroundState() {\n        const valid = this.validator(this.input.value);\n        this.setAttribute('data-state', valid ? 'valid' : 'invalid');\n    }\n\n    private openContent() {\n        this.onInputOpen?.();\n        const elements: HTMLElement[] = [];\n        for (const item of this.dropdownList || []) {\n            const li = document.createElement('li');\n            li.classList.add('g-list-item');\n            li.textContent = item;\n\n            li.addEventListener('mouseup', () => {\n                this.input.value = li.textContent || '';\n                this.input.dispatchEvent(new Event('change', { bubbles: true }));\n                this.closeDropdownContentElement();\n            }, { capture: true });\n            elements.push(li);\n        }\n        this.dropdownContentElement.replaceChildren(...elements);\n        this.dropdownContentElement.classList.toggle('hidden', elements.length === 0);\n        this.appendChild(this.dropdownContentElement);\n        if (elements.length > 0) {\n            this.abortController = new AbortController();\n            this.updateDropdownContentElementPosition();\n            document.addEventListener('mouseup', e => {\n                if (e.currentTarget !== this) {\n                    this.closeDropdownContentElement();\n                }\n            }, { signal: this.abortController.signal });\n            // window.addEventListener('resize', this.updateDropdownContentElementPosition, { signal: this.abortController.signal });\n        }\n        this.dropdownContentElement.style.width = CSS.px(Math.max(this.clientWidth, this.dropdownContentElement.getBoundingClientRect().width)).toString();\n    }\n\n    private closeDropdownContentElement(e?: MouseEvent) {\n        if (e?.target instanceof Element) {\n            if (this.contains(e.target)) {\n                return;\n            }\n            if (e.target.tagName.toLowerCase() !== 'input') {\n                e.stopPropagation();\n            }\n        }\n        this.dropdownContentElement.remove();\n        this.abortController?.abort();\n\n        this.updateBackgroundState();\n        if (this.prevValue !== this.input.value) {\n            this.prevValue = this.input.value;\n            this.onInputChange?.({ text: this.input.value, index: this.dropdownList.indexOf(this.input.value), valid: this.validText });\n        }\n    }\n\n    private updateDropdownContentElementPosition() {\n        const inputRect = this.input.getBoundingClientRect();\n        const boxRect = this.dropdownContentElement.getBoundingClientRect();\n\n        let left = inputRect.left;\n        let top = inputRect.top;\n\n        //inputAnchor = bottom left boxAnchor = top left\n        if (this.inputAnchor.includes('bottom')) {\n            top += inputRect.height;\n        }\n        if (this.inputAnchor.includes('right')) {\n            left += inputRect.width;\n        }\n\n        if (this.boxAnchor.includes('bottom')) {\n            top -= boxRect.height;\n        }\n        if (this.boxAnchor.includes('right')) {\n            left -= boxRect.width;\n        }\n\n        left = Number.isFinite(left) ? left : 0;\n        top = Number.isFinite(top) ? top : 0;\n\n        //TODO: position dropdown content element dynamically\n\n        this.dropdownContentElement.style.left = CSS.px(left + 4).toString();\n        this.dropdownContentElement.style.top = CSS.px(top + 6).toString();\n\n        const newBoxRect = this.dropdownContentElement.getBoundingClientRect();\n        const maxHeight = game.page.getBoundingClientRect().bottom - newBoxRect.top;\n\n        this.dropdownContentElement.style.maxHeight = CSS.px(Number.isFinite(maxHeight) ? maxHeight : 0).toString();\n    }\n\n    init() {\n        this.replaceChildren(this.input);\n    }\n\n    setReadonly(state = true) {\n        this.input.toggleAttribute('readonly', state);\n    }\n\n    setInputText<T extends string>(text?: T) {\n        this.input.value = text ?? '';\n        this.prevValue = this.input.value;\n    }\n\n    setDropdownList(items: string[]) {\n        this.dropdownList = items;\n        const value = items[0];\n        if (!this.input.value) {\n            this.setInputText(value);\n        }\n    }\n\n    setInputAnchor(position: typeof this.inputAnchor) {\n        this.inputAnchor = position;\n        this.updateDropdownContentElementPosition();\n    }\n\n    setBoxAnchor(position: typeof this.boxAnchor) {\n        this.boxAnchor = position;\n        this.updateDropdownContentElementPosition();\n    }\n\n    validate() {\n        this.updateBackgroundState();\n    }\n}", "import { createCustomElement } from '../../shared/customElements/customElements';\nimport { TextInputDropdownElement } from '../../shared/customElements/TextInputDropdownElement';\nimport { assertDefined } from '../../shared/utils/assert';\nimport { ROMAN_NUMERALS } from '../../shared/utils/constants';\nimport { rankNumeralsRegex } from '../../shared/utils/textParsing';\nimport { clamp } from '../../shared/utils/utils';\nimport { createAssignableObject, type AssignableObject, type AssignableObjectInitData } from './objectUtils';\n\nexport interface RankObjectData {\n    exp?: number;\n}\n\nexport interface RankObject<Data extends RankObjectData = RankObjectData> extends AssignableObject {\n    curExp: number;\n    maxExp: number;\n    selectedRank: number;\n    curRank: number;\n    maxRank: number;\n    rankList: Data[];\n    rankData: (rank: number) => Data;\n}\n\nexport interface RankObjectInitData<Data extends RankObjectData> extends AssignableObjectInitData {\n    rankList: Data[];\n}\nexport function createRankObject<T extends RankObjectData>(data: RankObjectInitData<T>): RankObject<T> {\n    const rankData = data.rankList[0];\n    assertDefined(rankData, 'rankList must contain at last 1 item');\n    const rankObject: RankObject<T> = {\n        ...createAssignableObject(data),\n        curExp: 0,\n        maxExp: rankData.exp ?? 0,\n        selectedRank: 1,\n        curRank: 1,\n        maxRank: 1,\n        rankList: data.rankList,\n        rankData: (rank: number) => {\n            const rankData = rankObject.rankList[rank - 1];\n            assertDefined(rankData, 'rank is outside the range of rankList');\n            return rankData;\n        }\n    };\n    updateRankObjectListItemElement(rankObject);\n    return rankObject;\n}\n\nexport function getRankName(obj: RankObject) {\n    obj.curRank = clamp(obj.curRank, 1, obj.rankList.length);\n    const rankNumeral = ROMAN_NUMERALS[obj.curRank - 1];\n    return `${obj.name} ${rankNumeral}`;\n}\n\nexport function getRankNumeral(name: string) {\n    const rank = rankNumeralsRegex.exec(name)?.groups?.['rank'];\n    const index = ROMAN_NUMERALS.findIndex(x => x === rank);\n    return ROMAN_NUMERALS[index];\n}\n\nexport function getNextObjectRankNumeral(text: string) {\n    const rankNumeral = getRankNumeral(text);\n    return rankNumeral ? ROMAN_NUMERALS[ROMAN_NUMERALS.indexOf(rankNumeral) + 1] : undefined;\n}\n\nexport function tryUnlockNextRank(rankObj: RankObject) {\n    if (rankObj.maxRank >= rankObj.rankList.length) {\n        return false;\n    }\n    rankObj.maxRank = rankObj.curRank + 1;\n    const data = rankObj.rankList[rankObj.maxRank - 1];\n    assertDefined(data, 'maxRank outside the bounds of rankList');\n    rankObj.curExp = 0;\n    rankObj.maxExp = data.exp ?? 0;\n    updateRankObjectListItemElement(rankObj);\n    return true;\n}\n\nexport function updateRankObjectListItemElement(rankObj: RankObject) {\n    const nameText = rankObj.name;\n    const rankText = rankObj.rankList.length > 1 ? ` ${ROMAN_NUMERALS[rankObj.curRank - 1]}` : undefined;\n    const rankIndicator = rankText && rankObj.assigned ? `${rankObj.curRank !== rankObj.maxRank ? '^' : ''}` : '';\n    rankObj.element.textContent = `${nameText}${rankText}${rankIndicator}`;\n    if (rankObj.assigned) {\n        rankObj.element.setAttribute('data-tag', 'valid');\n    } else {\n        rankObj.element.removeAttribute('data-tag');\n    }\n}\n\nexport function setNextRank(rankObj: RankObject) {\n    rankObj.curRank = clamp(rankObj.curRank + 1, 1, rankObj.rankList.length);\n}\n\nexport function getRankExpPct(rankObj: RankObject) {\n    if (rankObj.selectedRank < rankObj.maxRank) {\n        return 1;\n    }\n    return rankObj.curExp / rankObj.maxExp;\n}\n\n\nexport function addRankExp(rankObj: RankObject, multiplier: number) {\n    if (rankObj.curExp >= rankObj.maxExp) {\n        rankObj.curExp = rankObj.maxExp;\n        return;\n    }\n    rankObj.curExp += 1 * multiplier;\n    if (rankObj.curExp >= rankObj.maxExp) {\n        rankObj.curExp = rankObj.maxExp;\n    }\n}\n\nexport function createRankDropdown<T extends RankObject>(rankObj: T, callback: (obj: T) => void) {\n    const element = createCustomElement(TextInputDropdownElement);\n    element.setReadonly();\n    const updateDropdownList = () => {\n        element.setDropdownList(rankObj.rankList.slice(0, rankObj.maxRank).map((_, i) => `${rankObj.name} ${ROMAN_NUMERALS[i]}`));\n        element.setInputText(`${rankObj.name} ${ROMAN_NUMERALS[rankObj.selectedRank - 1]}`);\n    };\n    updateDropdownList();\n\n    element.onInputOpen = () => {\n        updateDropdownList();\n    };\n    element.onInputChange = ({ index }) => {\n        rankObj.selectedRank = index + 1;\n        callback(rankObj);\n    };\n    return element;\n}\n\nexport function deserializeRankObject(rankObj: RankObject, data: { curRank?: number; maxRank?: number; expFac?: number; }) {\n    rankObj.curRank = data.curRank ?? 1;\n    rankObj.maxRank = data.maxRank ?? 1;\n    rankObj.selectedRank = rankObj.curRank;\n    rankObj.maxExp = rankObj.rankData(rankObj.maxRank).exp ?? 0;\n    rankObj.curExp = rankObj.maxExp * (data.expFac ?? 0);\n}", "import { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\nimport { createModListElement } from './dom';\nimport { isDefined } from 'src/shared/utils/utils';\nimport type { TextInputDropdownElement } from '../../shared/customElements/TextInputDropdownElement';\nimport { createRankDropdown, getRankExpPct, type RankObject } from './rankObjectUtils';\n\nexport interface AssignableObject {\n    id: string;\n    name: string;\n    assigned: boolean;\n    selected: boolean;\n    unlocked: boolean;\n    element: HTMLElement;\n}\n\nexport interface ObjectInfo<T extends RankObject = RankObject> {\n    name: string;\n    propertyList?: string[][];\n    modList?: string[];\n    rankObj?: T;\n    onRankChange?: (obj: T) => void;\n}\n\nexport interface AssignableObjectInitData {\n    id: string;\n    name: string;\n}\n\nexport function createAssignableObject(data: AssignableObjectInitData): AssignableObject {\n    return {\n        id: data.id,\n        name: data.name,\n        selected: false,\n        unlocked: false,\n        assigned: false,\n        element: createObjectListElement({ id: data.id, name: data.name }),\n    };\n}\n\nexport function createObjectListElement(obj: Pick<AssignableObject, 'id' | 'name'>): HTMLElement {\n    const element = document.createElement('li');\n    element.classList.add('g-list-item', 'hidden');\n    element.setAttribute('data-id', obj.id);\n    element.textContent = obj.name;\n    return element;\n}\n\n\nexport function createObjectPropertyElement(propertyList: string[][]) {\n    const element = document.createElement('ul');\n    element.setAttribute('data-property-list', '');\n    for (const [key, value] of propertyList) {\n        element.insertAdjacentHTML('beforeend', `<li class=\"g-field\"><div>${key}</div><div>${value}<div></li>`);\n    }\n    return element;\n}\n\nexport function createObjectInfoElements<T extends RankObject>(objInfo: ObjectInfo<T>) {\n    const element = document.createElement('div');\n    element.classList.add('g-item-info');\n    element.setAttribute('data-item-info', '');\n\n    const titleElement = document.createElement('div');\n    titleElement.classList.add('g-title');\n    titleElement.textContent = objInfo.name;\n\n    const contentElement = document.createElement('div');\n    contentElement.classList.add('s-content');\n    contentElement.setAttribute('data-content', '');\n\n    let rankDropdownElement: TextInputDropdownElement | undefined = undefined;\n    if (objInfo.rankObj && objInfo.onRankChange) {\n        rankDropdownElement = createRankDropdown(objInfo.rankObj, objInfo.onRankChange);\n    }\n\n    const propertyListElement = objInfo.propertyList ? createObjectPropertyElement(objInfo.propertyList) : undefined;\n\n    const modListElement = objInfo.modList ? createModListElement(objInfo.modList) : undefined;\n\n    let expBar: ProgressElement | undefined = undefined;\n    if (objInfo.rankObj && objInfo.rankObj.rankData(objInfo.rankObj.selectedRank).exp) {\n        expBar = createCustomElement(ProgressElement);\n        expBar.value = getRankExpPct(objInfo.rankObj);\n    }\n\n    contentElement.append(...Object.values([rankDropdownElement, propertyListElement, modListElement, expBar].filter(isDefined)));\n\n    element.append(titleElement, contentElement);\n    return { element, titleElement, contentElement, rankDropdownElement, propertyListElement, modListElement, expBar };\n}\n\nexport function unlockObject(obj: AssignableObject) {\n    obj.unlocked = true;\n    obj.element.classList.remove('hidden');\n    obj.element.removeAttribute('disabled');\n}", "import type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport { updateRankObjectListItemElement, type RankObject, type RankObjectData } from '../../utils/rankObjectUtils';\n\nexport type AttackSkill = { type: 'Attack'; } & BaseSkill<GameConfig.AttackSkill['rankList'][number]>;\nexport type AuraSkill = { type: 'Aura'; } & BaseSkill<GameConfig.AuraSkill['rankList'][number]>;\nexport type PassiveSkill = { type: 'Passive'; } & Pick<GameConfig.PassiveSkill, 'insightCost'> & BaseSkill<GameConfig.PassiveSkill['rankList'][number]>;\n\nexport type Skill = AttackSkill | AuraSkill | PassiveSkill;\nexport type SkillType = Skill['type'];\n\nexport interface BaseSkill<Data extends RankObjectData> extends RankObject<Data> {\n    type: string;\n    id: string;\n    name: string;\n}\n\nexport abstract class SkillPage {\n    abstract readonly page: HTMLElement;\n    protected abstract readonly skillList: Skill[];\n\n    protected selectSkill(skill?: Skill) {\n        this.skillList.forEach(x => {\n            x.selected = x === skill;\n            x.element.classList.toggle('selected', x.selected);\n        });\n        if (skill) {\n            this.showSkill(skill);\n        } else {\n            this.page.querySelector('[data-item-info]')?.replaceChildren();\n        }\n    }\n\n    protected assignSkill(skill: Skill) {\n        if (skill.assigned) {\n            return;\n        }\n        skill.curRank = skill.selectedRank;\n        skill.assigned = true;\n        updateRankObjectListItemElement(skill);\n    }\n\n    protected unassignSkill(skill: Skill) {\n        skill.assigned = false;\n        skill.curRank = 1;\n        updateRankObjectListItemElement(skill);\n    }\n\n    protected abstract showSkill(skill: Skill): void;\n}", "import { combat, player } from 'src/game/game';\nimport { Modifier } from 'src/game/mods/Modifier';\nimport type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport type * as GameSerialization from 'src/game/serialization';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport type { StatModifier } from 'src/game/mods/ModDB';\nimport { isDefined } from 'src/shared/utils/utils';\nimport { createObjectInfoElements, unlockObject } from 'src/game/utils/objectUtils';\nimport { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { SkillPage, type AttackSkill } from '../SkillPage';\nimport type { Value } from '../../../../shared/utils/Value';\nimport { addRankExp, createRankObject, deserializeRankObject, getRankExpPct, tryUnlockNextRank } from '../../../utils/rankObjectUtils';\n\nexport class AttackSkills extends SkillPage {\n    readonly page: HTMLElement;\n    protected readonly skillList: AttackSkill[] = [];\n    constructor(characterLevel: Value, data: Required<GameConfig.Character>['attackSkills']) {\n        super();\n        this.page = document.createElement('div');\n        this.page.classList.add('p-attack-skills');\n\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Skill List</div>');\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"s-skill-list g-scroll-list-v\" data-skill-list></ul>');\n        this.page.insertAdjacentHTML('beforeend', '<div data-item-info></div>');\n\n        this.skillList = data.attackSkillList.reduce((skillList, skillData) => {\n            const attackSkill: AttackSkill = {\n                type: 'Attack',\n                ...createRankObject(skillData),\n            };\n            attackSkill.element.addEventListener('click', this.selectSkill.bind(this, attackSkill));\n            this.page.querySelectorStrict('[data-skill-list]').appendChild(attackSkill.element);\n            skillList.push(attackSkill);\n            characterLevel.registerTargetValueCallback(skillData.requirements?.characterLevel ?? 1, unlockObject.bind(this, attackSkill));\n            return skillList;\n        }, [] as AttackSkill[]);\n\n        const firstSkill = this.skillList.findStrict(x => x.unlocked);\n        assertDefined(firstSkill, 'no attack skill available, at least 1 attack skill must be available');\n        firstSkill.assigned = true;\n        this.assignSkill(firstSkill);\n        this.selectSkill(this.activeSkill);\n\n        combat.events.enemyHit.listen(this.attackSkillExpCallback.bind(this));\n    }\n\n    get selectedSkill() {\n        return this.skillList.findStrict(x => x.selected);\n    }\n\n    get activeSkill() {\n        return this.skillList.findStrict(x => x.assigned);\n    }\n\n    get canAssignSkill() {\n        return this.selectedSkill !== this.activeSkill;\n    }\n\n    protected showSkill(skill: AttackSkill) {\n        const rankData = skill.rankData(skill.selectedRank);\n        const propertyList = [\n            ['Attack Speed', rankData.attackSpeed.toFixed(2)],\n            ['Attack Effectiveness', rankData.attackEffectiveness.toFixed()],\n            ['Mana Cost', rankData.manaCost.toFixed()]\n        ];\n\n        const itemInfoElements = createObjectInfoElements({\n            name: skill.name,\n            propertyList,\n            modList: rankData.modList,\n            rankObj: skill,\n            onRankChange: this.showSkill.bind(this)\n        });\n        this.page.querySelector('[data-item-info]')?.replaceWith(itemInfoElements.element) ?? this.page.appendChild(itemInfoElements.element);\n\n        const button = document.createElement('button');\n        const updateButton = () => {\n            let disabled = true;\n            const tag = 'valid';\n            const label = 'Assign';\n            if (skill.assigned) {\n                disabled = false;\n                if (skill.selectedRank === skill.curRank) {\n                    disabled = true;\n                }\n            } else {\n                disabled = false;\n            }\n            button.textContent = label;\n            button.setAttribute('data-tag', tag);\n            button.toggleAttribute('disabled', disabled);\n        };\n        button.addEventListener('click', () => {\n            this.assignSkill(skill);\n            updateButton();\n        });\n        updateButton();\n        itemInfoElements.contentElement.appendChild(button);\n    }\n\n    protected assignSkill(skill: AttackSkill) {\n        this.unassignSkill(this.activeSkill);\n        super.assignSkill(skill);\n\n        const rankData = skill.rankList[skill.curRank - 1];\n        assertDefined(rankData);\n\n        const statModList: StatModifier[] = [\n            ...Modifier.extractStatModifierList(...Modifier.modListFromTexts(rankData.modList)),\n            { name: 'AttackSpeed', valueType: 'Base', value: rankData.attackSpeed, override: true },\n            { name: 'AttackManaCost', value: rankData.manaCost, valueType: 'Base' }\n        ];\n        player.stats.attackEffectiveness.set(rankData.attackEffectiveness);\n        player.modDB.replace('AttackSkill', statModList);\n    }\n\n    private updateSkillInfo() {\n        const expbar = this.page.querySelector<ProgressElement>(`[data-item-info] ${ProgressElement.name}`);\n        if (expbar) {\n            expbar.value = getRankExpPct(this.selectedSkill);\n        }\n    }\n\n    private attackSkillExpCallback() {\n        if (this.activeSkill.curRank !== this.activeSkill.maxRank) {\n            return;\n        }\n        addRankExp(this.activeSkill, player.stats.trainingMultiplier.value);\n        if (this.activeSkill.curExp === this.activeSkill.maxExp) {\n            tryUnlockNextRank(this.activeSkill);\n        }\n        this.updateSkillInfo();\n    }\n\n    serialize(): GameSerialization.Character['attackSkills'] {\n        return {\n            skillId: this.activeSkill.id,\n            skillList: this.skillList.map(x => ({ id: x.id, curRank: x.curRank, maxRank: x.maxRank, expFac: x.curExp / x.maxExp }))\n        };\n    }\n\n    deserialize(save: DeepPartial<GameSerialization.Character['attackSkills']>) {\n        for (const skillData of save?.skillList?.filter(isDefined) ?? []) {\n            const skill = this.skillList.find(x => x.id === skillData?.id);\n            if (!skill) {\n                continue;\n            }\n            unlockObject(skill);\n            deserializeRankObject(skill, skillData);\n        }\n        const activeSkill = this.skillList.find(x => x.id === save?.skillId);\n        if (activeSkill) {\n            this.assignSkill(activeSkill);\n        }\n        this.selectSkill(this.activeSkill);\n        this.updateSkillInfo();\n    }\n}", "import type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport { game, gameLoop, gameLoopAnim, player } from 'src/game/game';\nimport { assertDefined, assertNonNullable, assertNullable } from 'src/shared/utils/assert';\nimport { Modifier } from 'src/game/mods/Modifier';\nimport type * as GameSerialization from 'src/game/serialization';\nimport { isDefined } from 'src/shared/utils/utils';\nimport { createObjectInfoElements, unlockObject } from 'src/game/utils/objectUtils';\nimport { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\nimport { SkillPage, type AuraSkill } from '../SkillPage';\nimport type { Value } from '../../../../shared/utils/Value';\nimport { addRankExp, createRankObject, deserializeRankObject, getRankExpPct, tryUnlockNextRank } from '../../../utils/rankObjectUtils';\nimport { ROMAN_NUMERALS } from '../../../../shared/utils/constants';\n\ninterface SkillSlot {\n    skill: AuraSkill | null;\n    selected: boolean;\n    element: HTMLElement;\n    progressBar: ProgressElement;\n    time: number;\n    duration: number;\n    loopId?: string | null;\n}\n\nexport class AuraSkills extends SkillPage {\n    readonly page: HTMLElement;\n    readonly skillSlotList: SkillSlot[] = [];\n    protected readonly skillList: AuraSkill[];\n    constructor(characterLevel: Value, data: Required<GameConfig.Character>['auraSkills']) {\n        super();\n        this.page = document.createElement('div');\n        this.page.classList.add('p-aura-skills');\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Skill Slots</div>');\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"s-skill-slot-list g-scroll-list-v\" data-skill-slot-list></ul>');\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Skill List</div>');\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"s-skill-list g-scroll-list-v\" data-skill-list></ul>');\n        this.page.insertAdjacentHTML('beforeend', '<div data-item-info></div>');\n\n        this.skillList = data.auraSkillList.reduce((skillList, skillData) => {\n            const auraSkill: AuraSkill = {\n                type: 'Aura',\n                ...createRankObject(skillData),\n            };\n            auraSkill.element.addEventListener('click', this.selectSkill.bind(this, auraSkill));\n            this.page.querySelectorStrict('[data-skill-list]').appendChild(auraSkill.element);\n            skillList.push(auraSkill);\n            characterLevel.registerTargetValueCallback(skillData.requirements?.characterLevel ?? 1, unlockObject.bind(this, auraSkill));\n            return skillList;\n        }, [] as AuraSkill[]);\n\n        this.skillSlotList[0]?.element.click();\n        if (this.skillSlotList[0]) {\n            this.selectSkillSlot(this.skillSlotList[0]);\n        }\n\n        this.selectSkill(this.skillList.find(x => x.unlocked));\n\n        gameLoopAnim.registerCallback(() => {\n            this.skillSlotList.forEach(x => this.updateSkillSlotProgressBar(x));\n        });\n\n        player.stats.auraDurationMultiplier.addListener('change', ({ curValue }) => {\n            this.skillSlotList.filter(x => x.skill).forEach(x => {\n                const pct = x.time / x.duration;\n                const rankData = x.skill?.rankList[x.skill.curRank - 1];\n                assertDefined(rankData);\n                const duration = (rankData.baseDuration || 0) * (curValue / 100);\n                x.time = duration * pct;\n                x.duration = duration;\n            });\n        });\n\n        game.tickSecondsEvent.listen(() => {\n            this.skillSlotList.map(x => x.skill).filter((x): x is AuraSkill => x?.type === 'Aura').forEach(x => this.auraSkillExpCallback(x));\n        });\n        player.stats.maxAura.addListener('change', this.updateSkillSlots.bind(this));\n\n        this.updateSkillSlots();\n    }\n\n    get selectedSkillSlot() {\n        return this.skillSlotList.find(x => x.selected);\n    }\n\n    get selectedSkill() {\n        return this.skillList.find(x => x.selected);\n    }\n\n    private updateSkillSlots() {\n        const count = player.stats.maxAura.value - this.skillSlotList.length;\n        for (let i = 0; i < count; i++) {\n            this.createSkillSlot();\n        }\n        if (!this.selectedSkillSlot && this.skillSlotList[0]) {\n            this.selectSkillSlot(this.skillSlotList[0]);\n        }\n    }\n\n    private createSkillSlot() {\n        const element = this.createSkillSlotElement();\n        const progressBar = element.querySelectorStrict<ProgressElement>(ProgressElement.name);\n        const slot: SkillSlot = {\n            selected: false,\n            element,\n            progressBar,\n            skill: null,\n            time: 0,\n            duration: 0\n        };\n        slot.element.addEventListener('click', this.selectSkillSlot.bind(this, slot));\n        this.skillSlotList.push(slot);\n\n        this.page.querySelectorStrict('[data-skill-slot-list]').appendChild(element);\n    }\n\n    private createSkillSlotElement() {\n        const element = document.createElement('li');\n        element.classList.add('skill-slot');\n        element.setAttribute('data-skill-slot', '');\n        const title = document.createElement('div');\n        title.classList.add('s-title');\n        title.insertAdjacentHTML('beforeend', '<span data-skill-name>[Empty Slot]</span>');\n        element.appendChild(title);\n        const progressBar = createCustomElement(ProgressElement);\n        progressBar.classList.add('progress-bar');\n        element.appendChild(progressBar);\n        return element;\n    }\n\n    private selectSkillSlot(skillSlot?: SkillSlot) {\n        if (skillSlot?.skill && skillSlot.selected) {\n            skillSlot.skill.element.click();\n        }\n        this.skillSlotList.forEach(x => x.selected = x === skillSlot);\n        this.skillSlotList.forEach(x => x.element.classList.toggle('selected', x === skillSlot));\n        if (this.selectedSkill) {\n            this.showSkill(this.selectedSkill);\n        }\n    }\n\n    private updateSkillSlotProgressBar(skillSlot: SkillSlot) {\n        const skill = skillSlot.skill;\n        if (!skill) {\n            return;\n        }\n        const rankData = skill.rankList[skill.curRank - 1];\n        assertDefined(rankData);\n        skillSlot.progressBar.value = (skillSlot.time || 0) / (rankData.baseDuration || 1);\n    }\n\n    private clearSkillSlot(skillSlot: SkillSlot) {\n        if (!skillSlot.skill) {\n            return;\n        }\n        this.stopActiveSkill(skillSlot);\n        super.unassignSkill(skillSlot.skill);\n\n        skillSlot.element.classList.remove('m-has-skill');\n        skillSlot.element.querySelectorStrict('[data-skill-name]').textContent = '[Empty Slot]';\n        skillSlot.progressBar.value = 0;\n        skillSlot.skill.assigned = false;\n        skillSlot.skill = null;\n    }\n\n    private startActiveSkill(skillSlot: SkillSlot) {\n        assertNonNullable(skillSlot.skill, 'skill slot contains no skill');\n        assertNullable(skillSlot.loopId);\n        const callbackId = gameLoop.registerCallback(() => {\n            if (!skillSlot.skill || skillSlot.loopId) {\n                gameLoop.unregister(callbackId);\n                return;\n            }\n            const manaCost = skillSlot.skill.rankData(skillSlot.skill.curRank).manaCost;\n            const sufficientMana = manaCost <= player.stats.mana.value;\n            if (!sufficientMana) {\n                return;\n            }\n            gameLoop.unregister(callbackId);\n\n            player.stats.mana.subtract(manaCost);\n            skillSlot.time = skillSlot.skill.rankData(skillSlot.skill.curRank).baseDuration * player.stats.auraDurationMultiplier.value;\n            this.triggerSkillInSlot(skillSlot);\n        });\n    }\n\n    private triggerSkillInSlot(skillSlot: SkillSlot) {\n        assertNonNullable(skillSlot.skill);\n        assertNullable(skillSlot.loopId);\n        this.applySkillModifiers(skillSlot.skill);\n        skillSlot.loopId = gameLoop.registerCallback(this.processActiveSkill.bind(this, skillSlot));\n    }\n\n    private processActiveSkill(skillSlot: SkillSlot, dt: number) {\n        if (!skillSlot.skill) {\n            return;\n        }\n        if (skillSlot.time <= 0) {\n            skillSlot.time = 0;\n            this.stopActiveSkill(skillSlot);\n            this.startActiveSkill(skillSlot);\n            return;\n        }\n        skillSlot.time -= dt;\n    }\n\n    private stopActiveSkill(skillSlot: SkillSlot) {\n        if (skillSlot.loopId) {\n            gameLoop.unregister(skillSlot.loopId);\n        }\n        skillSlot.loopId = null;\n        if (skillSlot.skill) {\n            this.removeSkillModifiers(skillSlot.skill);\n        }\n        skillSlot.time = 0;\n        this.updateSkillSlotProgressBar(skillSlot);\n    }\n\n    protected showSkill(skill: AuraSkill) {\n        const rankData = skill.rankData(skill.selectedRank);\n        const propertyList = [\n            ['Duration', rankData.baseDuration.toFixed()],\n            ['Mana Cost', rankData.manaCost.toFixed()]\n        ];\n        const itemInfoElements = createObjectInfoElements({\n            name: skill.name,\n            propertyList,\n            modList: rankData.modList,\n            rankObj: skill,\n            onRankChange: item => this.showSkill(item)\n        });\n        this.page.querySelector('[data-item-info]')?.replaceWith(itemInfoElements.element) ?? this.page.appendChild(itemInfoElements.element);\n\n        const updateButton = () => {\n            let disabled = true;\n            let tag = 'valid';\n            let label = 'Assign';\n\n            if (skill.assigned) {\n                disabled = false;\n                if (skill.selectedRank === skill.curRank) {\n                    disabled = false;\n                    tag = 'invalid';\n                    label = 'Remove';\n                }\n            } else {\n                disabled = false;\n            }\n\n            button.textContent = label;\n            button.toggleAttribute('disabled', disabled);\n            button.setAttribute('data-tag', tag);\n        };\n        const button = document.createElement('button');\n        button.addEventListener('click', () => {\n            if (this.selectedSkillSlot?.skill === skill) {\n                if (skill.selectedRank === skill.curRank) {\n                    this.clearSkillSlot(this.selectedSkillSlot);\n                } else {\n                    this.assignAuraSkillSlot(this.selectedSkillSlot, skill);\n                    this.startActiveSkill(this.selectedSkillSlot);\n                }\n            } else if (this.selectedSkillSlot) {\n                this.assignAuraSkillSlot(this.selectedSkillSlot, skill);\n                this.startActiveSkill(this.selectedSkillSlot);\n            }\n            updateButton();\n        });\n        updateButton();\n\n        itemInfoElements.contentElement.appendChild(button);\n    }\n\n    private updateSkillInfo() {\n        if (!this.selectedSkill) {\n            return;\n        }\n        const expbar = this.page.querySelector<ProgressElement>(`[data-item-info] ${ProgressElement.name}`);\n        if (expbar) {\n            expbar.value = getRankExpPct(this.selectedSkill);\n        }\n    }\n\n    private assignAuraSkillSlot(skillSlot: SkillSlot, skill: AuraSkill) {\n        if (skillSlot.skill) {\n            this.clearSkillSlot(skillSlot);\n        }\n        super.assignSkill(skill);\n        skillSlot.element.querySelectorStrict('[data-skill-name]').textContent = `${skill.name} ${ROMAN_NUMERALS[skill.curRank - 1]}`;\n        skillSlot.element.classList.add('m-has-skill');\n        skillSlot.skill = skill;\n        skillSlot.duration = skill.rankData(skill.curRank).baseDuration;\n    }\n\n    private applySkillModifiers(skill: AuraSkill) {\n        const modList = Modifier.modListFromTexts(skill.rankData(skill.curRank).modList);\n        player.modDB.add(`AuraSkill/${skill.name}`, Modifier.extractStatModifierList(...modList));\n    }\n\n    private removeSkillModifiers(skill: AuraSkill) {\n        player.modDB.removeBySource(`AuraSkill/${skill.name}`);\n    }\n\n    private auraSkillExpCallback(auraSkill: AuraSkill) {\n        if (auraSkill.curRank !== auraSkill.maxRank) {\n            return;\n        }\n        addRankExp(auraSkill, player.stats.trainingMultiplier.value + player.stats.meditationMultiplier.value);\n        if (auraSkill.curExp === auraSkill.maxExp) {\n            tryUnlockNextRank(auraSkill);\n        }\n        this.updateSkillInfo();\n    }\n\n    serialize(): GameSerialization.Character['auraSkills'] {\n        return {\n            skillList: this.skillList.filter(x => x.unlocked).map(x => {\n                const data: Required<GameSerialization.Character>['auraSkills']['skillList'][number] = {\n                    id: x.id,\n                    curRank: x.curRank,\n                    maxRank: x.maxRank,\n                    expFac: x.curExp / x.maxExp,\n                };\n                const skillSlot = this.skillSlotList.find(slot => slot.skill === x);\n                if (skillSlot) {\n                    data.skillSlot = {\n                        index: this.skillSlotList.indexOf(skillSlot),\n                        timePct: skillSlot.time / skillSlot.duration\n                    };\n                }\n                return data;\n            })\n        };\n    }\n\n    deserialize(save: DeepPartial<GameSerialization.Character['auraSkills']>) {\n        for (const skillData of save?.skillList?.filter(isDefined) || []) {\n            const skill = this.skillList.find(x => x.id === skillData?.id);\n            if (skill) {\n                unlockObject(skill);\n                deserializeRankObject(skill, skillData);\n                if (skillData.skillSlot) {\n                    const skillSlot = this.skillSlotList[skillData.skillSlot.index ?? -1];\n                    if (!skillSlot) {\n                        continue;\n                    }\n                    this.assignAuraSkillSlot(skillSlot, skill);\n                    const timePct = skillData.skillSlot.timePct ?? 0;\n                    skillSlot.time = skillSlot.duration * (timePct ?? 0);\n                    if (timePct > 0) {\n                        skillSlot.time = skillSlot.duration * (timePct || 0);\n                        this.triggerSkillInSlot(skillSlot);\n                    } else {\n                        this.startActiveSkill(skillSlot);\n                    }\n                }\n            }\n        }\n        const skillSlot = this.skillSlotList[0];\n        skillSlot?.element.click();\n        if (!skillSlot || !skillSlot.skill) {\n            this.skillList.find(x => x.unlocked)?.element.click();\n        }\n\n    }\n}", "import type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport { combat, game, notifications, player } from 'src/game/game';\nimport type * as GameSerialization from 'src/game/serialization';\nimport { Modifier } from 'src/game/mods/Modifier';\nimport { isDefined, pickOneFromPickProbability } from 'src/shared/utils/utils';\nimport { assertDefined, assertNonNullable } from 'src/shared/utils/assert';\nimport { createObjectInfoElements, unlockObject } from 'src/game/utils/objectUtils';\nimport { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { SkillPage, type PassiveSkill } from '../SkillPage';\nimport { createCustomElement } from '../../../../shared/customElements/customElements';\nimport { ModalElement } from '../../../../shared/customElements/ModalElement';\nimport type { Value } from '../../../../shared/utils/Value';\nimport { addRankExp, createRankObject, deserializeRankObject, getRankExpPct, tryUnlockNextRank } from '../../../utils/rankObjectUtils';\n\ninterface InsightCapacityEnhancer {\n    id: string;\n    name: string;\n    probability: number;\n    insight: number;\n    obtained: boolean;\n}\n\nexport class Passives extends SkillPage {\n    readonly page: HTMLElement;\n    protected readonly skillList: PassiveSkill[];\n    private readonly insightCapacityEnhancerList: InsightCapacityEnhancer[];\n    constructor(characterLevel: Value, readonly data: Required<GameConfig.Character>['passiveSkills']) {\n        super();\n        this.page = document.createElement('div');\n        this.page.classList.add('p-passive-skills');\n\n        const toolbarElement = document.createElement('div');\n        toolbarElement.classList.add('s-toolbar', 'g-toolbar');\n\n        const insightElement = document.createElement('div');\n        insightElement.classList.add('s-insight', 'g-clickable-text');\n        insightElement.insertAdjacentHTML('beforeend', '<span>Insight: <var data-insight></var></span>');\n        insightElement.addEventListener('click', () => {\n            const modal = createCustomElement(ModalElement);\n            modal.classList.add('insight-capacity-enhancer');\n            modal.setTitle('Insight Capacity');\n            modal.body.insertAdjacentHTML('beforeend', `<div style=\"text-align: center;\">Insight: ${this.insightRemaining}/${this.insightCapacityEnhancerList.filter(x => x.obtained).reduce((a, c) => a += c.insight, 0)}</div>`);\n            const table = document.createElement('table');\n            const tBody = document.createElement('tbody');\n            const map = this.insightCapacityEnhancerList.reduce((a, c) => {\n                const item = a.get(c.name) ?? { name: c.name, curCount: 0, maxCount: 0 };\n                item.curCount += Number(c.obtained);\n                item.maxCount++;\n                a.set(c.name, item);\n                return a;\n            }, new Map<string, { name: string; curCount: number; maxCount: number; }>());\n            for (const [name, data] of map) {\n                tBody.insertAdjacentHTML('beforeend', `<tr><td>${name}</td><td>${data.curCount}/${data.maxCount}</td></tr>`);\n            }\n            table.appendChild(tBody);\n            modal.body.appendChild(table);\n            this.page.appendChild(modal);\n        });\n        toolbarElement.appendChild(insightElement);\n\n        const clearElement = document.createElement('span');\n        clearElement.classList.add('g-clickable-text', 'clear');\n        clearElement.textContent = 'Clear';\n        clearElement.addEventListener('click', this.clearPassives.bind(this));\n        toolbarElement.appendChild(clearElement);\n\n        this.page.appendChild(toolbarElement);\n\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Passive List</div>');\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"s-skill-list g-scroll-list-v\" data-skill-list></ul>');\n        this.page.insertAdjacentHTML('beforeend', '<div data-item-info></div>');\n\n        this.insightCapacityEnhancerList = data.insightCapacityEnhancerList.map(x => ({ ...x, obtained: false }));\n        this.skillList = data.passiveSkillList.reduce((skillList, skillData) => {\n            const passiveSkill: PassiveSkill = {\n                type: 'Passive',\n                insightCost: skillData.insightCost,\n                ...createRankObject(skillData)\n            };\n            passiveSkill.element.addEventListener('click', this.selectSkill.bind(this, passiveSkill));\n            this.page.querySelectorStrict('[data-skill-list]').appendChild(passiveSkill.element);\n            skillList.push(passiveSkill);\n            characterLevel.registerTargetValueCallback(skillData.requirements?.characterLevel ?? 1, unlockObject.bind(this, passiveSkill));\n            return skillList;\n        }, [] as PassiveSkill[]);\n\n        this.selectSkill(this.skillList.find(x => x.unlocked));\n\n        this.updateInsightValueElement();\n\n        game.tickSecondsEvent.listen(this.passiveSkillExpCallback.bind(this));\n\n        combat.events.enemyDeath.listen(this.tryGetInsightCapacityEnhancer.bind(this));\n\n        player.stats.insightCapacity.addListener('change', () => {\n            this.updateInsightValueElement();\n        });\n    }\n\n    get selectedPassive() {\n        return this.skillList.findStrict(x => x.selected);\n    }\n\n    get insightRemaining() {\n        return player.stats.insightCapacity.value - this.insightAllocated;\n    }\n\n    get insightAllocated() {\n        return this.skillList.filter(x => x.assigned).map(x => x.insightCost).reduce((a, b) => a += b, 0);\n    }\n\n    private updateInsightValueElement() {\n        this.page.querySelectorStrict('[data-insight]').textContent = this.insightRemaining.toFixed();\n    }\n\n    protected showSkill(passive: PassiveSkill) {\n        const propertyList = [];\n        propertyList.push(['Insight', passive.insightCost.toFixed()]);\n        const itemInfoElements = createObjectInfoElements({\n            name: passive.name,\n            propertyList,\n            modList: passive.rankData(passive.selectedRank).modList,\n            rankObj: passive,\n            onRankChange: (item) => this.showSkill(item)\n        });\n        this.page.querySelector('[data-item-info]')?.replaceWith(itemInfoElements.element) ?? this.page.appendChild(itemInfoElements.element);\n\n        const button = document.createElement('button');\n        const updateButton = () => {\n            let disabled = true;\n            let tag = 'valid';\n            let label = 'Allocate';\n\n            if (passive.assigned) {\n                disabled = false;\n                if (passive.selectedRank === passive.curRank) {\n                    tag = 'invalid';\n                    label = 'Deallocate';\n                }\n            } else if (passive.insightCost <= this.insightRemaining) {\n                disabled = false;\n            }\n\n            button.textContent = label;\n            button.setAttribute('data-tag', tag);\n            button.toggleAttribute('disabled', disabled);\n        };\n        button.addEventListener('click', () => {\n            if (passive.assigned) {\n                if (passive.selectedRank !== passive.curRank) {\n                    this.unassignSkill(passive);\n                    this.assignSkill(passive);\n                } else {\n                    this.unassignSkill(passive);\n                }\n            } else {\n                this.assignSkill(passive);\n            }\n            updateButton();\n        });\n        updateButton();\n        itemInfoElements.contentElement.appendChild(button);\n    }\n\n    private updatePassiveInfo() {\n        if (!this.selectedPassive) {\n            return;\n        }\n        const expbar = this.page.querySelector<ProgressElement>(`[data-item-info] ${ProgressElement.name}`);\n        if (expbar) {\n            expbar.value = getRankExpPct(this.selectedPassive);\n        }\n    }\n\n    private applyInsightCapacityEnhancersAsModifiers() {\n        const list = this.insightCapacityEnhancerList.filter(x => x.obtained);\n        player.modDB.replace('Passive/InsightCapacityEnhancer', list.map(x => ({ name: 'Insight', value: x.insight, valueType: 'Base' })));\n    }\n\n    protected assignSkill(passive: PassiveSkill) {\n        super.assignSkill(passive);\n        this.updateInsightValueElement();\n        const rankData = passive.rankList[passive.curRank - 1];\n        assertDefined(rankData);\n        player.modDB.add(`Passive/${passive.name}`, Modifier.extractStatModifierList(...Modifier.modListFromTexts(rankData.modList)));\n        this.fixNegativeInsightRemaining();\n    }\n\n    protected unassignSkill(passive: PassiveSkill) {\n        super.unassignSkill(passive);\n        this.updateInsightValueElement();\n        player.modDB.removeBySource(`Passive/${passive.name}`);\n    }\n\n    private fixNegativeInsightRemaining() {\n        if (this.insightRemaining >= 0) {\n            return;\n        }\n        const passive = this.skillList.findLast(x => x.assigned);\n        assertDefined(passive, 'cannot have negative insight without any allocated passives');\n        this.unassignSkill(passive);\n        this.fixNegativeInsightRemaining();\n    }\n\n    private tryGetInsightCapacityEnhancer() {\n        const candidates = this.insightCapacityEnhancerList.filter(x => !x.obtained);\n        const candidate = pickOneFromPickProbability(candidates);\n        if (!candidate) {\n            return;\n        }\n        candidate.obtained = true;\n        this.applyInsightCapacityEnhancersAsModifiers();\n        setTimeout(() => {\n            this.updateInsightValueElement();\n            this.selectSkill(this.selectedPassive);\n        }, 100);\n\n        const skillsPage = this.page.closest('[data-page-content=\"character\"]');\n        assertNonNullable(skillsPage);\n\n        notifications.addNotification({\n            title: `${candidate.name}`,\n            description: 'Your insight has been increased',\n        });\n    }\n\n    private clearPassives() {\n        this.skillList.filter(x => x.assigned).forEach(x => this.unassignSkill(x));\n        if (this.selectedPassive) {\n            this.showSkill(this.selectedPassive);\n        }\n    }\n\n    private passiveSkillExpCallback() {\n        const passives = this.skillList.filter(x => x.assigned && x.curExp < x.maxExp);\n        for (const passive of passives) {\n            if (passive.curRank !== passive.maxRank) {\n                return;\n            }\n            addRankExp(passive, player.stats.meditationMultiplier.value);\n            if (passive.curExp === passive.maxExp) {\n                tryUnlockNextRank(passive);\n            }\n        }\n        this.updatePassiveInfo();\n    }\n\n    serialize(): GameSerialization.Character['passiveSkills'] {\n        return {\n            insightCapacityEnhancerList: this.insightCapacityEnhancerList.filter(x => x.obtained).map(x => ({ id: x.id })),\n            passiveList: this.skillList.filter(x => x.unlocked).map(x => ({ id: x.id, allocated: x.assigned, curRank: x.curRank, maxRank: x.maxRank, expFac: x.curExp / x.maxExp }))\n        };\n    }\n\n    deserialize(save: DeepPartial<GameSerialization.Character['passiveSkills']>) {\n        for (const data of save?.insightCapacityEnhancerList?.filter(isDefined) || []) {\n            const insightCapacityEnhancer = this.insightCapacityEnhancerList.find(x => x.id === data.id);\n            if (!insightCapacityEnhancer) {\n                continue;\n            }\n            insightCapacityEnhancer.obtained = true;\n        }\n        this.applyInsightCapacityEnhancersAsModifiers();\n        player.updateStatsDirect();\n        for (const data of save?.passiveList?.filter(isDefined) || []) {\n            const passive = this.skillList.find(x => x.id === data?.id);\n            if (!passive) {\n                continue;\n            }\n            unlockObject(passive);\n            deserializeRankObject(passive, data);\n            if (data.allocated && passive.insightCost <= this.insightRemaining) {\n                this.assignSkill(passive);\n            }\n        }\n        this.selectSkill(this.skillList.find(x => x.assigned) ?? this.skillList.find(x => x.unlocked));\n    }\n}", "import { CustomElement } from './CustomElement';\n\ntype MenuItem = Element;\ntype PageElement = Element;\n\nexport class TabMenuElement extends CustomElement {\n    static readonly name = 'tab-menu-element';\n    private pageList: HTMLElement[] = [];\n    init() {\n        this.setDirection('vertical');\n        this.classList.add('g-scroll-list-v');\n    }\n\n    setDirection(dir: 'vertical' | 'horizontal') {\n        this.setAttribute('data-direction', dir);\n    }\n\n    private appendMenuItem(menuItem: HTMLLIElement, id: string) {\n        menuItem.classList.add('g-list-item');\n        this.appendChild(menuItem);\n        menuItem.addEventListener('click', () => {\n            this.querySelectorAll('[data-page-target]').forEach(x => {\n                x.classList.toggle('selected', x === menuItem);\n                x.toggleAttribute('disabled', x === menuItem);\n            });\n            this.pageList.forEach(x => x.classList.toggle('hidden', x.getAttribute('data-page-content') !== id));\n        });\n    }\n\n    addMenuItem(label: string, id: string, index?: number) {\n        const element = document.createElement('li');\n        element.textContent = label;\n        element.setAttribute('data-page-target', id);\n        index = index ?? this.children.length;\n        element.setAttribute('data-index', index.toFixed());\n        this.appendMenuItem(element, id);\n        return element;\n    }\n\n    removeMenuItem(item: HTMLElement) {\n        this.pageList = this.pageList.filter(x => x.getAttribute('data-page-content') !== item.getAttribute('data-page-target'));\n    }\n\n    registerPageElement(pageElement: HTMLElement, id: string) {\n        pageElement.classList.add('hidden');\n        pageElement.setAttribute('data-page-content', id);\n        this.pageList.push(pageElement);\n\n        if (!this.querySelector('.selected')) {\n            this.querySelector<HTMLLIElement>(`[data-page-target=\"${id}\"]`)?.click();\n        }\n    }\n\n    getMenuItemById(id: string) {\n        return this.querySelector<HTMLElement>(`[data-page-target=\"${id}\"]`);\n    }\n\n    sort() {\n        const comparer = (a: HTMLElement, b: HTMLElement) => (a.getAttribute('data-index')?.localeCompare(b.getAttribute('data-index') || '', undefined, { numeric: true }) || 0);\n        this.append(...[...this.querySelectorAll<HTMLLIElement>('li')].sort(comparer));\n    }\n\n    *generateTabMenuAnectors(from: Element | null, targetPageName = ''): Generator<[MenuItem, PageElement]> {\n        if (!from) {\n            return;\n        }\n        if (targetPageName.length > 0) {\n            const menu = from.querySelector(`:scope > ${TabMenuElement.name}`);\n            if (menu) {\n                const menuItem = menu.querySelector(`[data-page-target=\"${targetPageName}\"]`);\n                if (menuItem) {\n                    yield [menuItem, from];\n                }\n            }\n        }\n        if (from.hasAttribute('data-page-content')) {\n            targetPageName = from.getAttribute('data-page-content') ?? targetPageName;\n        }\n        const next = from.parentElement ?? from.nextElementSibling;\n        return yield* this.generateTabMenuAnectors(next, targetPageName);\n    }\n}", "import { EventEmitter } from '../../shared/utils/EventEmitter';\nimport type { ModTemplateStat, StatName } from './types';\n\nexport interface StatModifier extends ModTemplateStat {\n    value: number;\n    min?: number;\n    max?: number;\n    source?: string;\n}\n\nexport class ModDB {\n    private mods: Map<StatName, (StatModifier & { source: string; })[]>;\n    public readonly onChange = new EventEmitter();\n\n    constructor(modDB?: ModDB) {\n        this.mods = modDB ? new Map(modDB.mods) : new Map();\n    }\n\n    getModListByName(name: StatName) {\n        return [...this.mods.get(name) || []];\n    }\n\n    extractAllMods(): StatModifier[] {\n        return [...this.mods.values()].flatMap(x => x);\n    }\n\n    add(source: string, statModList: StatModifier[]) {\n        this.addModList(source, statModList);\n        this.onChange.invoke(undefined);\n    }\n\n    removeBySource(source: string) {\n        this.remove(source);\n        this.onChange.invoke(undefined);\n    }\n\n    replace(source: string, statModList: StatModifier[]) {\n        this.remove(source);\n        this.add(source, statModList);\n    }\n\n    clear() {\n        this.mods.clear();\n        this.onChange.removeAllListeners();\n    }\n\n    private addModList(source: string, statModList: StatModifier[]) {\n        for (const mod of statModList) {\n            let arr = this.mods.get(mod.name);\n            if (!arr) {\n                arr = [];\n                this.mods.set(mod.name, arr);\n            }\n            arr.push({\n                ...mod,\n                source\n            });\n        }\n    }\n\n    private remove(source: string) {\n        for (const [name, arr] of this.mods) {\n            this.mods.set(name, arr.filter(x => x.source !== source));\n        }\n    }\n}", "export type EnvironmentMode = 'development' | 'production';\nexport const ENVIRONMENT: EnvironmentMode = 'production';\n\nexport function resolveGamePathFromVersion(version: string, filename: string) {\n    return `dist/game_${version}/${filename}`;\n}\n\n", "import { game, statistics, gameLoop, gameLoopAnim, GameInitializationStage } from './game';\nimport { applyStatValues, calcPlayerCombatStats, calcPlayerPersistantStats, extractStats, type PlayerOptions } from './calc/calcStats';\nimport { Modifier } from './mods/Modifier';\nimport { createPlayerStats, deserializeStats, serializeStats } from './statistics/stats';\nimport { ModDB } from './mods/ModDB';\nimport type * as GameSerialization from './serialization';\nimport { EventEmitter } from 'src/shared/utils/EventEmitter';\nimport { ENVIRONMENT } from 'src/config';\nimport type { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { hasAnyFlag } from '../shared/utils/utils';\n\nexport enum PlayerUpdateStatsFlag {\n    None = 0,\n    Combat = 1 << 0,\n    Persistent = 1 << 1,\n    All = PlayerUpdateStatsFlag.Combat | PlayerUpdateStatsFlag.Persistent\n}\n\nexport class Player {\n    readonly onStatsChange = new EventEmitter();\n    readonly modDB = new ModDB();\n    readonly stats = createPlayerStats(game.stats);\n    private readonly manaBar: ProgressElement;\n    private statUpdatePending = false;\n    constructor() {\n        this.manaBar = game.page.querySelectorStrict<ProgressElement>('[data-combat-overview] [data-mana-bar]');\n    }\n\n    init() {\n        statistics.createGroup('Player', this.stats);\n\n        this.modDB.onChange.listen(this.updateStats.bind(this));\n\n        if (game.gameConfig.playerStartModList) {\n            const statModifiers = Modifier.extractStatModifierList(...Modifier.modListFromTexts(game.gameConfig.playerStartModList));\n            this.modDB.add('Player', statModifiers);\n        }\n\n        this.stats.mana.addListener('change', (mana) => {\n            const maxMana = this.stats.maxMana.value;\n            if (mana.curValue > maxMana) {\n                this.stats.mana.set(maxMana, true);\n            }\n        });\n\n        gameLoop.registerCallback((dt) => {\n            const manaRegen = this.stats.manaRegeneration.value * dt;\n            this.stats.mana.add(manaRegen);\n        });\n\n        gameLoopAnim.registerCallback(() => this.updateManaBar());\n    }\n\n    reset() {\n        this.statUpdatePending = false;\n        this.onStatsChange.removeAllListeners();\n        this.modDB.clear();\n        Object.values(this.stats).forEach(x => x.reset());\n    }\n\n    setup() {\n        if (!this.stats.guildClass.texts) {\n            this.stats.guildClass.options.label = undefined;\n        }\n        this.updateStatsDirect();\n        if (this.stats.mana.value === Infinity) {\n            this.stats.mana.set(this.stats.maxMana.value);\n        }\n\n        this.updateManaBar();\n    }\n\n    private updateManaBar() {\n        if (this.stats.maxMana.value <= 0) {\n            return;\n        }\n        const value = this.stats.mana.value / this.stats.maxMana.value;\n        this.manaBar.value = value;\n    }\n\n    updateStats() {\n        if (this.statUpdatePending) {\n            return;\n        }\n        this.statUpdatePending = true;\n        if (ENVIRONMENT === 'development' && gameLoop.state === 'Stopped' && game.initializationStage === GameInitializationStage.Done) {\n            this.updateStatsDirect();\n            statistics.updateStats('Player');\n            this.statUpdatePending = false;\n            return;\n        }\n        gameLoop.registerCallback(() => {\n            this.statUpdatePending = false;\n            this.updateStatsDirect();\n            this.onStatsChange.invoke(undefined);\n        }, { once: true });\n    }\n\n    updateStatsDirect(updateFlags: PlayerUpdateStatsFlag = PlayerUpdateStatsFlag.All) {\n        const playerOptions: PlayerOptions = {\n            modDB: this.modDB,\n            stats: extractStats(this.stats),\n        };\n\n        if (hasAnyFlag(updateFlags, PlayerUpdateStatsFlag.Combat)) {\n            const result = calcPlayerCombatStats(playerOptions);\n            applyStatValues(this.stats, result);\n        }\n\n        if (hasAnyFlag(updateFlags, PlayerUpdateStatsFlag.Persistent)) {\n            const result = calcPlayerPersistantStats(playerOptions);\n            applyStatValues(this.stats, result);\n        }\n\n        statistics.updateStats('Player');\n    }\n\n    serialize(save: GameSerialization.Serialization) {\n        save.player = { stats: serializeStats(this.stats) };\n    }\n\n    deserialize({ player: save }: GameSerialization.UnsafeSerialization) {\n        const stats = save?.stats;\n        if (stats) {\n            deserializeStats(this.stats, stats);\n        }\n        this.updateStatsDirect();\n    }\n}", "import { Component } from '../Component';\nimport type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport { AttackSkills } from './attackSkills/AttackSkills';\nimport { AuraSkills } from './auraSkills/AuraSkills';\nimport { Passives } from './passiveSkills/PassiveSkills';\nimport { TabMenuElement } from 'src/shared/customElements/TabMenuElement';\nimport type { Serialization, UnsafeSerialization } from 'src/game/serialization';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\nimport { player } from 'src/game/game';\nimport { Modifier } from '../../mods/Modifier';\nimport { createLevelModal, createTitleElement } from '../../utils/dom';\nimport { PlayerUpdateStatsFlag } from '../../Player';\nimport { Value } from '../../../shared/utils/Value';\nimport { isNumber } from '../../../shared/utils/utils';\nimport { assertDefined } from '../../../shared/utils/assert';\n\nexport class Character extends Component {\n\n    private attackSkills?: AttackSkills;\n    private auraSkills?: AuraSkills;\n    private passiveSkills?: Passives;\n    private readonly level = new Value(1);\n    constructor(readonly data: GameConfig.Character) {\n        super('character');\n\n        const titleElement = createTitleElement({\n            label: 'Character',\n            levelClickCallback: data.levelList ? this.openCharacterLevelModal.bind(this) : undefined,\n            helpText: this.getHelpText.bind(this)\n        });\n        this.page.appendChild(titleElement);\n\n        const menu = createCustomElement(TabMenuElement);\n        menu.classList.add('s-menu');\n        menu.setDirection('horizontal');\n        this.page.appendChild(menu);\n\n        if (data.attackSkills) {\n            this.attackSkills = new AttackSkills(this.level, data.attackSkills);\n            menu.addMenuItem('Attack', 'attack', 0);\n            menu.registerPageElement(this.attackSkills.page, 'attack');\n            this.page.append(this.attackSkills.page);\n        }\n        const auraSkillsData = data.auraSkills;\n        if (auraSkillsData) {\n            this.level.registerTargetValueCallback(auraSkillsData.requirements?.characterLevel ?? 1, () => {\n                this.auraSkills = new AuraSkills(this.level, auraSkillsData);\n                menu.addMenuItem('Aura', 'aura', 1);\n                menu.registerPageElement(this.auraSkills.page, 'aura');\n                menu.sort();\n                this.page.append(this.auraSkills.page);\n            });\n        }\n        if (data.passiveSkills) {\n            this.passiveSkills = new Passives(this.level, data.passiveSkills);\n            menu.addMenuItem('Passive', 'passive', 2);\n            menu.registerPageElement(this.passiveSkills.page, 'passive');\n            this.page.appendChild(this.passiveSkills.page);\n        }\n\n        this.updateCharacterLevel();\n        this.level.addListener('change', this.updateCharacterLevel.bind(this));\n    }\n\n    private getHelpText() {\n        return `\n        [Attack]\n        Attack skills contains two base stats not available anywhere else, Attack speed and Attack effectiveness.\n        Attack speed determines your base attack speed.\n        Attack Effectiveness determines the base damage of both attacks and damage over time.\n        ${this.auraSkills ? `\n        [Aura]\n        Aura skills are temporary buffs. They cost mana and they last for a duration.\n        ` : ''}\n        [Passive]\n        Passives requires insight. You gain insight by killing enemies and collecting insight capacity items.`;\n    }\n\n    private openCharacterLevelModal() {\n        assertDefined(this.data.levelList);\n        createLevelModal({\n            title: 'Character',\n            level: this.level,\n            levelData: this.data.levelList\n        });\n    }\n\n    private updateCharacterLevel() {\n        if (!this.data.levelList) {\n            return;\n        }\n        this.page.querySelectorStrict('[data-level]').textContent = this.level.value.toFixed();\n        const modList = this.data.levelList[this.level.value - 1]?.modList ?? [];\n        player.modDB.replace('Character', Modifier.extractStatModifierList(...Modifier.modListFromTexts(modList)));\n        player.updateStatsDirect(PlayerUpdateStatsFlag.Persistent);\n    }\n\n    serialize(save: Serialization) {\n        save.character = {\n            level: this.level.value,\n            attackSkills: this.attackSkills?.serialize(),\n            auraSkills: this.auraSkills?.serialize(),\n            passiveSkills: this.passiveSkills?.serialize(),\n        };\n    }\n\n    deserialize({ character: save }: UnsafeSerialization) {\n        if (isNumber(save?.level)) {\n            this.level.set(save.level);\n        }\n        if (save?.attackSkills) {\n            this.attackSkills?.deserialize(save.attackSkills);\n        }\n        if (save?.auraSkills) {\n            this.auraSkills?.deserialize(save.auraSkills);\n        }\n        if (save?.passiveSkills) {\n            this.passiveSkills?.deserialize(save.passiveSkills);\n        }\n\n    }\n}", "\nexport type CraftType = 'Reforge' | 'Add' | 'Remove' | 'Upgrade' | 'Randomize Numericals';\nexport type CraftTarget = 'All' | 'Single';\nexport type CraftTemplateDescription = CraftTemplate['desc'];\nexport interface CraftTemplate {\n    id: string;\n    desc: typeof craftTemplates[number]['desc'] | typeof devCraftTemplates[number]['desc'];\n    type: CraftType;\n    target: CraftTarget;\n}\n\nexport const craftTemplates = [\n    { desc: 'Reforge item with new random modifiers', type: 'Reforge', target: 'All', id: '44f6fd' },\n    { desc: 'Add new modifier', type: 'Add', target: 'All', id: '0488a4' },\n    { desc: 'Remove modifier', type: 'Remove', target: 'Single', id: 'a4f8f8' },\n    { desc: 'Upgrade modifier', type: 'Upgrade', target: 'Single', id: '1f89b1' },\n    { desc: 'Randomize numerical values of a modifier', type: 'Randomize Numericals', target: 'Single', id: '2eb926' },\n    { desc: 'Randomize all numerical values', type: 'Randomize Numericals', target: 'All', id: '5d2686' }\n] as const satisfies readonly (Omit<CraftTemplate, 'desc'> & { desc: string; })[];\n\nexport const devCraftTemplates = [\n    { desc: '[Dev] Reforge High DPS', type: 'Reforge', target: 'All', id: '22dc2d' }\n] as const satisfies readonly (Omit<CraftTemplate, 'desc'> & { desc: string; })[];", "import { Modifier, type ModGroupList } from 'src/game/mods/Modifier';\nimport { ModifierTagList, type ModTemplate, type ModifierTag } from 'src/game/mods/types';\nimport { getRandomWeightedIndex, getRandomWeightedItem, remap } from 'src/shared/utils/utils';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport { getModGroupList, calcModTier, createModTags } from '../../mods/modUtils';\nimport type { Craft } from './CraftTable';\n\nexport interface CraftContext {\n    filterName?: string;\n    modList: Modifier[];\n    modGroupsList: ModGroupList[];\n    maxModCount: number;\n}\n\nexport interface ModifierCandidate {\n    text: string;\n    template: ModTemplate;\n    weight: number;\n    filter?: string[];\n}\ninterface MinMax { min: number; max: number; }\nexport interface CraftSuccessRates {\n    add: MinMax;\n    remove: MinMax;\n    upgrade: MinMax;\n    randomizeNumericals: MinMax;\n}\n\nexport abstract class CraftManager {\n\n    static reforge(candidateModList: ModifierCandidate[], weights: number[]) {\n        const reforgeModCount = getRandomWeightedIndex(weights) + 1;\n        const newModList = CraftManager.generateMods([], candidateModList, reforgeModCount);\n        return newModList;\n    }\n\n    static addModifier(modList: Modifier[], candidateModList: ModifierCandidate[]) {\n        const mod = this.generateMods(modList, candidateModList, 1)[0];\n        assertDefined(mod, 'failed generating modifier');\n        return mod;\n    }\n\n    static upgradeModifier(mod: Modifier, modGroupsList: ModGroupList[]) {\n        const modGroup = getModGroupList(mod.text, modGroupsList);\n        const index = modGroup.findIndex(x => x.text === mod.text) + 1;\n        const modText = modGroup[index]?.text;\n        assertDefined(modText, 'failed upgrading modifier. index out of range');\n        const newMod = Modifier.modFromText(modText);\n        newMod.randomizeValues();\n        return newMod;\n    }\n\n    static calcSuccessRate(craft: Craft, ctx: CraftContext, mod?: Modifier) {\n        const type = craft.template.type;\n        if (type === 'Add') {\n            return remap(ctx.maxModCount - 1, 1, craft.successRates.min, craft.successRates.max, ctx.modList.length);\n        }\n        if (type === 'Remove') {\n            assertDefined(mod);\n            return remap(ctx.maxModCount, 1, craft.successRates.min, craft.successRates.max, ctx.modList.length);\n        }\n        if (type === 'Upgrade') {\n            assertDefined(mod);\n            const modGroup = getModGroupList(mod.text, ctx.modGroupsList, ctx.filterName);\n            const tier = calcModTier(mod.text, modGroup);\n            const minChance = modGroup.length === 1 ? craft.successRates.max : craft.successRates.min;\n            const maxChance = craft.successRates.max;\n            return remap(2, modGroup.length, minChance, maxChance, tier);\n        }\n        if (type === 'Randomize Numericals') {\n            if (craft.template.target === 'Single') {\n                assertDefined(mod);\n                const modGroup = getModGroupList(mod.text, ctx.modGroupsList, ctx.filterName);\n                const tier = calcModTier(mod.text, modGroup);\n                const minChance = modGroup.length === 1 ? craft.successRates.max : craft.successRates.min;\n                const maxChance = craft.successRates.max;\n                return remap(tier, modGroup.length, minChance, maxChance, modGroup.length);\n            } else if (craft.template.target === 'All') {\n                return remap(1, ctx.maxModCount, craft.successRates.min, craft.successRates.max, ctx.modList.length);\n            }\n        }\n        return 100;\n    }\n\n    static generateMods(itemModList: Modifier[], candidateModList: ModifierCandidate[], count: number) {\n        const tagWeightMultiplier = 2;\n        const tagWeights = ModifierTagList.reduce((a, c) => {\n            a[c] = 1;\n            return a;\n        }, {} as Record<ModifierTag, number>);\n        const addTagWeight = (mod: Modifier) => createModTags(mod.template.stats).forEach(x => tagWeights[x] *= tagWeightMultiplier);\n        itemModList.forEach(x => addTagWeight(x));\n        const newModList: Modifier[] = [];\n        for (let i = 0; i < count; i++) {\n            candidateModList = candidateModList.filter(x => !itemModList.concat(newModList).some(y => x.template.desc === y.template.desc));\n            if (candidateModList.length === 0) {\n                return [];\n            }\n            const candidateCopyList = candidateModList.map(x => {\n\n                const tags = createModTags(x.template.stats);\n                const weight = tags.reduce((a, c) => a *= tagWeights[c], x.weight);\n                return { ...x, weight };\n            });\n            const candidate = getRandomWeightedItem(candidateCopyList);\n            if (!candidate) {\n                continue;\n            }\n\n            const mod = Modifier.modFromText(candidate.text);\n            mod.randomizeValues();\n            addTagWeight(mod);\n            newModList.push(mod);\n        }\n        return newModList;\n    }\n}", "import type { Modifier } from './Modifier';\nimport { getFormattedTag } from '../utils/utils';\nimport type { ModifierTag } from './types';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\nimport { ModalElement } from 'src/shared/customElements/ModalElement';\nimport { createModTags } from './modUtils';\nimport { assertDefined } from '../../shared/utils/assert';\n\ntype AdditionalProperties = [string, string][];\n\nexport class ModifierInfoPopup {\n\n    constructor(readonly mod: Modifier, readonly additionalProperties: AdditionalProperties = []) {\n        const modal = createCustomElement(ModalElement);\n        modal.minWidth = '10em';\n        modal.setTitle('Modifier Info');\n        const body = document.createElement('div');\n        body.style.textAlign = 'left';\n\n        this.addTags(body, [...createModTags(mod.template.stats)]);\n        this.addAdditionalProperties(body, additionalProperties);\n\n        this.addDesc(body, mod);\n        modal.body.appendChild(body);\n    }\n\n    private addTags(body: HTMLElement, tags: readonly ModifierTag[]) {\n        body.insertAdjacentHTML('beforeend', `<div>Tags: ${tags.map(x => getFormattedTag(x)).join(', ')}</div>`);\n    }\n\n    private addAdditionalProperties(body: HTMLElement, properties: AdditionalProperties) {\n        for (const [name, value] of properties) {\n            body.insertAdjacentHTML('beforeend', `<div>${name}: ${value}</div>`);\n        }\n    }\n\n    private addDesc(body: HTMLElement, mod: Modifier) {\n        const regex = /\\{([^}]+)\\}/g;\n        let i = 0;\n        const desc = mod.text.replace(regex, (_, $1) => {\n            const rangeValue = mod.rangeValues[i++];\n            assertDefined(rangeValue);\n            const { value, decimalCount } = rangeValue;\n            const valueText = value.toFixed(decimalCount);\n            return `${valueText}(${$1})`;\n        });\n        body.insertAdjacentHTML('beforeend', `<div class=\"g-mod-desc\" style=\"text-align: center; padding-top: 0.3em;\">${desc}</div>`);\n    }\n}", "import type { ModGroupList, Modifier } from './Modifier';\nimport { ModifierInfoPopup } from './ModifierInfoPopup';\nimport { calcModTier, getModGroupList, sortModifiers } from './modUtils';\n\n\nexport function* generateModListElements(params: { modList: Modifier[]; modGroupsList?: ModGroupList[]; }): Generator<HTMLElement> {\n    sortModifiers(params.modList);\n    for (const mod of params.modList) {\n        const element = document.createElement('li');\n        element.setAttribute('data-info', '');\n        element.setAttribute('data-mod', mod.template.id);\n        element.textContent = mod.desc;\n        element.addEventListener('click', () => {\n            const additionalProperties: [string, string][] = [];\n            if (params.modGroupsList) {\n                const tier = calcModTier(mod.text, getModGroupList(mod.text, params.modGroupsList));\n                additionalProperties.push(['Tier', tier.toFixed()]);\n            }\n            new ModifierInfoPopup(mod, additionalProperties);\n        });\n        yield element;\n    }\n}\n", "import { assertDefined, assertNonNullable } from '../../../shared/utils/assert';\nimport { EventEmitter } from '../../../shared/utils/EventEmitter';\nimport { randomRangeInt } from '../../../shared/utils/utils';\nimport { extractStats, calcPlayerCombatStats } from '../../calc/calcStats';\nimport { player } from '../../game';\nimport { ModDB } from '../../mods/ModDB';\nimport { Modifier } from '../../mods/Modifier';\nimport { calcModTier, getModGroupList } from '../../mods/modUtils';\nimport { evalCost, subtractCost } from '../../utils/utils';\nimport { CraftManager } from './CraftManager';\nimport { type AdvancedReforge, type CraftContext } from './CraftTable';\n\n\nexport class Crafting {\n    readonly craftAction = new EventEmitter<'Cancel'>();\n    constructor(private readonly ctx: CraftContext) {\n\n    }\n\n    //#region Process Templates\n    async processCraft(mod?: Modifier) {\n        assertDefined(this.ctx.item.modListCrafting);\n        assertNonNullable(this.ctx.craft);\n\n        const successRate = CraftManager.calcSuccessRate(this.ctx.craft, {\n            filterName: this.ctx.item.name,\n            maxModCount: this.ctx.item.maxModCount,\n            modGroupsList: this.ctx.modGroupsList,\n            modList: this.ctx.item.modListCrafting\n        }, mod);\n\n        if (randomRangeInt(0, 100) > Math.floor(successRate)) {\n            return this.triggerItemDestroyAnim();\n        }\n\n        if (this.ctx.craft.template.type === 'Reforge') {\n            this.processReforge();\n        } else {\n            switch (this.ctx.craft.template.type) {\n                case 'Add': this.processAdd(); break;\n                case 'Remove':\n                    assertDefined(mod);\n                    this.processRemove(mod);\n                    break;\n                case 'Upgrade':\n                    assertDefined(mod);\n                    this.processUpgrade(mod);\n                    break;\n                case 'Randomize Numericals':\n                    this.processRandomizedNumericals(mod);\n                    break;\n            }\n            if (this.ctx.craft.cost) {\n                subtractCost(this.ctx.craft.cost);\n            }\n        }\n    }\n\n    private processReforge() {\n        assertDefined(this.ctx.craft);\n        switch (this.ctx.craft.template.desc) {\n            case '[Dev] Reforge High DPS': this.performReforgeDevCraft(); break;\n            case 'Reforge item with new random modifiers': this.performReforgeCraft(); break;\n        }\n    }\n\n    private processAdd() {\n        assertDefined(this.ctx.item.modListCrafting);\n        const mod = CraftManager.addModifier(this.ctx.item.modListCrafting, this.ctx.candidateModList());\n        this.ctx.item.modListCrafting.push(mod);\n    }\n\n    private processRemove(mod: Modifier) {\n        assertDefined(this.ctx.item.modListCrafting);\n        this.ctx.item.modListCrafting.remove(mod);\n    }\n\n    private processUpgrade(mod: Modifier) {\n        assertDefined(this.ctx.item.modListCrafting);\n        const newMod = CraftManager.upgradeModifier(mod, this.ctx.modGroupsList);\n        this.ctx.item.modListCrafting.replace(mod, newMod);\n    }\n\n    private processRandomizedNumericals(mod?: Modifier) {\n        assertDefined(this.ctx.item.modListCrafting);\n        switch (this.ctx.craft?.template.target) {\n            case 'All': this.ctx.item.modListCrafting.forEach(x => x.randomizeValues()); break;\n            case 'Single':\n                assertDefined(mod);\n                mod.randomizeValues();\n                break;\n        }\n    }\n\n    //#endregion\n\n\n    //#region Craft\n    private performReforgeDevCraft() {\n        const stats = extractStats(player.stats);\n        const curDps = calcPlayerCombatStats({ stats, modDB: player.modDB }).dps;\n\n        const modDB = new ModDB(player.modDB);\n        let lastDps = curDps;\n        let modList: Modifier[] = [];\n        for (let i = 0; i < 100; i++) {\n            const newModList = CraftManager.reforge(this.ctx.candidateModList(), [0, 0, 0, 0, 0, 1]);\n            modDB.replace('ReforgeDevCraft', Modifier.extractStatModifierList(...newModList));\n            const dps = calcPlayerCombatStats({ stats, modDB }).dps;\n            if (dps > lastDps || modList.length === 0) {\n                modList = newModList;\n                lastDps = dps;\n            }\n        }\n        this.ctx.item.modListCrafting = modList;\n    }\n\n    private performReforgeCraft() {\n        assertDefined(this.ctx.item.modListCrafting);\n        const advancedReforge = this.ctx.item.advancedReforge;\n        const useAdvReforge = (advancedReforge?.maxReforgeCount ?? 0) > 0;\n        let reforgeCount = 1;\n        if (advancedReforge && useAdvReforge) {\n            reforgeCount = advancedReforge.maxReforgeCount;\n        }\n        let success = false;\n        for (let i = 0; i < reforgeCount; i++) {\n            if (this.ctx.craft?.cost) {\n                if (!evalCost(this.ctx.craft.cost)) {\n                    break;\n                }\n                subtractCost(this.ctx.craft.cost);\n            }\n            const newModList = CraftManager.reforge(this.ctx.candidateModList(), this.ctx.item.reforgeWeights);\n            this.ctx.item.modListCrafting = newModList;\n\n            if (advancedReforge && useAdvReforge) {\n                const evaluateModItem = (modItem: AdvancedReforge['modItems'][number]) => {\n                    const mod = newModList.find(x => x.template.desc === modItem.text);\n                    if (!mod) {\n                        return false;\n                    }\n                    const modTier = calcModTier(mod.text, getModGroupList(mod.text, this.ctx.modGroupsList));\n                    if (modTier > modItem.tier) {\n                        return false;\n                    }\n                    return true;\n                };\n                success = advancedReforge.modItems.filter(x => x.text.length > 0 && x.tier > 0).every(evaluateModItem);\n                if (success) {\n                    break;\n                }\n            }\n        }\n        if (useAdvReforge) {\n            void this.triggerAdvReforgeOutcomeAnim(success);\n        }\n    }\n\n    //#endregion Craft\n\n    //#region Other\n\n    private async triggerItemDestroyAnim() {\n        const craftAreaElement = this.ctx.craftAreaElement.querySelectorStrict<HTMLElement>('[data-craft-area]');\n        const animations: Promise<void>[] = [...this.ctx.craftAreaElement.querySelectorAll('[data-mod]')].map(x => {\n            return new Promise(resolve => {\n                x.animate([\n                    { offset: 0, opacity: 1, filter: 'blur(0px)' },\n                    { offset: 1, opacity: 0, filter: 'blur(10px)' }\n                ], 600).addEventListener('finish', resolve.bind(this, undefined));\n            });\n        });\n        animations.push(new Promise(resolve => {\n            craftAreaElement.animate([\n                { offset: 0, opacity: 1 },\n                { offset: 1, opacity: 0 }\n            ], 600).addEventListener('finish', resolve.bind(this, undefined));\n        }));\n        document.body.style.pointerEvents = 'none';\n        await Promise.allSettled(animations);\n        this.ctx.craftAreaElement.querySelectorStrict<HTMLLegendElement>('[data-craft-backdrop]').click();\n        craftAreaElement.style.opacity = '1';\n        document.body.style.pointerEvents = 'all';\n\n        this.craftAction.invoke('Cancel');\n    }\n\n    private async triggerAdvReforgeOutcomeAnim(success: boolean) {\n        const animate: Promise<void> = new Promise(resolve => {\n            const outline = '1px solid rgba(255, 255, 255, 0)';\n            const anim = this.ctx.craftAreaElement.querySelectorStrict('[data-craft-area]').animate([\n                { outline },\n                { offset: 0.8, outlineColor: success ? 'green' : 'red' },\n                { offset: 1, outline }\n            ], 1000);\n            anim.addEventListener('finish', () => {\n                resolve();\n            });\n        });\n        await animate;\n    }\n\n    //#endregion Other\n}", "import { assertDefined, assertNonNullable } from 'src/shared/utils/assert';\nimport { craftTemplates, devCraftTemplates, type CraftTemplate, type CraftTemplateDescription } from './craftTemplates';\nimport { Modifier, type ModGroupList } from 'src/game/mods/Modifier';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\nimport { ModalElement } from 'src/shared/customElements/ModalElement';\nimport { CraftManager, type ModifierCandidate } from './CraftManager';\nimport { EventEmitter } from 'src/shared/utils/EventEmitter';\nimport { TextInputDropdownElement } from 'src/shared/customElements/TextInputDropdownElement';\nimport { game, GameInitializationStage, player } from '../../game';\nimport { ModDB } from '../../mods/ModDB';\nimport { calcPlayerCombatStats, extractStats } from '../../calc/calcStats';\nimport { ENVIRONMENT } from '../../../config';\nimport type GameConfig from '../../gameConfig/GameConfigExport';\nimport { evalCost } from '../../utils/utils';\nimport type { BlacksmithItem } from './Blacksmith';\nimport { calcModTier, getModGroupList } from '../../mods/modUtils';\nimport { generateModListElements } from '../../mods/modUtilsDOM';\nimport { Crafting } from './Crafting';\n\nexport interface Craft {\n    template: CraftTemplate;\n    desc: CraftTemplateDescription;\n    element: HTMLElement;\n    successRates: { min: number; max: number; };\n    cost?: GameConfig.Cost;\n}\n\nexport interface AdvancedReforge {\n    maxReforgeCount: number;\n    modItems: { text: string; tier: number; }[];\n}\n\nexport interface CraftContext {\n    item: BlacksmithItem;\n    craftList: GameConfig.BlacksmithCraft[];\n    craft: Craft | null;\n    craftAreaElement: HTMLElement;\n    modGroupsList: ModGroupList[];\n    candidateModList: () => ModifierCandidate[];\n}\n\nexport type CraftActionType = 'Confirm' | 'Cancel' | 'Change';\n\nexport class CraftTable {\n    readonly craftAction = new EventEmitter<{ item: BlacksmithItem; type: CraftActionType; }>();\n    readonly element: HTMLElement;\n    private readonly crafting: Crafting;\n    private readonly craftListElement: HTMLElement;\n    private craftList: Craft[] = [];\n    private abortController?: AbortController | null = null;\n\n    constructor(readonly ctx: CraftContext) {\n        this.crafting = new Crafting(ctx);\n        this.crafting.craftAction.listen(e => {\n            switch (e) {\n                case 'Cancel': this.cancel(); break;\n            }\n        });\n\n        this.element = document.createElement('div');\n        this.element.classList.add('craft-table');\n        this.element.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Craft Table</div>');\n        this.createToolbar();\n\n        this.craftListElement = document.createElement('ul');\n        this.craftListElement.classList.add('s-craft-list', 'g-scroll-list-v');\n        this.craftListElement.setAttribute('data-craft-list', '');\n        this.craftListElement.insertAdjacentHTML('beforeend', '<li><div>Description</div><div data-cost>Cost</div><div data-resource>Resource</div></li>');\n        this.element.appendChild(this.craftListElement);\n\n        this.stopCrafting();\n\n        if (ENVIRONMENT === 'development') {\n            this.addCraft({ desc: '[Dev] Reforge High DPS', successRates: { min: 100, max: 100 } });\n        }\n\n        for (const craftData of ctx.craftList) {\n            this.addCraft(craftData);\n        }\n\n        this.updateCraftListItemStates();\n\n        Object.values(game.resources).forEach(x => x.addListener('change', () => {\n            if (game.initializationStage >= GameInitializationStage.Done) {\n                this.updateCraftListItemStates();\n            }\n        }));\n\n        new IntersectionObserver((entries) => {\n            if (entries[0]?.isIntersecting) {\n                this.updateCraftList();\n            }\n        }).observe(this.craftListElement);\n    }\n\n    private createToolbar() {\n        const toolbarElement = document.createElement('div');\n        toolbarElement.classList.add('s-toolbar', 'g-toolbar');\n        toolbarElement.setAttribute('data-toolbar', '');\n\n        const startCraftingButton = document.createElement('button');\n        startCraftingButton.setAttribute('data-start-crafting-button', '');\n        startCraftingButton.textContent = 'Craft';\n        startCraftingButton.addEventListener('click', this.startCrafting.bind(this));\n\n        const compareButton = document.createElement('button');\n        compareButton.setAttribute('data-compare-button', '');\n        compareButton.textContent = 'Compare';\n        compareButton.addEventListener('click', this.openCompareModal.bind(this));\n\n        const confirmButton = document.createElement('button');\n        confirmButton.setAttribute('data-confirm-button', '');\n        confirmButton.setAttribute('data-role', 'confirm');\n        confirmButton.textContent = 'Confirm';\n        confirmButton.addEventListener('click', this.confirm.bind(this));\n\n        const cancelButton = document.createElement('button');\n        cancelButton.setAttribute('data-cancel-button', '');\n        cancelButton.setAttribute('data-role', 'cancel');\n        cancelButton.textContent = 'Cancel';\n        cancelButton.addEventListener('click', this.cancel.bind(this));\n\n        toolbarElement.append(startCraftingButton, compareButton, confirmButton, cancelButton);\n\n        this.element.appendChild(toolbarElement);\n\n        const advReforgeElement = document.createElement('button');\n        advReforgeElement.classList.add('hidden', 'advanced-reforge');\n        advReforgeElement.setAttribute('data-advanced-reforge-button', '');\n        advReforgeElement.textContent = 'Adv. Reforge';\n        advReforgeElement.addEventListener('click', () => {\n            this.openAdvancedReforgeModal();\n        });\n        toolbarElement.appendChild(advReforgeElement);\n\n    }\n\n    private updateToolbar() {\n        this.element.querySelectorStrict('[data-start-crafting-button]').classList.toggle('hidden', !!this.ctx.item.modListCrafting);\n        this.element.querySelectorStrict('[data-compare-button]').classList.toggle('hidden', !this.ctx.item.modListCrafting);\n        this.element.querySelectorStrict('[data-confirm-button]').classList.toggle('hidden', !this.ctx.item.modListCrafting);\n        this.element.querySelectorStrict('[data-cancel-button]').classList.toggle('hidden', !this.ctx.item.modListCrafting);\n    }\n\n    private updateCraftListItemStates() {\n        for (const craft of this.craftList) {\n            craft.element.classList.toggle('selected', craft === this.ctx.craft);\n            const disabled = !this.evalCraft(craft);\n            craft.element.toggleAttribute('disabled', disabled);\n        }\n    }\n\n    private createBackdrop() {\n        const element = document.createElement('div');\n        element.classList.add('craft-backdrop');\n        element.setAttribute('data-craft-backdrop', '');\n        element.addEventListener('click', () => {\n            element.remove();\n            this.clearCraftSelection();\n        });\n        this.ctx.craftAreaElement.append(element);\n    }\n\n    private removeBackdrop() {\n        this.ctx.craftAreaElement.querySelector<HTMLElement>('[data-craft-backdrop]')?.click();\n    }\n\n    private updateSuccessRateAttribute(e: MouseEvent) {\n        assertDefined(this.ctx.item.modListCrafting);\n\n        const craftAreaElement = this.ctx.craftAreaElement.querySelectorStrict('[data-craft-area]');\n        craftAreaElement.removeAttribute('data-success-rate');\n        if (!this.ctx.craft) {\n            return;\n        }\n\n        let mod: Modifier | undefined;\n        if (e.target instanceof HTMLElement && e.target.hasAttribute('data-mod') && e.target.getAttribute('data-craft') !== 'false') {\n            const id = e.target.getAttribute('data-mod');\n            mod = this.ctx.item.modListCrafting.find(x => x.template.id === id);\n        }\n\n        const successRate = CraftManager.calcSuccessRate(this.ctx.craft, {\n            filterName: this.ctx.item.name,\n            maxModCount: this.ctx.item.maxModCount,\n            modList: this.ctx.item.modListCrafting,\n            ...this.ctx\n        }, mod);\n\n        craftAreaElement.setAttribute('data-success-rate', successRate.toFixed());\n    }\n\n    private selectCraftById(id: string | null) {\n        this.ctx.craft = this.craftList.find(x => x.template.id === id) ?? null;\n\n        this.abortController?.abort();\n\n        const craftAreaElement = this.ctx.craftAreaElement.querySelectorStrict('[data-craft-area]');\n\n        craftAreaElement.querySelectorAll<HTMLElement>('[data-craft]').forEach(x => {\n            x.removeAttribute('data-craft');\n        });\n\n        this.updateCraftListItemStates();\n\n        if (!this.ctx.craft) {\n            return;\n        }\n\n        assertDefined(this.ctx.item.modListCrafting);\n        this.abortController = new AbortController();\n\n        switch (this.ctx.craft.template.target) {\n            case 'All':\n                craftAreaElement.querySelectorStrict('[data-mod-list]').setAttribute('data-craft', '');\n                break;\n            case 'Single':\n                craftAreaElement.querySelectorAll<HTMLElement>('[data-mod]').forEach(x => x.setAttribute('data-craft', ''));\n                break;\n        }\n\n        if (this.ctx.craft.template.type === 'Upgrade') {\n            const modElementList = [...craftAreaElement.querySelectorAll<HTMLElement>('[data-mod]')];\n            for (const modElement of modElementList) {\n                const id = modElement.getAttribute('data-mod');\n                const mod = this.ctx.item.modListCrafting.findStrict(x => x.template.id === id);\n                const tier = calcModTier(mod.text, getModGroupList(mod.text, this.ctx.modGroupsList));\n                const craftable = tier > 1;\n                modElement.setAttribute('data-craft', String(craftable));\n            }\n        }\n        if (this.ctx.craft.template.type === 'Randomize Numericals') {\n            const modElementList = [...craftAreaElement.querySelectorAll<HTMLElement>('[data-mod]')];\n            for (const modElement of modElementList) {\n                const id = modElement.getAttribute('data-mod');\n                const mod = this.ctx.item.modListCrafting.find(x => x.template.id === id);\n                const craftable = !!mod && mod.rangeValues.some(x => x.min !== x.max);\n                modElement.setAttribute('data-craft', String(craftable));\n            }\n        }\n        craftAreaElement.querySelectorAll<HTMLElement>('[data-craft]').forEach(x => {\n            assertNonNullable(this.abortController);\n            x.addEventListener('mouseover', this.updateSuccessRateAttribute.bind(this), { signal: this.abortController.signal });\n            x.addEventListener('click', this.performCraft.bind(this), { capture: true, signal: this.abortController.signal });\n        });\n        this.createBackdrop();\n    }\n\n    private startCrafting() {\n        this.ctx.item.modListCrafting = [];\n        this.craftAction.invoke({ item: this.ctx.item, type: 'Change' });\n        this.updateToolbar();\n        this.updateCraftListItemStates();\n    }\n\n    private async performCraft(e: MouseEvent) {\n        assertDefined(this.ctx.item.modListCrafting);\n        e.stopPropagation();\n\n        const modId = e.target instanceof HTMLElement ? e.target.getAttribute('data-mod') : undefined;\n        const mod = modId ? this.ctx.item.modListCrafting.findStrict(x => x.template.id === modId) : undefined;\n\n        await this.crafting.processCraft(mod);\n\n        this.craftAction.invoke({ item: this.ctx.item, type: 'Change' });\n\n        const craft = this.ctx.craft;\n        if (craft) {\n            this.removeBackdrop();\n            if (this.evalCraft(craft)) {\n                this.selectCraftById(craft.template.id);\n            }\n        }\n    }\n\n    private evalCraft(craft: Craft) {\n        let valid = false;\n        if (this.ctx.item.modListCrafting) {\n            switch (craft.template.type) {\n                case 'Reforge':\n                    valid = true;\n                    break;\n                case 'Add':\n                    valid = this.ctx.item.modListCrafting.length < this.ctx.item.maxModCount && CraftManager.generateMods(this.ctx.item.modListCrafting, this.ctx.candidateModList(), 1).length !== 0;\n                    break;\n                case 'Remove':\n                case 'Upgrade':\n                case 'Randomize Numericals':\n                    valid = this.ctx.item.modListCrafting.length !== 0;\n                    break;\n            }\n        }\n        if (craft.cost && !evalCost(craft.cost)) {\n            valid = false;\n        }\n        return valid;\n    }\n\n    private confirm() {\n        this.craftAction.invoke({ item: this.ctx.item, type: 'Confirm' });\n        this.stopCrafting();\n    }\n\n    private cancel() {\n        this.stopCrafting();\n        this.craftAction.invoke({ item: this.ctx.item, type: 'Cancel' });\n    }\n\n    private stopCrafting() {\n        delete this.ctx.item.modListCrafting;\n        this.updateToolbar();\n        this.clearCraftSelection();\n        this.updateCraftListItemStates();\n    }\n\n    private clearCraftSelection() {\n        this.selectCraftById(null);\n    }\n\n    private openCompareModal() {\n        assertDefined(this.ctx.item.modListCrafting);\n        const modal = createCustomElement(ModalElement);\n        modal.setTitle('Compare');\n\n        const element = document.createElement('div');\n        element.classList.add('s-compare');\n\n        const stats = extractStats(player.stats);\n        const dps1 = calcPlayerCombatStats({ stats, modDB: player.modDB }).dps;\n\n        const modDB = new ModDB(player.modDB);\n        modDB.replace(`Blacksmith/${this.ctx.item.name}`, Modifier.extractStatModifierList(...this.ctx.item.modListCrafting));\n        const dps2 = calcPlayerCombatStats({ stats, modDB }).dps;\n        const dpsCompareElement = document.createElement('div');\n        dpsCompareElement.classList.add('dps-compare');\n\n        dpsCompareElement.innerHTML = `<span data-tag=\"${dps2 > dps1 ? 'valid' : dps2 < dps1 ? 'invalid' : ''}\">DPS: <var>${dps1.toFixed(0)}</var> \u2192 <var>${dps2.toFixed(0)}</var></span>`;\n\n        element.appendChild(dpsCompareElement);\n\n\n        const createModListElement = (modList: Modifier[]) => {\n            const element = document.createElement('ul');\n            element.classList.add('g-mod-list');\n            element.append(...generateModListElements({ modList, modGroupsList: this.ctx.modGroupsList }));\n            return element;\n        };\n\n        const a = createModListElement(this.ctx.item.modList);\n        const b = createModListElement(this.ctx.item.modListCrafting);\n        element.append(a, b);\n\n        const missingModifiers = this.ctx.item.modList.filter(x => !(this.ctx.item.modListCrafting ?? []).some(y => y.template === x.template));\n        [...a.querySelectorAll<HTMLElement>('[data-mod]')].filter(x => missingModifiers.find(y => y.desc === x.textContent)).forEach(x => x.setAttribute('data-tag', 'invalid'));\n\n        const additions = this.ctx.item.modListCrafting.filter(x => !this.ctx.item.modList.some(y => y.template === x.template));\n        [...b.querySelectorAll<HTMLElement>('[data-mod]')].filter(x => additions.find(y => y.desc === x.textContent)).forEach(x => x.setAttribute('data-tag', 'valid'));\n\n        modal.addBodyElement(element);\n\n        this.element.appendChild(modal);\n    }\n\n    private openAdvancedReforgeModal() {\n        const modal = createCustomElement(ModalElement);\n        modal.classList.add('adv-reforge-modal');\n        const bodyElement = document.createElement('div');\n        bodyElement.classList.add('s-adv-reforge');\n        const createMaxReforgeCountInputElement = () => {\n            const label = document.createElement('span');\n            label.classList.add('max-reforge-count-label');\n            label.textContent = 'Max Reforge Count';\n            const input = document.createElement('input');\n            input.classList.add('max-reforge-count-input');\n            label.setAttribute('data-max-reforge-count-input', '');\n            input.setAttribute('type', 'number');\n\n            const advancedReforge = this.ctx.item.advancedReforge;\n            assertDefined(advancedReforge);\n            input.addEventListener('change', () => {\n                const value = parseInt(input.value || '0');\n                advancedReforge.maxReforgeCount = value;\n            });\n            input.value = advancedReforge.maxReforgeCount.toFixed();\n            bodyElement.append(label, input);\n        };\n\n        const createRowElement = (modItem: AdvancedReforge['modItems'][number]): HTMLElement => {\n            //Modifier\n            const modTextDropdown = createCustomElement(TextInputDropdownElement);\n            // modTextDropdown.setReadonly();\n            modTextDropdown.setInputText(modItem.text);\n            const modListSet = new Set(this.ctx.candidateModList().map(x => x.template.desc));\n            const none = 'None';\n            modTextDropdown.setDropdownList([none, ...modListSet]);\n            modTextDropdown.onInputChange = ({ text }) => {\n                modItem.text = text === none ? '' : text;\n                if (modItem.text.length === 0) {\n                    modTextDropdown.setInputText('');\n                }\n                updateTierInput();\n            };\n\n            const updateTierInput = () => {\n                const modText = modItem.text;\n                const modList = this.ctx.candidateModList().filter(x => x.template.desc === modText);\n                const modListCount = modList.length;\n                const filterList = [...Array(modListCount)].map((_, i) => `Tier ${i + 1}`);\n                tierDropdown.setDropdownList(filterList);\n                modItem.tier = Math.min(modItem.tier || 1, modListCount);\n                tierDropdown.setInputText(filterList[modItem.tier - 1] ?? '');\n            };\n\n            //Tier\n            const tierDropdown = createCustomElement(TextInputDropdownElement);\n            tierDropdown.setReadonly();\n            tierDropdown.onInputChange = ({ index }) => {\n                modItem.tier = index + 1;\n            };\n            updateTierInput();\n\n            const row = document.createElement('div');\n            row.classList.add('s-row');\n            row.append(modTextDropdown, tierDropdown);\n            return row;\n        };\n\n        createMaxReforgeCountInputElement();\n        const conditionsElement = document.createElement('div');\n        conditionsElement.classList.add('s-conditions');\n        conditionsElement.insertAdjacentHTML('beforeend', '<div>Conditions</div>');\n        for (let i = 0; i < this.ctx.item.maxModCount; i++) {\n            assertDefined(this.ctx.item.advancedReforge);\n            const modItem: AdvancedReforge['modItems'][number] = this.ctx.item.advancedReforge.modItems[i] ?? { text: '', tier: 0 };\n            assertDefined(modItem);\n            this.ctx.item.advancedReforge.modItems[i] = modItem;\n            const rowElement = createRowElement(modItem);\n            conditionsElement.appendChild(rowElement);\n        }\n        bodyElement.appendChild(conditionsElement);\n\n        modal.addBodyElement(bodyElement);\n        this.element.appendChild(modal);\n    }\n\n\n    initItem(item: BlacksmithItem) {\n        this.ctx.item = item;\n        this.updateToolbar();\n        this.updateCraftListItemStates();\n    }\n\n    unlockAdvReforge() {\n        this.element.querySelectorStrict('[data-advanced-reforge-button]').classList.remove('hidden');\n    }\n\n    addCraft(craftData: GameConfig.BlacksmithCraft) {\n        const template = [...craftTemplates, ...devCraftTemplates].findStrict(x => x.desc === craftData.desc);\n        const element = document.createElement('li');\n        element.classList.add('g-list-item');\n        element.setAttribute('data-craft-id', template.id);\n        const resource = this.craftList.length === 0 ? 'A Very Long Resource Name' : 'Gold';\n        element.insertAdjacentHTML('beforeend', `<div>${template.desc}</div><var data-cost>0</var><var data-resource>${resource}</var>`);\n        element.addEventListener('click', this.selectCraftById.bind(this, template.id));\n        this.craftListElement.appendChild(element);\n        const craft: Craft = {\n            template: template,\n            desc: template.desc as CraftTemplateDescription,\n            element,\n            successRates: craftData.successRates,\n            cost: craftData.cost\n        };\n        this.craftList.push(craft);\n        this.updateCraftList();\n    }\n\n    updateCraftList() {\n        this.craftListElement.querySelectorAll('[data-craft-id]').forEach(x => {\n            const id = x.getAttribute('data-craft-id');\n            const cost = this.craftList.findStrict(x => x.template.id === id).cost;\n            x.querySelectorStrict('[data-resource]').textContent = cost ? cost.name : '';\n            x.querySelectorStrict('[data-cost]').textContent = cost ? cost.value.toFixed() : '';\n        });\n\n        requestAnimationFrame(() => {\n            setTimeout(() => {\n                const calcWidth = (elements: HTMLElement[]) => {\n                    let maxWidth = 0;\n                    for (const element of elements) {\n                        maxWidth = Math.max(maxWidth, element.offsetWidth);\n                    }\n                    elements.forEach(x => x.style.minWidth = CSS.px(maxWidth).toString());\n                    return maxWidth;\n                };\n                calcWidth([...this.craftListElement.querySelectorAll<HTMLElement>('[data-cost]')]);\n                calcWidth([...this.craftListElement.querySelectorAll<HTMLElement>('[data-resource]')]);\n            }, 100);\n        });\n    }\n}", "import { Component } from 'src/game/components/Component';\nimport { player } from 'src/game/game';\nimport { Modifier, type ModGroupList } from '../../mods/Modifier';\nimport type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport type { Serialization, UnsafeSerialization } from 'src/game/serialization';\nimport { modTemplateList } from 'src/game/mods/modTemplates';\nimport { isNumber } from 'src/shared/utils/utils';\nimport { createLevelModal, createTitleElement } from '../../utils/dom';\nimport { PlayerUpdateStatsFlag } from '../../Player';\nimport { Value } from '../../../shared/utils/Value';\nimport { assertDefined } from '../../../shared/utils/assert';\nimport type { ModifierCandidate } from './CraftManager';\nimport { CraftTable, type AdvancedReforge } from './CraftTable';\nimport { createCustomElement } from '../../../shared/customElements/customElements';\nimport { TextInputDropdownElement } from '../../../shared/customElements/TextInputDropdownElement';\nimport { generateModListElements } from '../../mods/modUtilsDOM';\n\nexport interface BlacksmithItem {\n    id: string;\n    name: string;\n    reforgeWeights: number[];\n    maxModCount: number;\n    modList: Modifier[];\n    modListCrafting?: Modifier[];\n    advancedReforge?: AdvancedReforge;\n}\n\nexport class Blacksmith extends Component {\n    private readonly modGroupsList: ModGroupList[] = [];\n    private readonly candidateModList: ModifierCandidate[] = [];\n    private readonly craftTable: CraftTable;\n    private readonly level = new Value(1);\n    private readonly itemList: BlacksmithItem[];\n    constructor(readonly data: GameConfig.Blacksmith) {\n        super('blacksmith');\n\n        const titleElement = createTitleElement({\n            label: 'Blacksmith',\n            levelClickCallback: data.levelList ? this.openBlacksmithLevelModal.bind(this) : undefined,\n            helpText: this.getHelpText(),\n        });\n        this.page.appendChild(titleElement);\n\n        const itemListDropdownParent = document.createElement('div');\n        itemListDropdownParent.classList.add('s-item-dropdown');\n        const itemListDropdown = createCustomElement(TextInputDropdownElement);\n        itemListDropdown.setReadonly();\n        itemListDropdown.setDropdownList(data.itemList.map(x => x.name));\n        itemListDropdown.onInputChange = ({ index }) => {\n            const item = this.itemList[index];\n            assertDefined(item);\n            this.updateModListElements(item);\n            this.craftTable.initItem(item);\n        };\n        itemListDropdownParent.appendChild(itemListDropdown);\n        this.page.appendChild(itemListDropdownParent);\n\n        const craftAreaElement = document.createElement('div');\n        craftAreaElement.classList.add('s-craft-area');\n        craftAreaElement.setAttribute('data-craft-area', '');\n        this.page.appendChild(craftAreaElement);\n\n        craftAreaElement.insertAdjacentHTML('beforeend', '<ul class=\"s-mod-list g-mod-list\" data-mod-list></ul>');\n\n        this.itemList = this.data.itemList.map(x => ({\n            id: x.id,\n            name: x.name,\n            modList: [],\n            reforgeWeights: x.reforgeWeights,\n            maxModCount: x.reforgeWeights.length,\n            advancedReforge: data.crafting.advancedReforge ? { maxReforgeCount: 0, modItems: [] } : undefined\n        }));\n        const firstItem = this.itemList[0];\n        assertDefined(firstItem);\n\n        this.craftTable = new CraftTable({\n            item: firstItem,\n            craftAreaElement: this.page,\n            craft: null,\n            craftList: data.crafting.craftList,\n            modGroupsList: this.modGroupsList,\n            candidateModList: () => {\n                return this.candidateModList.filter(x => !x.filter || x.filter.includes(this.craftTable.ctx.item.name));\n            },\n        });\n        this.page.appendChild(this.craftTable.element);\n\n        for (const modList of data.modLists) {\n            const groupList: ModGroupList = [];\n            this.modGroupsList.push(groupList);\n            for (const modData of modList) {\n                this.level.registerTargetValueCallback(modData.level, () => {\n                    const template = modTemplateList.findStrict(x => x.desc === Modifier.getTemplate(modData.mod)?.desc);\n                    this.candidateModList.push({ text: modData.mod, template, weight: modData.weight, filter: modData.itemFilter });\n                    groupList.push({ text: modData.mod, filter: modData.itemFilter });\n                });\n            }\n        }\n\n        this.craftTable.craftAction.listen(({ item, type }) => {\n            switch (type) {\n                case 'Confirm':\n                    assertDefined(item.modListCrafting);\n                    item.modList = item.modListCrafting;\n                    this.applyModifiers(item);\n                    break;\n                case 'Cancel':\n                    delete item.modListCrafting;\n                    break;\n            }\n            this.updateModListElements(item);\n        });\n\n        this.updateBlacksmithLevel();\n        this.level.addListener('change', this.updateBlacksmithLevel.bind(this));\n\n        if (data.crafting.advancedReforge) {\n            this.level.registerTargetValueCallback(data.crafting.advancedReforge.requirements.blacksmithLevel, this.craftTable.unlockAdvReforge.bind(this.craftTable));\n        }\n    }\n\n    private getHelpText() {\n        return `Craft your items using the craft table.\n        New and better modifiers become available as you level up the blacksmith.`;\n    }\n\n    private updateModListElements(item: BlacksmithItem) {\n        const modList = item.modListCrafting ?? item.modList;\n        this.page.querySelectorStrict('[data-mod-list]').replaceChildren(...generateModListElements({ modList, modGroupsList: this.modGroupsList }));\n    }\n\n    private openBlacksmithLevelModal() {\n        assertDefined(this.data.levelList);\n        createLevelModal({\n            title: 'Blacksmith',\n            level: this.level,\n            levelData: this.data.levelList\n        });\n    }\n\n    private updateBlacksmithLevel() {\n        if (!this.data.levelList) {\n            return;\n        }\n        this.page.querySelectorStrict('[data-level]').textContent = this.level.value.toFixed();\n        const modList = this.data.levelList?.[this.level.value - 1]?.modList ?? [];\n        player.modDB.replace('BlacksmithUpgrade', Modifier.extractStatModifierList(...Modifier.modListFromTexts(modList)));\n        player.updateStatsDirect(PlayerUpdateStatsFlag.Persistent);\n    }\n\n    private applyModifiers(item: BlacksmithItem) {\n        player.modDB.replace(`Blacksmith/${item.name}`, Modifier.extractStatModifierList(...item.modList));\n    }\n\n    serialize(save: Serialization) {\n        save.blacksmith = {\n            level: this.level.value ?? 0,\n            itemList: this.itemList.map(item => ({\n                id: item.id,\n                modList: item.modList.map(mod => ({ srcId: this.data.modLists.flatMap(x => x).findStrict(y => y.mod === mod.text).id, values: mod.values })),\n                modListCrafting: item.modListCrafting?.map(mod => ({ srcId: this.data.modLists.flatMap(x => x).findStrict(y => y.mod === mod.text).id, values: mod.values })) ?? undefined,\n                advReforge: item.advancedReforge ? { count: item.advancedReforge.maxReforgeCount, modItems: item.advancedReforge.modItems } : undefined\n            })),\n        };\n    }\n\n    deserialize({ blacksmith: save }: UnsafeSerialization) {\n        if (!save) {\n            return;\n        }\n        if (isNumber(save.level)) {\n            this.level.set(save.level);\n        }\n\n        for (const itemData of save.itemList ?? []) {\n            const srcItem = this.itemList.find(x => x.id === itemData?.id);\n            if (!srcItem) {\n                continue;\n            }\n\n            srcItem.modList = Modifier.deserialize(...itemData?.modList?.map(x =>\n                ({\n                    text: this.data.modLists.flatMap(y => y).find(y => y.id === x?.srcId)?.mod,\n                    srcId: x?.srcId, values: x?.values\n                })) ?? []);\n            srcItem.modListCrafting = itemData?.modListCrafting ? Modifier.deserialize(...itemData?.modListCrafting?.map(x =>\n                ({\n                    text: this.data.modLists.flatMap(y => y).find(y => y.id === x?.srcId)?.mod,\n                    srcId: x?.srcId, values: x?.values\n                })) ?? []) : undefined;\n\n            if (srcItem.advancedReforge && itemData?.advReforge) {\n                srcItem.advancedReforge = { maxReforgeCount: itemData.advReforge.count ?? 0, modItems: itemData.advReforge.modItems?.map(x => ({ text: x?.text ?? '', tier: x?.tier ?? 0 })) ?? [] };\n            }\n        }\n\n        this.itemList.forEach(x => this.applyModifiers(x));\n        if (this.itemList[0]) {\n            if (this.itemList[0].modListCrafting) {\n                this.craftTable.initItem(this.itemList[0]);\n            }\n            this.updateModListElements(this.itemList[0]);\n        }\n    }\n}", "import { game } from '../game';\nimport type { Requirements } from '../gameConfig/GameConfig';\n\n\nexport function evaluateStatRequirements(requirement: Requirements | undefined, callback: () => void) {\n    const requirements = [];\n    if (requirement?.curLevel) {\n        requirements.push({ stat: game.stats.level, value: requirement.curLevel });\n    }\n    // if (requirement?.maxLevel) {\n    //     requirements.push({ stat: game.stats.maxLevel, value: requirement.maxLevel });\n    // }\n    if (requirement?.world) {\n        requirements.push({ stat: game.stats.world, value: requirement.world });\n    }\n\n    let count = 0;\n    if (count === requirements.length) {\n        callback();\n        return;\n    }\n    for (const requirement of requirements) {\n        requirement.stat.registerTargetValueCallback(requirement.value, () => {\n            count++;\n            if (count === requirements.length) {\n                callback();\n            }\n        });\n    }\n}", "import type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport { Component } from '../Component';\nimport { createAssignableObject, createObjectInfoElements, unlockObject, type AssignableObject } from 'src/game/utils/objectUtils';\nimport { player, statistics } from 'src/game/game';\nimport { Modifier } from 'src/game/mods/Modifier';\nimport type { Serialization, UnsafeSerialization } from 'src/game/serialization';\nimport { createCustomElement } from '../../../shared/customElements/customElements';\nimport { ModalElement } from '../../../shared/customElements/ModalElement';\nimport { createModListElement } from '../../utils/dom';\nimport { PlayerUpdateStatsFlag } from '../../Player';\nimport { Value } from '../../../shared/utils/Value';\nimport { evalCost } from '../../utils/utils';\n\nexport interface GuildClass extends AssignableObject {\n    data: GameConfig.GuildClass;\n}\nexport interface Guild {\n    data: GameConfig.Guild;\n    element: HTMLElement;\n}\n\nexport class GuildHall extends Component {\n    private readonly guildClassList: GuildClass[];\n    private activeGuildClass: GuildClass | null = null;\n    private readonly level = new Value(1);\n    constructor(private readonly data: GameConfig.GuildHall) {\n        super('guildHall');\n\n        const titleElement = document.createElement('div');\n        titleElement.classList.add('g-title');\n        titleElement.textContent = 'Guild Hall';\n        if (data.levelList) {\n            titleElement.innerHTML = `<span class=\"g-clickable-text\">Guild Hall Lv.<var data-level>1</var></span>`;\n            titleElement.addEventListener('click', this.openGuildHallLevelModal.bind(this));\n            this.updateGuildHallLevel();\n        }\n        this.page.appendChild(titleElement);\n\n        const toolbar = document.createElement('div');\n        toolbar.classList.add('g-toolbar', 's-toolbar');\n        const resetClassElement = document.createElement('div');\n        resetClassElement.insertAdjacentHTML('beforeend', '<span class=\"g-clickable-text\">Reset</span>');\n        resetClassElement.addEventListener('click', this.resetClass.bind(this));\n        toolbar.appendChild(resetClassElement);\n        this.page.appendChild(toolbar);\n\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"g-scroll-list-v guild-class-list\" data-guild-class-list></ul>');\n        this.page.insertAdjacentHTML('beforeend', '<div data-item-info></div>');\n\n        this.guildClassList = [];\n        const fragment = document.createDocumentFragment();\n        for (const guild of this.data.guildList) {\n            const element = document.createElement('div');\n            element.classList.add('g-title');\n            element.insertAdjacentHTML('beforeend', `<span class=\"g-clickable-text\">${guild.name}</span>`);\n            element.addEventListener('click', () => {\n                const modal = createCustomElement(ModalElement);\n                modal.setTitle(`${guild.name} Guild`);\n                const modList = this.data.guildList.findStrict(x => x.name === guild.name).modList;\n                const modListElement = createModListElement(modList);\n                modal.addBodyElement(modListElement);\n            });\n            fragment.appendChild(element);\n            for (const guildClassData of this.data.guildClassList.filter(x => x.guildName === guild.name)) {\n                const guildClass: GuildClass = {\n                    ...createAssignableObject(guildClassData),\n                    data: guildClassData\n                };\n                guildClass.element.addEventListener('click', this.selectGuildClass.bind(this, guildClass));\n                this.guildClassList.push(guildClass);\n                this.level.registerTargetValueCallback(guildClassData.requirements?.guildHallLevel ?? 1, unlockObject.bind(this, guildClass));\n                fragment.appendChild(guildClass.element);\n            }\n        }\n        this.page.querySelectorStrict('[data-guild-class-list]').append(fragment);\n\n        player.stats.guildClass.texts = ['None'];\n\n        this.guildClassList.find(x => x.unlocked)?.element.click();\n        this.page.querySelector<HTMLElement>('[data-class-list] li')?.click();\n\n        this.level.addListener('change', this.updateGuildHallLevel.bind(this));\n    }\n\n    get selectedGuildClass() {\n        return this.guildClassList.find(x => x.selected);\n    }\n\n    private openGuildHallLevelModal() {\n        const modal = createCustomElement(ModalElement);\n        modal.setTitle(`Guild Hall Lv.${this.level.value.toFixed()}`);\n        const body = document.createElement('div');\n        const upgradeButton = document.createElement('button');\n        upgradeButton.textContent = 'Upgrade';\n        const cost = this.data.levelList?.[this.level.value - 1]?.upgradeCost;\n        if (cost) {\n            upgradeButton.toggleAttribute('disabled', evalCost(cost));\n            upgradeButton.textContent += `\\n${cost.value.toFixed()}${cost.name}`;\n        }\n        upgradeButton.addEventListener('click', () => {\n            this.level.add(1);\n            this.openGuildHallLevelModal();\n        });\n        body.appendChild(upgradeButton);\n        const modList = this.data.levelList?.[this.level.value - 1]?.modList ?? [];\n        const modListElement = createModListElement(modList);\n        body.appendChild(modListElement);\n        modal.addBodyElement(body);\n    }\n\n    private updateGuildHallLevel() {\n        const modList = this.data.levelList?.[this.level.value - 1]?.modList ?? [];\n        Modifier.extractStatModifierList(...Modifier.modListFromTexts(modList));\n        player.modDB.replace('GuildHall', Modifier.extractStatModifierList(...Modifier.modListFromTexts(modList)));\n        player.updateStatsDirect(PlayerUpdateStatsFlag.Persistent);\n    }\n\n    private selectGuildClass(guildClass?: GuildClass) {\n        this.guildClassList.forEach(x => {\n            x.selected = x === guildClass;\n            x.element.classList.toggle('selected', x.selected);\n        });\n        if (guildClass) {\n            this.showClassInfo(guildClass);\n        } else {\n            this.page.querySelector('[data-item-info]')?.replaceChildren();\n        }\n    }\n\n    private showClassInfo(guildClass: GuildClass) {\n\n        const elements = createObjectInfoElements({\n            name: guildClass.name,\n            modList: guildClass.data.modList\n        });\n        this.page.querySelector('[data-item-info]')?.replaceWith(elements.element) ?? this.page.appendChild(elements.element);\n\n        const button = document.createElement('button');\n        const updateButton = () => {\n            button.textContent = 'Assign';\n            button.setAttribute('data-tag', 'valid');\n        };\n        updateButton();\n        button.toggleAttribute('disabled', !guildClass.unlocked || player.stats.guildClass.value !== 0);\n        button.addEventListener('click', () => {\n            this.assignClass(guildClass);\n            updateButton();\n        });\n        elements.contentElement.appendChild(button);\n    }\n\n    private resetClass() {\n        this.assignClass(null);\n    }\n\n    private assignClass(guildClass: GuildClass | null) {\n        this.activeGuildClass = guildClass;\n        if (guildClass) {\n            player.stats.guildClass.setText(guildClass.name);\n            player.modDB.replace('GuildClass', Modifier.extractStatModifierList(...Modifier.modListFromTexts(guildClass.data.modList)));\n            const guild = this.data.guildList.findStrict(x => x.name === guildClass.data.guildName);\n            player.modDB.replace('Guild', Modifier.extractStatModifierList(...Modifier.modListFromTexts(guild.modList)));\n        } else {\n            player.stats.guildClass.setDefault();\n            player.modDB.removeBySource('Guild');\n            player.modDB.removeBySource('GuildClass');\n            if (this.selectedGuildClass) {\n                this.selectGuildClass(this.selectedGuildClass);\n            }\n        }\n        if (this.activeGuildClass) {\n            this.selectGuildClass(this.activeGuildClass);\n        }\n\n        this.page.querySelectorAll('[data-guild-class-list] [data-id]').forEach(x => x.classList.toggle('m-text-green', x.getAttribute('data-id') === guildClass?.id));\n        statistics.updateStats('Player');\n    }\n\n    serialize(save: Serialization) {\n        save.guildHall = {\n            level: this.level.value,\n            classId: this.activeGuildClass?.data.id,\n        };\n    }\n\n    deserialize({ guildHall: save }: UnsafeSerialization) {\n        if (this.data.levelList && save?.level) {\n            this.level.set(save?.level);\n        }\n        const guildClass = this.guildClassList.find(x => x.data.id === save?.classId);\n        if (guildClass) {\n            this.assignClass(guildClass);\n            this.selectGuildClass(guildClass);\n        }\n    }\n}", "import type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport { Modifier } from 'src/game/mods/Modifier';\nimport { isDefined, pickOneFromPickProbability } from 'src/shared/utils/utils';\nimport { combat, game, notifications, player } from 'src/game/game';\nimport type * as GameSerialization from 'src/game/serialization';\nimport { createObjectInfoElements, unlockObject } from 'src/game/utils/objectUtils';\nimport { EventEmitter } from 'src/shared/utils/EventEmitter';\nimport { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { ENVIRONMENT } from '../../../../config';\nimport { addRankExp, createRankObject, getRankExpPct, tryUnlockNextRank, updateRankObjectListItemElement, type RankObject } from '../../../utils/rankObjectUtils';\n\ninterface Artifact extends RankObject<GameConfig.Artifact['rankList'][number]> {\n    id: string;\n    name: string;\n    probability: number;\n}\n\nexport class Artifacts {\n    readonly page: HTMLElement;\n    private onArtifactFound = new EventEmitter<Artifact>();\n    private artifactList: Artifact[];\n    constructor(data: GameConfig.Artifacts) {\n        this.page = document.createElement('div');\n        this.page.classList.add('p-artifacts');\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-toolbar\" data-artifacts-counter><span>Artifacts: <var data-cur>0</var>/<var data-max></var></span></div>');\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Artifact List</div>');\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"artifact-list g-scroll-list-v\" data-artifact-list></ul>');\n        this.page.insertAdjacentHTML('beforeend', '<div data-item-info></div>');\n\n        this.artifactList = data.artifactList.reduce((artifactList, artifactData) => {\n            const artifact: Artifact = {\n                probability: artifactData.probability ?? 0,\n                ...createRankObject(artifactData),\n            };\n            artifact.element.addEventListener('click', this.selectArtifact.bind(this, artifact));\n            this.page.querySelectorStrict('[data-artifact-list]').appendChild(artifact.element);\n            artifactList.push(artifact);\n            return artifactList;\n        }, [] as Artifact[]);\n\n        this.updateArtifactsCounter();\n\n        combat.events.enemyDeath.listen(() => {\n            this.tryUnlockArtifact();\n        });\n\n        player.stats.maxArtifacts.addListener('change', this.updateArtifactsCounter.bind(this));\n\n        this.onArtifactFound.listen(this.artifactAddExp.bind(this));\n\n        if (ENVIRONMENT === 'development') {\n            window.addEventListener('Dev:AddArtifact', e => {\n                const artifact = this.artifactList.find(x => x.name.toLowerCase() === e.detail.toLowerCase());\n                if (!artifact) {\n                    console.log('no artifact available');\n                    return;\n                }\n                unlockObject(artifact);\n                this.onArtifactFound.invoke(artifact);\n            }, { signal: game.abortSignal });\n        }\n    }\n\n    get selectedArtifact() {\n        return this.artifactList.find(x => x.selected);\n    }\n\n    get artifactCount() {\n        return this.artifactList.filter(x => x.assigned).length;\n    }\n\n    private updateArtifactsCounter() {\n        const element = this.page.querySelectorStrict('[data-artifacts-counter]');\n        element.querySelectorStrict('[data-cur]').textContent = this.artifactCount.toFixed();\n        element.querySelectorStrict('[data-max]').textContent = player.stats.maxArtifacts.value.toFixed();\n    }\n\n    private selectArtifact(artifact?: Artifact) {\n        this.artifactList.forEach(x => {\n            x.selected = x === artifact;\n            x.element.classList.toggle('selected', x.selected);\n        });\n        if (artifact) {\n            this.showArtifact(artifact);\n        } else {\n            this.page.querySelector('[data-item-info]')?.replaceChildren();\n        }\n    }\n\n    private assignArtifact(artifact: Artifact) {\n        artifact.assigned = true;\n        updateRankObjectListItemElement(artifact);\n        player.modDB.add(`Artifact/${artifact.name}`, Modifier.extractStatModifierList(...Modifier.modListFromTexts(artifact.rankData(artifact.curRank).modList)));\n        this.updateArtifactsCounter();\n    }\n\n    private unassignArtifact(artifact: Artifact) {\n        artifact.assigned = false;\n        artifact.element.removeAttribute('data-tag');\n        player.modDB.removeBySource(`Artifact/${artifact.name}`);\n        this.updateArtifactsCounter();\n    }\n\n    private showArtifact(artifact: Artifact) {\n\n        const itemInfoElements = createObjectInfoElements({\n            name: artifact.name,\n            modList: artifact.rankData(artifact.selectedRank).modList,\n            rankObj: artifact,\n            onRankChange: (item) => this.showArtifact(item as Artifact)\n        });\n        this.page.querySelector('[data-item-info]')?.replaceWith(itemInfoElements.element) ?? this.page.appendChild(itemInfoElements.element);\n\n        const button = document.createElement('button');\n        const updateButton = () => {\n            let disabled = true;\n            if (artifact.assigned) {\n                disabled = false;\n            } else if (this.artifactCount < player.stats.maxArtifacts.value) {\n                disabled = false;\n            }\n            button.textContent = artifact.assigned ? 'Unassign' : 'Assign';\n            button.toggleAttribute('disabled', disabled);\n            button.setAttribute('data-tag', !artifact.assigned ? 'valid' : 'invalid');\n        };\n        button.addEventListener('click', () => {\n            if (artifact.assigned) {\n                this.unassignArtifact(artifact);\n                if (artifact.selectedRank !== artifact.curRank) {\n                    artifact.curRank = artifact.selectedRank;\n                    this.assignArtifact(artifact);\n                }\n            } else {\n                artifact.curRank = artifact.selectedRank;\n                this.assignArtifact(artifact);\n            }\n            updateButton();\n        });\n        updateButton();\n        itemInfoElements.contentElement.appendChild(button);\n        this.updateArtifactInfo();\n    }\n\n    private updateArtifactInfo() {\n        const selectedArtifact = this.selectedArtifact;\n        if (!selectedArtifact) {\n            return;\n        }\n        const expbar = this.page.querySelector<ProgressElement>(`[data-item-info] ${ProgressElement.name}`);\n        if (expbar) {\n            expbar.value = getRankExpPct(selectedArtifact);\n        }\n    }\n\n    private tryUnlockArtifact() {\n        const candidates = this.artifactList.filter(x => x.curRank !== x.rankList.length);\n        const candidate = pickOneFromPickProbability(candidates);\n        if (!candidate) {\n            return;\n        }\n        if (!candidate.unlocked) {\n            unlockObject(candidate);\n            notifications.addNotification({\n                title: `New Artifact: ${candidate.name}`,\n                elementId: candidate.id\n            });\n        }\n        this.onArtifactFound.invoke(candidate);\n    }\n\n    private artifactAddExp(artifact: Artifact) {\n        addRankExp(artifact, 1);\n        if (artifact.curExp === artifact.maxExp) {\n            tryUnlockNextRank(artifact);\n        }\n        if (artifact.selected) {\n            this.updateArtifactInfo();\n        }\n    }\n\n    serialize(): GameSerialization.Treasury['artifacts'] {\n        return {\n            artifactNameList: this.artifactList.filter(x => x.unlocked).map(x => ({ id: x.id, assigned: x.assigned, expFac: x.curExp / x.maxExp }))\n        };\n    }\n\n    deserialize(save: DeepPartial<GameSerialization.Treasury['artifacts']>) {\n        for (const data of save?.artifactNameList?.filter(isDefined) || []) {\n            const artifact = this.artifactList.find(x => x.id === data.id);\n            if (!artifact) {\n                continue;\n            }\n            artifact.curExp = artifact.maxExp * (data.expFac ?? 0);\n            unlockObject(artifact);\n            if (data.assigned) {\n                this.assignArtifact(artifact);\n                if (!this.selectedArtifact) {\n                    this.selectArtifact(artifact);\n                }\n            }\n        }\n\n        const artifact = this.artifactList.find(x => x.assigned || x.selected || x.unlocked);\n        if (artifact) {\n            this.selectArtifact(artifact);\n        }\n    }\n}", "import { createCustomElement } from '../../../shared/customElements/customElements';\nimport { TabMenuElement } from '../../../shared/customElements/TabMenuElement';\nimport { player } from '../../game';\nimport type * as GameConfig from '../../gameConfig/GameConfig';\nimport { Modifier } from '../../mods/Modifier';\nimport { createLevelModal, createTitleElement } from '../../utils/dom';\nimport { Artifacts } from './artifacts/Artifacts';\nimport { Component } from '../Component';\nimport type { Serialization, UnsafeSerialization } from '../../serialization';\nimport { PlayerUpdateStatsFlag } from '../../Player';\nimport { Value } from '../../../shared/utils/Value';\nimport { isNumber } from '../../../shared/utils/utils';\nimport { assertDefined } from '../../../shared/utils/assert';\n\nexport class Treasury extends Component {\n    private readonly level = new Value(1);\n    private artifacts?: Artifacts;\n    constructor(private readonly data: GameConfig.Treasury) {\n        super('treasury');\n\n        const titleElement = createTitleElement({\n            label: 'Treasury',\n            levelClickCallback: data.levelList ? this.openTreasuryLevelModal.bind(this) : undefined\n        });\n        this.page.appendChild(titleElement);\n\n        const menu = createCustomElement(TabMenuElement);\n        menu.classList.add('s-menu');\n        menu.setDirection('horizontal');\n        this.page.appendChild(menu);\n\n        if (data.artifacts) {\n            this.artifacts = new Artifacts(data.artifacts);\n            menu.addMenuItem('Artifacts', 'artifacts', 0);\n            menu.registerPageElement(this.artifacts.page, 'artifacts');\n            this.page.append(this.artifacts.page);\n        }\n\n        this.updateTreasuryLevel();\n        this.level.addListener('change', this.updateTreasuryLevel.bind(this));\n    }\n\n    private openTreasuryLevelModal() {\n        assertDefined(this.data.levelList);\n        createLevelModal({\n            title: 'Treasury',\n            level: this.level,\n            levelData: this.data.levelList\n        });\n    }\n\n    private updateTreasuryLevel() {\n        if (!this.data.levelList) {\n            return;\n        }\n        this.page.querySelectorStrict('[data-level]').textContent = this.level.value.toFixed();\n        const modList = this.data.levelList?.[this.level.value - 1]?.modList ?? [];\n        player.modDB.replace('Treasury', Modifier.extractStatModifierList(...Modifier.modListFromTexts(modList)));\n        player.updateStatsDirect(PlayerUpdateStatsFlag.Persistent);\n    }\n\n    serialize(save: Serialization): void {\n        save.treasury = {\n            level: this.level.value,\n            artifacts: this.artifacts?.serialize()\n        };\n    }\n\n    deserialize({ treasury: save }: UnsafeSerialization): void {\n        if (isNumber(save?.level)) {\n            this.level.set(save.level);\n        }\n        this.artifacts?.deserialize(save?.artifacts);\n    }\n}", "import { assertDefined } from 'src/shared/utils/assert';\nimport { GameInitializationStage, game, notifications } from '../game';\nimport type { Component } from './Component';\nimport { Achievements } from './achievements/Achievements';\nimport { Character } from './character/Character';\nimport type * as GameSerialization from '../serialization';\nimport type * as GameConfig from 'src/game/gameConfig/GameConfig';\nimport { Blacksmith } from './blacksmith/Blacksmith';\nimport type { Serialization } from '../serialization';\nimport { evaluateStatRequirements } from '../statistics/statRequirements';\nimport { GuildHall } from './guildHall/GuildHall';\nimport { Treasury } from './treasury/Treasury';\n\ntype ComponentUnion = NonNullable<PropertyValuesToUnion<GameConfig.Components>>;\nexport class Components {\n    private readonly components = {\n        guildHall: { label: 'Guild Hall', constr: GuildHall },\n        character: { label: 'Character', constr: Character },\n        blacksmith: { label: 'Blacksmith', constr: Blacksmith },\n        treasury: { label: 'Treasury', constr: Treasury },\n        achievements: { label: 'Achievements', constr: Achievements },\n    } as const satisfies Record<GameConfig.ComponentName, { label: string; constr: new (data: UnionToIntersection<ComponentUnion>) => Component; }>;\n    private componentList: Component[] = [];\n\n\n    private addComponent(name: GameConfig.ComponentName) {\n        const components = game.gameConfig.components ?? {};\n        const componentData = components[name];\n        assertDefined(componentData, `gameConfig does not contain the component: ${name}`);\n\n        const instance = new this.components[name].constr(componentData as UnionToIntersection<ComponentUnion>);\n        const label = this.components[name].label;\n\n        const { menuItem } = game.addPage(instance.page, label, name);\n\n        this.componentList.push(instance);\n\n        if (game.initializationStage === GameInitializationStage.Done) {\n            notifications.addNotification({ title: `You Have Unlocked ${label}` });\n            game.addElementHighlight(menuItem);\n        }\n    }\n\n    init() {\n        for (const key of Object.keys(this.components) as GameConfig.ComponentName[]) {\n            const data = game.gameConfig.components?.[key];\n            if (!data) {\n                continue;\n            }\n            const requirements = 'requirements' in data ? data.requirements ?? {} : {};\n            evaluateStatRequirements(requirements, () => {\n                this.addComponent(key);\n            });\n        }\n    }\n\n    setup() {\n        for (const component of this) {\n            component.setup?.();\n        }\n    }\n\n    has(name: GameConfig.ComponentName) {\n        return this.componentList.some(x => x.name === name);\n    }\n\n    reset() {\n        this.componentList.forEach(x => {\n            x.dispose?.();\n            x.page.remove();\n            const menuItem = game.menu.querySelectorStrict<HTMLElement>(`[data-page-target=\"${x.name}\"]`);\n            game.menu.removeMenuItem(menuItem);\n            menuItem?.remove();\n        });\n        this.componentList.clear();\n    }\n\n    serialize(save: Serialization) {\n        for (const component of this.componentList) {\n            component.serialize?.(save);\n        }\n    }\n\n    deserialize(save: GameSerialization.UnsafeSerialization) {\n        for (const component of this.componentList) {\n            component.deserialize?.(save);\n        }\n    }\n\n    *[Symbol.iterator]() {\n        for (const component of this.componentList) {\n            yield component;\n        }\n    }\n}", "import { EventEmitter } from 'src/shared/utils/EventEmitter';\nimport { isDefined } from 'src/shared/utils/utils';\nimport { CustomElement } from './CustomElement';\n\nexport class AccordionElement extends CustomElement {\n    static readonly name = 'accordion-element';\n    private readonly header: HTMLElement;\n    private contentParent: HTMLElement;\n    readonly content: HTMLElement;\n    readonly onToggle = new EventEmitter<boolean>();\n    private _isOpen = false;\n    constructor() {\n        super();\n        this.header = document.createElement('div');\n        this.header.classList.add('header');\n        this.header.setAttribute('data-header', '');\n        this.header.insertAdjacentHTML('beforeend', '<div class=\"title\" data-title></div>');\n        this.header.addEventListener('click', this.open.bind(this));\n\n        this.contentParent = document.createElement('div');\n        this.contentParent.classList.add('content-parent');\n\n        this.content = document.createElement('div');\n        this.content.classList.add('s-content');\n        this.content.setAttribute('data-content', '');\n        this.contentParent.appendChild(this.content);\n    }\n\n    get isOpen() {\n        return this._isOpen;\n    }\n\n    disconnectedCallback(): void {\n        super.disconnectedCallback();\n        this.header.removeEventListener('click', this.open.bind(this));\n    }\n\n    init() {\n        this.replaceChildren(this.header, this.contentParent);\n    }\n\n    open() {\n        if (!this.content.firstChild?.hasChildNodes()) {\n            return;\n        }\n        this.toggle(!this.isOpen);\n    }\n\n    setTitle(title: string) {\n        this.header.querySelectorStrict('[data-title]').textContent = title;\n    }\n\n    setTitleElement(element: Element) {\n        this.header.querySelectorStrict('[data-title]').replaceWith(element);\n    }\n\n    setContentElements(...element: HTMLElement[]) {\n        this.content.replaceChildren(...element);\n        this.header.classList.toggle('has-content', this.content.childElementCount > 0);\n    }\n\n    toggle(open?: boolean) {\n        this._isOpen = isDefined(open) ? open : !this._isOpen;\n        this.header.classList.toggle('open', this.isOpen);\n        this.onToggle.invoke(this.isOpen);\n    }\n}", "import type { Statistic, StatisticOptions } from './Statistic';\nimport { isNumber, isString, toDecimals } from 'src/shared/utils/utils';\nimport { game, gameLoopAnim } from '../game';\nimport type * as GameSerialization from '../serialization';\nimport { type StatCollection } from './stats';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\nimport { AccordionElement } from 'src/shared/customElements/AccordionElement';\n\ninterface StatisticsGroup {\n    pageGroup: AccordionElement;\n    stickyGroup: AccordionElement;\n    statCollection: StatCollection;\n}\n\nexport class Statistics {\n    readonly page: HTMLElement;\n    private statisticsGroups = new Map<string, StatisticsGroup>();\n\n    constructor() {\n        this.page = document.createElement('div');\n        this.page.classList.add('p-statistics', 'hidden');\n\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Statistics</div>');\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"g-scroll-list-v\" data-stat-group-list></ul>');\n\n        game.addPage(this.page, 'Statistics', 'statistics');\n    }\n\n    init() {\n        gameLoopAnim.registerCallback(this.updateAll.bind(this), { delay: 1000 });\n    }\n\n    updateAll() {\n        for (const group of this.statisticsGroups.values()) {\n            this.updateGroup(group);\n        }\n    }\n\n    updateStats(name: string) {\n        const group = this.statisticsGroups.get(name);\n        if (!group) {\n            console.error(`${name} has not been added to statistics`);\n            return;\n        }\n        this.updateGroup(group);\n    }\n\n    createGroup(name: string, statCollection: StatCollection) {\n        if (this.statisticsGroups.has(name)) {\n            return this.statisticsGroups.get(name);\n        }\n\n        const pageGroup = createCustomElement(AccordionElement);\n        pageGroup.setTitle(name);\n        const body = document.createElement('ul');\n        for (const [statName, stat] of Object.entries(statCollection).filter(x => x[1].options.label)) {\n            const li = this.createStatElement(statName, stat);\n            body.appendChild(li);\n        }\n        pageGroup.setContentElements(body);\n        pageGroup.toggle(true);\n\n        const stickyGroup = createCustomElement(AccordionElement);\n        stickyGroup.setTitle(name);\n\n        this.page.querySelectorStrict('[data-stat-group-list]').appendChild(pageGroup);\n        game.page.querySelectorStrict('[data-sticky-stat-group-list]').appendChild(stickyGroup);\n\n        pageGroup.querySelectorAll<HTMLElement>('[data-stat]').forEach(element => element.addEventListener('click', () => {\n            const statName = element.getAttributeStrict('data-stat');\n            const stat = statCollection[statName];\n            if (!stat) {\n                return;\n            }\n            stat.sticky = !stat.sticky;\n            if (stat.sticky) {\n                this.insertSideGroupStatElement(group, statName);\n            } else {\n                group.stickyGroup.querySelector(`[data-stat=\"${statName}\"]`)?.remove();\n            }\n            this.updateGroup(group, { [statName]: stat });\n        }));\n\n        const group: StatisticsGroup = { pageGroup, stickyGroup, statCollection: statCollection };\n        this.statisticsGroups.set(name, group);\n\n        for (const [statName, stat] of Object.entries(group.statCollection)) {\n            if (stat.sticky) {\n                this.insertSideGroupStatElement(group, statName);\n            }\n        }\n\n        this.updateGroup(group);\n\n        stickyGroup.toggle(true);\n\n        return group;\n    }\n\n    private insertSideGroupStatElement(group: StatisticsGroup, statName: string) {\n        const stat = group.statCollection[statName];\n        assertDefined(stat);\n        const li = this.createStatElement(statName, stat);\n        const statValueText = this.formatVariableText(stat);\n        li.querySelectorStrict('[data-stat-value]').textContent = statValueText;\n        // group.sideGroup.appendChild(li);\n\n        //find previous\n        const statNames = Object.keys(group.statCollection);\n        const elements = [...group.stickyGroup.content.querySelectorAll<HTMLElement>('[data-stat]')];\n        elements.push(li);\n        elements.sort((a, b) => statNames.indexOf(a.getAttribute('data-stat') ?? '') - statNames.indexOf(b.getAttribute('data-stat') ?? ''));\n        group.stickyGroup.setContentElements(...elements);\n    }\n\n    private createStatElement(statName: string, stat: Statistic): HTMLElement {\n        const li = document.createElement('li');\n        li.classList.add('g-field');\n        li.setAttribute('data-stat', statName);\n        li.insertAdjacentHTML('beforeend', `<div>${stat.options.label}</div><div class=\"value\" data-stat-value data-tag=\"${stat.options.valueColorTag}\"></div>`);\n        li.title = stat.options.hoverTip || '';\n        return li;\n    }\n\n\n    private updateGroup(group: StatisticsGroup, statCollection?: Record<string, Statistic>) {\n        if (!group.pageGroup.isOpen && !group.stickyGroup.isOpen) {\n            return;\n        }\n        statCollection = statCollection ?? group.statCollection;\n\n        for (const [statName, stat] of Object.entries(statCollection)) {\n            const visible = stat.visible;\n            group.pageGroup.querySelector(`[data-stat=\"${statName}\"]`)?.classList.toggle('hidden', !visible);\n            group.stickyGroup.querySelector(`[data-stat=\"${statName}\"]`)?.classList.toggle('hidden', !visible);\n            if (!visible) {\n                continue;\n            }\n\n            const label = stat.options.label;\n            if (!isString(label)) {\n                continue;\n            }\n\n            const statValueText = this.formatVariableText(stat);\n\n            const pageGroupStatElement = group.pageGroup.querySelectorStrict<HTMLElement>(`[data-stat=\"${statName}\"]`);\n            pageGroupStatElement.classList.toggle('sticky', stat.sticky);\n            pageGroupStatElement.querySelectorStrict('[data-stat-value]').textContent = statValueText;\n\n            if (stat.sticky) {\n                const sideElement = group.stickyGroup.content.querySelector(`[data-stat=\"${statName}\"] [data-stat-value]`);\n                if (!sideElement) {\n                    this.insertSideGroupStatElement(group, statName);\n                }\n                group.stickyGroup.content.querySelectorStrict(`[data-stat=\"${statName}\"] [data-stat-value]`).textContent = statValueText;\n            }\n        }\n        group.stickyGroup.classList.toggle('hidden', Object.values(group.statCollection).every(x => !x.sticky || !x.visible));\n        group.pageGroup.classList.toggle('hidden', Object.values(group.statCollection).every(x => !x.visible));\n    }\n\n    private formatVariableText(statistic: Statistic) {\n        const formatDate = (value: number) => {\n            const date = new Date(0);\n            date.setSeconds(value);\n            return date.toISOString().substring(11, 19);\n        };\n        const formatNumber = (statistic: Statistic, options: StatisticOptions) => {\n            let value = statistic.value;\n            if (options.isTime) {\n                return formatDate(value);\n            }\n            if (isNumber(options.multiplier)) {\n                value *= 100;\n            }\n            if (isNumber(options.decimals)) {\n                value = toDecimals(value, options.decimals);\n            } else {\n                value = Math.floor(value);\n            }\n            let string = value.toString();\n            if (isString(options.suffix)) {\n                string += options.suffix || '';\n            }\n            return string;\n        };\n\n        if (statistic.value === Infinity) {\n            return '\u221E';\n        }\n        if (statistic.texts) {\n            return statistic.getText() || 'Error';\n        }\n        if (statistic.options.statFormat) {\n            let string = '';\n            for (const item of statistic.options.statFormat(statistic)) {\n                if (isString(item)) {\n                    string += item;\n                    continue;\n                }\n\n                if (item === statistic) {\n                    string += formatNumber(item, item.options);\n                } else {\n                    string += this.formatVariableText(item);\n                }\n            }\n            return string;\n        }\n        switch (statistic.options.type) {\n            case 'number': return formatNumber(statistic, statistic.options);\n            case 'boolean': return statistic.value === 0 ? 'False' : 'True';\n        }\n        return statistic.value.toFixed();\n    }\n\n    reset() {\n        this.statisticsGroups.forEach(x => {\n            x.pageGroup.remove();\n            x.stickyGroup.remove();\n        });\n        this.statisticsGroups.clear();\n    }\n\n    serialize(save: GameSerialization.Serialization) {\n        const groups: GameSerialization.Statistics['groups'] = {};\n        for (const [key, group] of this.statisticsGroups.entries()) {\n            groups[key] = {\n                pageHeaderOpenState: group.pageGroup.isOpen,\n                sideHeaderOpenState: group.stickyGroup.isOpen,\n            };\n        }\n        save.statistics = { groups };\n    }\n\n    deserialize({ statistics: save }: GameSerialization.UnsafeSerialization) {\n        if (!save) {\n            return;\n        }\n        if (save.groups) {\n            for (const [groupName, states] of Object.entries(save.groups)) {\n                const group = this.statisticsGroups.get(groupName);\n                if (group) {\n                    group.pageGroup.toggle(states?.pageHeaderOpenState ?? true);\n                    group.stickyGroup.toggle(states?.sideHeaderOpenState ?? true);\n                }\n            }\n        }\n    }\n}", "export interface LoopWorkerData {\n    state: 'start' | 'stop';\n}\n\nexport class LoopWorker {\n    private worker: Worker;\n    constructor() {\n        const blob = new Blob([`(${workerScript.toString()})();`]);\n        const blobURL = window.URL.createObjectURL(blob);\n        this.worker = new Worker(blobURL);\n        this.worker.addEventListener('message', () => this.onMessage());\n        this.worker.onmessage = this.onMessage.bind(this);\n    }\n\n    postMessage(data: LoopWorkerData) {\n        this.worker.postMessage(data);\n    }\n\n    onMessage() { }\n\n    terminate() {\n        this.worker.terminate();\n    }\n}\n\nconst workerScript = (() => {\n    const WAIT_TIME = 1000;\n    let loopId: number | undefined;\n    const loop = () => {\n        let remainder = 0;\n        let now = performance.now();\n        clearTimeout(loopId);\n        const loop = () => {\n            loopId = self.setTimeout(() => {\n                let time = performance.now() - now + remainder;\n                now = performance.now();\n                if (time >= WAIT_TIME) {\n                    self.postMessage(undefined);\n                    time -= 1000;\n                }\n                remainder = time;\n                loop();\n            }, WAIT_TIME);\n        };\n        loop();\n    };\n    self.addEventListener('message', (e: MessageEvent<LoopWorkerData>) => {\n        switch (e.data.state) {\n            case 'start': loop(); break;\n            case 'stop': clearTimeout(loopId); break;\n        }\n    });\n});", "import { uuid } from './utils';\nimport { LoopWorker } from './LoopWorker';\n\nexport type LoopType = 'Default' | 'WebWorker' | 'Animation';\nexport type LoopState = 'Running' | 'Stopped';\ntype Callback = (dt: number, instance: Instance) => void;\ninterface Instance {\n    time: number;\n    id: string;\n    callback: Callback;\n    options?: Options;\n}\ntype InstanceMap = Map<string, Instance>;\nexport interface Options {\n    delay?: number;\n    once?: boolean;\n}\n\nexport interface LoopSubscription {\n    id: string;\n    unsubscribe: () => void;\n}\n\nexport const TARGET_TICK_RATE = 1000 / 60;\nconst DELTA_TIME_SECONDS = TARGET_TICK_RATE / 1000;\n\nexport class Loop {\n    private _state: LoopState = 'Stopped';\n    private loop: BaseLoop;\n    constructor(type: LoopType = 'Default') {\n        switch (type) {\n            case 'Default': this.loop = new DefaultLoop(); break;\n            case 'WebWorker': this.loop = new WebWorkerLoop(); break;\n            case 'Animation': this.loop = new AnimationLoop(); break;\n        }\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    get loopType() {\n        return this.loop.type;\n    }\n\n    setLoopType(type: LoopType) {\n        if (this.loopType === type) {\n            return;\n        }\n        const state = this._state;\n        const instanceMap = this.loop.instanceMap;\n        if (state === 'Running') {\n            this.stop();\n        }\n        this.loop?.dispose?.();\n\n        switch (type) {\n            case 'WebWorker': this.loop = new WebWorkerLoop(); break;\n            case 'Animation': this.loop = new AnimationLoop(); break;\n            default: this.loop = new DefaultLoop(); break;\n        }\n        instanceMap.forEach((value, key) => this.loop.instanceMap.set(key, value));\n        if (state === 'Running') {\n            this.start();\n        }\n    }\n\n    setSpeed(speed: number) {\n        BaseLoop.speedMultiplier = Math.round(speed);\n    }\n\n    registerCallback(callback: Callback, options?: Options): string {\n        const id = uuid();\n        const instance: Instance = {\n            time: 0,\n            id,\n            callback,\n            options,\n        };\n        this.loop.instanceMap.set(id, instance);\n        return id;\n    }\n\n    unregister(id: string) {\n        this.loop.unregister(id);\n    }\n\n    reset() {\n        this.loop.instanceMap.clear();\n    }\n\n    toggleState() {\n        switch (this._state) {\n            case 'Running': this.stop(); break;\n            case 'Stopped': this.start(); break;\n        }\n    }\n\n    start() {\n        if (this._state === 'Running') {\n            return;\n        }\n        this._state = 'Running';\n        this.loop.start();\n    }\n\n    stop() {\n        this._state = 'Stopped';\n        this.loop.stop();\n    }\n}\n\nabstract class BaseLoop {\n    static speedMultiplier = 1;\n    abstract readonly type: LoopType;\n    readonly instanceMap: InstanceMap = new Map();\n    private lastTime = 0;\n    private remainder = 0;\n\n    dispose?(): void;\n\n    unregister(id: string) {\n        this.instanceMap.delete(id);\n    }\n\n    start() {\n        this.remainder = 0;\n        this.lastTime = performance.now();\n    }\n\n    abstract stop(): void;\n\n    tick() {\n        const frameTime = Math.min(performance.now() - this.lastTime, 2000); //to prevent accumulation using breakpoints etc..\n        let time = frameTime + this.remainder;\n        while (time >= TARGET_TICK_RATE) {\n            time -= TARGET_TICK_RATE / BaseLoop.speedMultiplier;\n            for (const instance of this.instanceMap.values()) {\n                instance.time += TARGET_TICK_RATE;\n                const targetWaitTime = instance.options?.delay ?? TARGET_TICK_RATE;\n                if (instance.time < targetWaitTime) {\n                    continue;\n                }\n                instance.callback(DELTA_TIME_SECONDS, instance);\n                if (instance.options?.once) {\n                    this.instanceMap.delete(instance.id);\n                } else {\n                    instance.time -= targetWaitTime;\n                }\n            }\n        }\n        this.remainder = time;\n        this.lastTime = performance.now();\n    }\n\n    skipTime(time: number) {\n        this.remainder += time;\n    }\n}\n\nclass DefaultLoop extends BaseLoop {\n    readonly type = 'Default';\n    private loopId: number = -1;\n    start(): void {\n        clearTimeout(this.loopId);\n        super.start();\n        const loop = () => {\n            this.loopId = window.setTimeout(() => {\n                super.tick();\n                if (this.loopId) {\n                    loop();\n                }\n            }, TARGET_TICK_RATE);\n        };\n        loop();\n    }\n    stop(): void {\n        window.clearTimeout(this.loopId);\n        this.loopId = -1;\n    }\n}\n\nclass WebWorkerLoop extends BaseLoop {\n    readonly type = 'WebWorker';\n    private readonly worker: LoopWorker;\n    constructor() {\n        super();\n\n        this.worker = new LoopWorker();\n        this.worker.onMessage = () => {\n            super.tick();\n        };\n    }\n    start(): void {\n        this.worker.postMessage({ state: 'start' });\n        super.start();\n    }\n    stop(): void {\n        this.worker.postMessage({ state: 'stop' });\n    }\n    dispose() {\n        this.worker.terminate();\n    }\n}\n\nclass AnimationLoop extends BaseLoop {\n    readonly type = 'Animation';\n    private requestId = 0;\n    start() {\n        cancelAnimationFrame(this.requestId);\n        super.start();\n        const loop = () => {\n            this.requestId = requestAnimationFrame(() => {\n                super.tick();\n                if (this.requestId > 0) {\n                    loop();\n                }\n            });\n        };\n        loop();\n    }\n    stop(): void {\n        cancelAnimationFrame(this.requestId);\n        this.requestId = 0;\n    }\n}", "import * as lzString from 'lz-string';\nimport type { UnsafeSerialization } from 'src/game/serialization';\n\nexport function saveGame(data: Map<string, UnsafeSerialization>) {\n    saveData('game', Object.fromEntries(data));\n}\nexport function loadGame(id: string): UnsafeSerialization;\nexport function loadGame(): Map<string, UnsafeSerialization>;\nexport function loadGame(id?: string) {\n    const text = loadText('game');\n    const map = new Map(Object.entries(JSON.parse(text) as Record<string, UnsafeSerialization>));\n    return id ? map.get(id) : map;\n}\n\nfunction saveData(name: string, data: unknown) {\n    const text = JSON.stringify(data);\n    const compressed = lzString.compressToEncodedURIComponent(text);\n    localStorage.setItem(name, compressed);\n}\n\nfunction loadText(name: string) {\n    const compressed = localStorage.getItem(name);\n    if (!compressed) {\n        return '{}';\n    }\n    const uncompressed = lzString.decompressFromEncodedURIComponent(compressed);\n    return uncompressed;\n}\n", "import { combat, game, gameLoop, gameLoopAnim, player, statistics } from './game';\nimport { loadGame } from '../shared/utils/saveManager';\n\ndeclare global {\n    interface Window {\n        modero?: ReturnType<typeof initDevTools>;\n    }\n    interface GlobalEventHandlersEventMap {\n        'Dev:AddArtifact': CustomEvent<string>;\n        'Dev:IncreaseArtifactRank': CustomEvent<string>;\n    }\n}\n\nexport function initDevTools() {\n    console.groupCollapsed('Dev tools enabled');\n    console.log('Dev tools: window.modero');\n    console.log('Press Space to toggle Game Loop', '(state indicated by * in tab title)');\n    console.groupEnd();\n\n    document.body.addEventListener('keydown', toggleLoop);\n\n    return {\n        save: () => game.gameConfigId && game.saveGame(),\n        printSave: () => game.gameConfigId && loadGame(game.gameConfigId),\n        game,\n        player,\n        combat,\n        getEnemy: () => combat.enemy,\n        setLevel: (level: number) => game.stats.level.set(level),\n        addResource: (name: string, amount: number) => {\n            Object.values(game.resources).find(x => x.options.label?.toLowerCase() === name.toLowerCase())?.add(amount);\n            statistics.updateStats('Resources');\n        },\n        addArtifact: (baseName: string) => window.dispatchEvent(new CustomEvent('Dev:AddArtifact', { detail: baseName })),\n        setLoopSpeed: (speed: number) => {\n            gameLoop.setSpeed(speed);\n        },\n        dispose: () => {\n            document.body.removeEventListener('keydown', toggleLoop);\n        }\n    };\n}\n\nfunction toggleLoop(e: KeyboardEvent) {\n    if (e.code !== 'Space' || document.activeElement?.tagName.toLowerCase() === 'input') {\n        return;\n    }\n    e.preventDefault();\n    gameLoop.toggleState();\n    gameLoopAnim.toggleState();\n    document.title = document.title.startsWith('*') ? document.title.slice(1) : `*${document.title}`;\n}", "export function getFormattedTimeSince(time = Date.now()) {\n    const timeSince = getTimeSince(time);\n    let formattedTime = timeSince.time.toFixed();\n    switch (timeSince.type) {\n        case 'days': formattedTime += ` ${timeSince.time > 1 ? 'days' : 'day'} ago`; break;\n        case 'hours': formattedTime += ` ${timeSince.time > 1 ? 'hours' : 'hour'} ago`; break;\n        case 'minutes': formattedTime += ` ${timeSince.time > 1 ? 'minutes' : 'minute'} ago`; break;\n        case 'seconds': formattedTime += ` ${timeSince.time > 1 ? 'seconds' : 'second'} ago`; break;\n    }\n    return formattedTime;\n}\n\nexport function getTimeSince(time: number = Date.now()) {\n    const oldDate = new Date(time);\n    const newDate = new Date();\n    const timeDiff = newDate.getTime() - oldDate.getTime();\n\n    const msToSeconds = 1000;\n    const msToMinutes = msToSeconds * 60;\n    const msToHours = msToMinutes * 60;\n    const msToDays = msToHours * 24;\n\n    const days = Math.floor(timeDiff / msToDays);\n    if (days > 0) {\n        return { time: days, type: 'days' } as const;\n    }\n    const hours = Math.floor(timeDiff / msToHours);\n    if (hours > 0) {\n        return { time: hours, type: 'hours' } as const;\n    }\n    const minutes = Math.floor(timeDiff / msToMinutes);\n    if (minutes > 0) {\n        return { time: minutes, type: 'minutes' } as const;\n    }\n    const seconds = Math.floor(timeDiff / msToSeconds);\n    return { time: seconds, type: 'seconds' } as const;\n}\n\n\nexport function getFormattedDate(time: number) {\n    const oldDate = new Date(time);\n    const newDate = new Date();\n    let formattedDate = '';\n    //Year\n    if (newDate.getFullYear() - oldDate.getFullYear() >= 1) {\n        formattedDate = `${oldDate.getFullYear().toString()}, `;\n    }\n    //Month Day\n    if (newDate.getTime() - oldDate.getTime() >= 1000 * 60 * 60 * 24) {\n        const monthName = oldDate.toLocaleString('en-us', { month: 'long' });\n        const dateFormatter = new Intl.DateTimeFormat(navigator.language, { day: '2-digit', timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone });\n        formattedDate += `${monthName} ${dateFormatter.format(oldDate)}, `;\n    }\n    //Hour:Minute\n    const timeFormatter = new Intl.DateTimeFormat(navigator.language, { hour: '2-digit', minute: '2-digit', hour12: false, timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone });\n    formattedDate += `${timeFormatter.format(oldDate)}`;\n    return formattedDate;\n}", "import { isString } from 'src/shared/utils/utils';\nimport { game } from './game';\nimport type { Serialization, UnsafeSerialization } from './serialization';\nimport { getFormattedTimeSince } from 'src/shared/utils/date';\n\nexport interface NotificationEntry {\n    title: string;\n    description?: string;\n    time?: number;\n    elementId?: string | null | undefined;\n    seen?: boolean;\n}\n\ninterface Notification extends NotificationEntry {\n    time: number;\n    element: HTMLElement;\n    elementId: string | null | undefined;\n    seen: boolean;\n}\n\nexport class Notifications {\n    readonly page: HTMLElement;\n    private notificationListElement: HTMLElement;\n    private readonly notificationList: Notification[] = [];\n    constructor() {\n\n        this.page = document.createElement('div');\n        this.page.classList.add('p-notifications', 'hidden');\n        this.page.setAttribute('data-page-content', 'notifications');\n\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\">Notifications</div>');\n\n        const toolbarElement = this.createToolbarElement();\n        this.page.appendChild(toolbarElement);\n\n        this.notificationListElement = document.createElement('ul');\n        this.notificationListElement.classList.add('s-notifications-list', 'g-scroll-list-v');\n        this.notificationListElement.setAttribute('data-notifications-list', '');\n        this.page.appendChild(this.notificationListElement);\n\n        game.page.appendChild(this.page);\n\n        game.addPage(this.page, 'Notifications', 'notifications');\n\n        new MutationObserver(() => {\n            if (!this.pageVisible) {\n                this.notificationList.forEach(x => x.element.classList.remove('outline'));\n                return;\n            }\n            for (const notification of this.notificationList.filter(x => !x.seen)) {\n                this.triggerNotificationOutline(notification);\n            }\n            this.updateMenuName();\n            this.updateNotificationTimes();\n        }).observe(this.page, { attributes: true, attributeFilter: ['class'] });\n    }\n\n    get pageVisible() {\n        return !this.page.classList.contains('hidden');\n    }\n\n    private createToolbarElement() {\n        const element = document.createElement('div');\n        element.classList.add('s-toolbar', 'g-toolbar');\n\n        const markAllAsSeen = document.createElement('span');\n        markAllAsSeen.classList.add('g-clickable-text', 'clear');\n        markAllAsSeen.textContent = 'Mark all as seen';\n        markAllAsSeen.addEventListener('click', () => {\n            for (const notification of this.notificationList) {\n                this.seeNotification(notification);\n            }\n            this.updateMenuName();\n        });\n        element.appendChild(markAllAsSeen);\n        return element;\n    }\n\n    private seeNotification(notification: Notification) {\n        notification.seen = true;\n        if (notification.elementId) {\n            game.removeHighlightElement(notification.elementId);\n        }\n        notification.element.classList.remove('outline');\n    }\n\n    private triggerNotificationOutline(notification: Notification) {\n        notification.element.classList.add('outline');\n        if (!notification.elementId) {\n            notification.seen = true;\n        }\n    }\n\n    private updateMenuName() {\n        const unseenNotificationCount = this.notificationList.filter(x => !x.seen).length;\n        const menuItem = game.menu.getMenuItemById('notifications');\n        if (menuItem) {\n            menuItem.textContent = `Notifications${unseenNotificationCount > 0 ? ` (${unseenNotificationCount})` : ''}`;\n        }\n    }\n\n    private updateNotificationTimes() {\n        for (const notification of this.notificationList) {\n            const timeElement = notification.element.querySelectorStrict('[data-time]');\n            timeElement.textContent = getFormattedTimeSince(notification.time);\n        }\n    }\n\n    private createNotificationElement(entry: NotificationEntry) {\n        const formattedTime = getFormattedTimeSince(entry.time || Date.now());\n        const element = document.createElement('li');\n        element.insertAdjacentHTML('beforeend', `<div class=\"title\"><span>${entry.title}</span><span class=\"time g-text-small g-text-mute\" data-time>${formattedTime}</span></div>`);\n        if (entry.description) {\n            element.insertAdjacentHTML('beforeend', `<div class=\"description g-text-small\">${entry.description}</div>`);\n        }\n        return element;\n    }\n\n    addNotification(entry: NotificationEntry) {\n        const element = this.createNotificationElement({ ...entry });\n        this.notificationListElement.insertBefore(element, this.notificationListElement.firstElementChild);\n        const notification: Notification = {\n            elementId: undefined,\n            ...entry,\n            seen: entry.seen ?? false,\n            time: entry.time ?? Date.now(),\n            element\n        };\n        this.notificationList.push(notification);\n        if (entry.elementId && !entry.seen) {\n            game.addElementHighlight(entry.elementId, () => {\n                notification.seen = true;\n                this.updateMenuName();\n            });\n        }\n        if (this.pageVisible && !notification.seen) {\n            this.triggerNotificationOutline(notification);\n        }\n\n        this.updateMenuName();\n    }\n\n    reset() {\n        this.notificationList.splice(0);\n        this.notificationListElement.replaceChildren();\n        this.updateMenuName();\n    }\n\n    serialize(save: Serialization) {\n        save.notifications = {\n            notificationList: this.notificationList.map(x => ({\n                title: x.title,\n                description: x.description,\n                elementId: x.elementId,\n                seen: x.seen,\n                time: x.time\n            }))\n        };\n    }\n\n    deserialize({ notifications: save }: UnsafeSerialization) {\n        for (const serializedNotification of save?.notificationList ?? []) {\n            if (!isString(serializedNotification?.title)) {\n                continue;\n            }\n            const entry: NotificationEntry = {\n                title: serializedNotification.title,\n                description: serializedNotification.description,\n                elementId: serializedNotification.elementId,\n                time: serializedNotification.time,\n                seen: serializedNotification.seen\n            };\n            this.addNotification(entry);\n        }\n        this.updateMenuName();\n    }\n}", "import { clamp, isDefined, isNumber } from 'src/shared/utils/utils';\nimport { calcEnemyStats } from '../calc/calcStats';\nimport { Modifier } from '../mods/Modifier';\nimport { ConditionFlags } from '../mods/types';\nimport { combat } from '../game';\nimport { ModDB } from '../mods/ModDB';\nimport type * as GameSerialization from '../serialization';\nimport { createEnemyStats } from '../statistics/stats';\n\nexport interface EnemyData {\n    id: string;\n    name: string;\n    baseLife: number;\n    enemyModList: string[];\n}\n\nexport class Enemy {\n    readonly modDB = new ModDB();\n    readonly stats = createEnemyStats();\n    readonly modList: Modifier[];\n    constructor(readonly enemyData: EnemyData) {\n        this.stats.baseLife.set(enemyData.baseLife);\n        this.modList = Modifier.modListFromTexts([...enemyData.enemyModList]);\n        this.modList.forEach(x => x.randomizeValues());\n        this.modDB.add('EnemyMod', Modifier.extractStatModifierList(...this.modList));\n        this.stats.maxLife.set(1);\n        this.stats.life.set(this.stats.maxLife.value);\n\n        this.updateStats();\n    }\n\n    get life() {\n        return this.stats.life.value;\n    }\n\n    set life(v: number) {\n        v = clamp(v, 0, this.maxLife);\n        this.stats.life.set(v);\n    }\n\n    get maxLife() {\n        return this.stats.maxLife.value;\n    }\n\n    get lifeFac() {\n        return clamp(this.life / this.maxLife, 0, 1);\n    }\n\n    updateStats() {\n        const lifeFac = this.lifeFac;\n        calcEnemyStats(this);\n        this.life = this.maxLife * lifeFac;\n    }\n\n    getConditionFlags(): number {\n        let flags = 0;\n        if (combat.effectHandler.hasEffect('Bleed')) {\n            flags |= ConditionFlags.Bleed;\n        }\n\n        if (combat.effectHandler.hasEffect('Burn')) {\n            flags |= ConditionFlags.Burn;\n        }\n        return flags;\n    }\n\n    serialize(): GameSerialization.EnemyInstance {\n        return {\n            lifeRatio: this.lifeFac,\n            modList: this.modList.map(x => ({ srcId: x.template.id, values: x.values }))\n        };\n    }\n\n    deserialize(save: DeepPartial<GameSerialization.EnemyInstance>) {\n        if (isNumber(save.lifeRatio)) {\n            this.life = this.stats.maxLife.value * save.lifeRatio;\n        }\n        if (save.modList) {\n            for (const serializedMod of save.modList.filter(isDefined)) {\n                const mod = this.modList.find(x => x.template.id === serializedMod.srcId);\n                if (mod && serializedMod.values) {\n                    mod.setValues(serializedMod.values.filter(isNumber));\n                }\n            }\n        }\n        this.modDB.replace('EnemyMod', Modifier.extractStatModifierList(...this.modList));\n        this.updateStats();\n    }\n}", "import { calcCombatContextStats as calcCombatContextStats } from '../calc/calcStats';\nimport { ModDB } from '../mods/ModDB';\nimport { Modifier } from '../mods/Modifier';\nimport { Enemy, type EnemyData } from './Enemy';\nimport { clamp, getRandomWeightedIndex } from 'src/shared/utils/utils';\nimport { assertDefined } from 'src/shared/utils/assert';\nimport { EventEmitter } from 'src/shared/utils/EventEmitter';\nimport type * as GameSerialization from '../serialization';\nimport { combat, player } from '../game';\nimport { combatCtxModTemplateList } from '../mods/combatCtxModTemplates';\n\nexport interface EnemyCandidate {\n    id: string;\n    name: string;\n    weight?: number;\n    modList?: string[];\n}\n\nexport interface CombatContextOptions {\n    readonly name: string;\n    readonly enemyBaseLife: number;\n    readonly enemyBaseCount: number;\n    readonly enemyCountOverride?: number;\n    readonly candidates: EnemyCandidate[];\n    readonly combatModList?: string[];\n    readonly interruptable: boolean;\n}\n\nexport class CombatContext {\n    readonly name: string;\n    readonly modDB: ModDB;\n    readonly onComplete: EventEmitter<CombatContext>;\n    private _modList: Modifier[] = [];\n    private _completed = false;\n    private _enemy: Enemy;\n    private _enemyCount: number;\n    private _maxEnemyCount: number;\n    active = false;\n    constructor(private readonly data: CombatContextOptions) {\n        this.name = data.name;\n        this.modDB = new ModDB();\n        this.onComplete = new EventEmitter<CombatContext>();\n\n        this._enemyCount = 1;\n        this._maxEnemyCount = 0;\n\n        this._enemy = this.generateEnemy();\n\n        this.updateModList(data.combatModList ?? []);\n    }\n\n    get completed() {\n        return this._completed;\n    }\n\n    private set completed(v: boolean) {\n        this._completed = v;\n    }\n\n    get enemy() {\n        return this._enemy;\n    }\n\n    get enemyCount() {\n        return clamp(this._enemyCount, 1, this._maxEnemyCount);\n    }\n\n    get maxEnemyCount() {\n        return Math.ceil(this._maxEnemyCount);\n    }\n\n    get interruptable() {\n        return this.data.interruptable ?? false;\n    }\n\n    updateModList(modList: string[]) {\n        this._modList = Modifier.modListFromTexts(modList);\n        this.updateModifiers();\n        this._enemy.updateStats();\n    }\n\n    private updateModifiers() {\n        const combatModList = this._modList.filter(x => combatCtxModTemplateList.find(y => y === x.template && !y.target));\n        this.modDB.replace('Combat', Modifier.extractStatModifierList(...combatModList));\n        const enemyModList = this._modList.filter(x => combatCtxModTemplateList.find(y => y === x.template && y.target === 'Enemy'));\n        this.enemy.modDB.replace('Combat', Modifier.extractStatModifierList(...enemyModList));\n        const playerModList = this._modList.filter(x => combatCtxModTemplateList.find(y => y === x.template && y.target === 'Player'));\n        player.modDB.replace('Combat', Modifier.extractStatModifierList(...playerModList));\n        this.calcStats();\n    }\n\n    private calcStats() {\n        const { maxEnemyCount } = calcCombatContextStats({ stats: { baseEnemyCount: this.data.enemyBaseCount }, modDB: this.modDB });\n        this._maxEnemyCount = this.data.enemyCountOverride ?? maxEnemyCount;\n    }\n\n    private generateEnemy() {\n        const candidate = this.createEnemyCandidate();\n        return this.createEnemyFromCandidate(candidate);\n    }\n\n    private createEnemyCandidate() {\n        const candidates = this.data.candidates;\n        let candidate: EnemyCandidate | undefined;\n        if (candidates.length === 1) {\n            candidate = candidates[0];\n        } else {\n            const weights = candidates.length === 1 ? [1] : candidates.map(x => x.weight ?? 1);\n            const weightedIndex = getRandomWeightedIndex(weights);\n            candidate = candidates[weightedIndex];\n        }\n        assertDefined(candidate, 'failed creating enemy');\n        return candidate;\n    }\n\n    private createEnemyFromCandidate(candidate: Omit<EnemyCandidate, 'weight'>) {\n        const enemyData: EnemyData = {\n            id: candidate.id,\n            name: candidate.name ?? 'Enemy',\n            baseLife: this.data.enemyBaseLife,\n            enemyModList: candidate.modList ?? []\n        };\n        return new Enemy(enemyData);\n    }\n\n    next() {\n        if (this.enemyCount >= this.maxEnemyCount) {\n            this.completed = true;\n            this.onComplete.invoke(this);\n            return;\n        }\n        this._enemyCount++;\n        this._enemy = this.generateEnemy();\n        this.updateModifiers();\n    }\n\n    serialize(): GameSerialization.CombatContext {\n        return {\n            active: this.active,\n            enemyId: this._enemy.enemyData.id,\n            enemyCount: this.enemyCount,\n            enemy: this._enemy?.serialize()\n        };\n    }\n\n    deserialize(save: DeepPartial<GameSerialization.CombatContext>) {\n        this._enemyCount = Math.floor(Math.min(save.enemyCount || this._maxEnemyCount, this._maxEnemyCount));\n        const enemyRef = this.data.candidates.find(x => x.id === save.enemyId);\n        if (save.enemy && enemyRef) {\n            this._enemy = this.createEnemyFromCandidate({ ...enemyRef });\n            this._enemy.deserialize(save.enemy);\n        }\n        if (save.active) {\n            combat.startCombat(this);\n        }\n    }\n}", "import { combat, game } from 'src/game/game';\nimport { createModListElement, fadeIn, fadeOut } from '../utils/dom';\nimport { Modifier } from '../mods/Modifier';\nimport { CombatContext } from '../combat/CombatContext';\nimport type { Serialization, UnsafeSerialization } from '../serialization';\nimport { clamp } from '../../shared/utils/utils';\nimport { assertDefined } from '../../shared/utils/assert';\n\nexport class World {\n    private page: HTMLElement;\n    private combatCtx: CombatContext | null = null;\n    constructor() {\n        this.page = document.createElement('div');\n        this.page.classList.add('p-world', 'hidden');\n        const { menuItem } = game.addPage(this.page, 'World', 'world');\n        menuItem.classList.add('hidden');\n\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"g-title\" data-row=\"1\">World</div>');\n        this.page.insertAdjacentHTML('beforeend', '<div class=\"label\" data-label data-row=\"2\"></div>');\n        this.page.insertAdjacentHTML('beforeend', '<button style=\"visibility: hidden;\" data-next-world-button>Next World</button>');\n        this.page.insertAdjacentElement('beforeend', createModListElement([]));\n\n        this.page.querySelectorStrict('[data-next-world-button]').addEventListener('click', async () => {\n            game.stats.world.add(1);\n            await fadeOut();\n            await game.softReset();\n            await fadeIn();\n        });\n    }\n\n    get data() {\n        const data = game.gameConfig.world.worldList[game.stats.world.value - 1];\n        assertDefined(data);\n        return data;\n    }\n\n    get enemyBaseCount() {\n        return game.gameConfig.world.enemyBaseCountList[game.stats.level.value - 1] ?? Infinity;\n    }\n\n    get enemyBaseLife() {\n        const enemyBaseLifeList = game.gameConfig.world.enemyBaseLifeList;\n        const index = clamp(game.stats.level.value - 1, 0, enemyBaseLifeList.length - 1);\n        const baseLife = enemyBaseLifeList[index];\n        assertDefined(baseLife);\n        return baseLife;\n    }\n\n    private createCombatContext() {\n        const combatContext = new CombatContext({\n            name: 'World',\n            enemyBaseCount: this.enemyBaseCount,\n            enemyBaseLife: this.enemyBaseLife,\n            candidates: [...this.generateEnemyCandidates()],\n            combatModList: this.data.modList,\n            interruptable: true\n        });\n\n        combatContext.onComplete.listen(() => {\n            if (game.stats.level.value < game.stats.maxLevel.value) {\n                game.stats.level.add(1);\n            }\n            this.combatCtx = this.createCombatContext();\n            combat.startCombat(this.combatCtx);\n        });\n        return combatContext;\n    }\n\n    private *generateEnemyCandidates() {\n        for (const enemyData of game.gameConfig.world.enemyList) {\n            if (enemyData.level) {\n                if (enemyData.level.min > game.stats.level.value) {\n                    continue;\n                }\n                if (enemyData.level.max && enemyData.level.max < game.stats.level.value) {\n                    continue;\n                }\n            }\n            if (enemyData.world) {\n                if (enemyData.world.min > game.stats.world.value) {\n                    continue;\n                }\n                if (enemyData.world.max && enemyData.world.max < game.stats.world.value) {\n                    continue;\n                }\n            }\n            yield enemyData;\n        }\n    }\n\n    private updateMainMenuItem() {\n        game.page.querySelectorStrict('[data-main-menu] [data-page-target=\"world\"]').classList.toggle('hidden', game.stats.world.value === 1 && game.stats.level.value !== game.stats.maxLevel.value);\n    }\n\n    init() {\n        game.stats.level.addListener('change', this.updateMainMenuItem.bind(this));\n\n        game.stats.level.addListener('change', ({ curValue }) => {\n            if (curValue !== game.stats.maxLevel.value) {\n                return;\n            }\n            this.combatCtx = this.createCombatContext();\n            combat.startCombat(this.combatCtx);\n            if (game.stats.world.value === game.gameConfig.world.worldList.length) {\n                return;\n            }\n            this.page.querySelectorStrict<HTMLElement>('[data-next-world-button]').style.visibility = 'visible';\n        });\n\n        combat.events.contextChanged.listen(({ oldCtx, newCtx }) => {\n            if (!newCtx && oldCtx !== this.combatCtx) {\n                if (!this.combatCtx) {\n                    this.combatCtx = this.createCombatContext();\n                }\n                combat.startCombat(this.combatCtx);\n            }\n        });\n\n        game.stats.level.set(1);\n    }\n\n    setup() {\n        this.page.querySelectorStrict('[data-label]').textContent = `World ${game.stats.world.value.toFixed()}`;\n\n        const modList = Modifier.modListFromTexts(this.data.modList ?? []);\n        this.page.querySelectorStrict('[data-mod-list]').replaceWith(createModListElement(modList));\n\n        this.combatCtx?.updateModList(this.data.modList);\n\n        if (!this.combatCtx) {\n            this.combatCtx = this.createCombatContext();\n        }\n        combat.startCombat(this.combatCtx);\n\n        this.updateMainMenuItem();\n    }\n\n    reset() {\n        this.combatCtx = null;\n        this.page.querySelectorStrict<HTMLElement>('[data-next-world-button]').style.visibility = 'hidden';\n        this.page.querySelectorStrict('[data-mod-list]').replaceWith(createModListElement([]));\n    }\n\n    serialize(save: Serialization) {\n        save.world = {\n            combatCtx: this.combatCtx?.serialize()\n        };\n    }\n\n    deserialize({ world: save }: UnsafeSerialization) {\n        if (save?.combatCtx) {\n            this.combatCtx = this.createCombatContext();\n            this.combatCtx.deserialize(save.combatCtx);\n        }\n    }\n}", "import type { GameModEntryData } from './NewGame';\n\n\nexport function createModEntryInfoElement(modEntryData: GameModEntryData) {\n\n    const element = document.createElement('div');\n    element.setAttribute('data-mod-entry-info', '');\n\n    const titleElement = document.createElement('div');\n    titleElement.classList.add('g-title');\n    titleElement.textContent = modEntryData.name;\n\n    const contentElement = document.createElement('div');\n    contentElement.classList.add('s-content');\n\n    contentElement.insertAdjacentHTML('beforeend', `<div>Author: ${modEntryData.author}</div>`);\n    contentElement.insertAdjacentHTML('beforeend', `<div class=\"s-desc\">${modEntryData.description}</div>`);\n\n    element.append(titleElement, contentElement);\n    return { element, contentElement };\n}", "import '../extensions/arrayExtensions';\nimport '../extensions/DOMExtensions';\nimport { EventEmitter } from 'src/shared/utils/EventEmitter';\nimport gameModRegistry from './gameConfig/gameModRegister.json';\nimport { Combat } from './combat/Combat';\nimport { Components } from './components/Components';\nimport { Player } from './Player';\nimport { Statistics } from './statistics/Statistics';\nimport type { Serialization, UnsafeSerialization } from './serialization';\nimport { createGameStats, createResources, deserializeStats, serializeStats } from './statistics/stats';\nimport { GAME_CONFIG_VERSION, type Config } from './gameConfig/GameConfig';\nimport { Loop } from '../shared/utils/Loop';\nimport { TabMenuElement } from 'src/shared/customElements/TabMenuElement';\nimport { isNonNullable } from 'src/shared/utils/utils';\nimport { assertDefined, assertNonNullable } from 'src/shared/utils/assert';\nimport { ENVIRONMENT, resolveGamePathFromVersion } from 'src/config';\nimport { createCustomElement } from 'src/shared/customElements/customElements';\nimport { initDevTools } from 'src/game/dev';\nimport { loadGame, saveGame } from 'src/shared/utils/saveManager';\nimport { Notifications } from './Notifications';\nimport { World } from './world/World';\nimport { ProgressElement } from 'src/shared/customElements/ProgressElement';\nimport { ModalElement } from 'src/shared/customElements/ModalElement';\nimport { createModEntryInfoElement } from 'src/home/dom';\nimport type GameConfig from './gameConfig/GameConfigExport';\nimport type { Statistic } from './statistics/Statistic';\n\nexport const mainMenuNames = [\n    'combat',\n    'character',\n    'blacksmith',\n    'treasury',\n    'guildHall',\n    'world',\n    'achievements',\n    'statistics',\n    'notifications'\n] as const;\n\nexport const enum GameInitializationStage {\n    None = 0,\n    Init = 1,\n    Deserialize = 2,\n    Setup = 3,\n    Done = 4\n}\n\nexport class Game {\n    readonly pageShadowHost: HTMLElement;\n    readonly page: HTMLElement;\n    readonly components = new Components();\n    readonly tickSecondsEvent = new EventEmitter<void>();\n    private _gameConfig?: GameConfig.Config;\n    private _gameConfigId?: string;\n    readonly stats = createGameStats();\n    private _resources: Record<string, Statistic> = {};\n    private _initializationStage = GameInitializationStage.None;\n    private _abortController = new AbortController();\n    constructor() {\n\n        this.pageShadowHost = document.createElement('div');\n        this.pageShadowHost.classList.add('game-page-shadow-host');\n        this.pageShadowHost.setAttribute('data-page-content', 'game');\n        this.pageShadowHost.setAttribute('data-game-page-shadow-host', '');\n        const shadowRoot = this.pageShadowHost.attachShadow({ mode: 'open' });\n        this.page = document.createElement('main');\n        this.page.classList.add('p-game');\n        shadowRoot.appendChild(this.page);\n        document.body.appendChild(this.pageShadowHost);\n\n        this.page.insertAdjacentHTML('beforeend', '<span class=\"title\" onclick=\"location.hash = \\'home\\'\">Modero</span>');\n\n        //combat overview\n        const combatOverview = document.createElement('div');\n        combatOverview.classList.add('s-combat-overview');\n        combatOverview.setAttribute('data-combat-overview', '');\n\n        const playerBar = document.createElement('div');\n        playerBar.classList.add('s-player-bar');\n        playerBar.insertAdjacentHTML('beforeend', '<span class=\"player-name\" data-player-name>Player</span>');\n        const manabar = createCustomElement(ProgressElement);\n        manabar.classList.add('s-mana-bar');\n        manabar.setAttribute('data-mana-bar', '');\n        playerBar.appendChild(manabar);\n\n        const enemyBar = document.createElement('div');\n        enemyBar.setAttribute('data-enemy', '');\n        enemyBar.classList.add('s-enemy-bar');\n        enemyBar.insertAdjacentHTML('beforeend', '<span class=\"enemy-name\" data-enemy-name></span>');\n        const lifebar = createCustomElement(ProgressElement);\n        lifebar.classList.add('s-life-bar');\n        lifebar.setAttribute('data-life-bar', '');\n        enemyBar.appendChild(lifebar);\n\n        combatOverview.append(playerBar, enemyBar);\n        this.page.appendChild(combatOverview);\n\n\n        const modTitleElement = document.createElement('span');\n        modTitleElement.classList.add('title');\n        modTitleElement.setAttribute('data-mod-title', '');\n        modTitleElement.addEventListener('click', () => {\n            const modEntry = gameModRegistry.list.findStrict(x => x.id === this.gameConfigId);\n            const modal = createCustomElement(ModalElement);\n            modal.setTitle(this.gameConfigName ?? 'undefined');\n            modal.addBodyElement(createModEntryInfoElement(modEntry).contentElement);\n            modal.style.textAlign = 'center';\n        });\n        this.page.appendChild(modTitleElement);\n\n        //menu\n        const menu = createCustomElement(TabMenuElement);\n        menu.classList.add('s-menu');\n        menu.setAttribute('data-main-menu', '');\n        this.page.appendChild(menu);\n\n        //stats\n        this.page.insertAdjacentHTML('beforeend', '<ul class=\"sticky-stat-group-list g-scroll-list-v\" data-sticky-stat-group-list></ul>');\n    }\n\n    get menu() {\n        return this.page.querySelectorStrict<TabMenuElement>(TabMenuElement.name);\n    }\n\n    get gameConfig() {\n        const gameConfig = this._gameConfig;\n        assertDefined(gameConfig);\n        return gameConfig;\n    }\n\n    get hasGameConfig() {\n        return !!this._gameConfig;\n    }\n\n    get gameConfigId() {\n        return this._gameConfigId;\n    }\n\n    get gameConfigName() {\n        return gameModRegistry.list.find(x => x.id === this.gameConfigId)?.name;\n    }\n\n    get initializationStage() {\n        return this._initializationStage;\n    }\n\n    get abortSignal() {\n        return this._abortController.signal;\n    }\n\n    get resources() {\n        return this._resources;\n    }\n\n    async init(gameConfig: Config, gameConfigId: string, save?: UnsafeSerialization) {\n\n        if (this._gameConfig) {\n            this.reset();\n        }\n\n        this._gameConfigId = gameConfigId;\n        this._gameConfig = gameConfig;\n\n        if (this._abortController) {\n            this._abortController.abort();\n        }\n        this._abortController = new AbortController();\n\n\n        statistics.createGroup('General', this.stats);\n\n        if (gameConfig.resources) {\n            this._resources = createResources(gameConfig.resources);\n            statistics.createGroup('Resources', this._resources);\n            Object.values(this._resources).forEach(x => x.addListener('change', statistics.updateStats.bind(statistics, 'Resources')));\n        }\n\n        this._initializationStage = GameInitializationStage.Init;\n\n        this.stats.maxLevel.set(gameConfig.world.enemyBaseLifeList.length + 1);\n\n        //Init\n        statistics.init();\n        combat.init();\n        player.init();\n        world.init();\n        this.components.init();\n\n        //UI\n        this.page.querySelectorStrict<HTMLElement>('[data-page-target=\"combat\"]').click();\n\n        //Deserialize\n        if (save) {\n            this._initializationStage = GameInitializationStage.Deserialize;\n            this.deserialize(save);\n        }\n\n        this._initializationStage = GameInitializationStage.Setup;\n\n        //Setup\n        player.setup();\n        world.setup();\n        combat.effectHandler.setup();\n        this.components.setup();\n\n        this.saveGame();\n\n        statistics.updateAll();\n\n        //Per second loop\n        gameLoop.registerCallback(() => {\n            this.tickSecondsEvent.invoke(undefined);\n        }, { delay: 1000 });\n\n        //time played\n        this.tickSecondsEvent.listen(() => {\n            this.stats.timePlayed.add(1);\n        });\n\n        gameLoop.registerCallback(() => {\n            this.saveGame();\n        }, { delay: 1000 * 10 });\n\n        if (ENVIRONMENT !== 'development') {\n            gameLoop.start();\n            gameLoopAnim.start();\n        }\n\n        const configName = gameModRegistry.list.find(x => x.id === gameConfigId)?.name ?? 'undefined';\n        this.page.querySelectorStrict('[data-mod-title]').textContent = configName;\n        await this.loadPage();\n        this._initializationStage = GameInitializationStage.Done;\n\n        window.addEventListener('beforeunload', () => {\n            if (this.page.checkVisibility()) {\n                this.saveGame();\n            }\n        }, { signal: this._abortController.signal });\n    }\n\n    private async loadPage(): Promise<void> {\n        document.body.appendChild(this.pageShadowHost);\n        this.pageShadowHost.shadowRoot?.querySelector('link[rel=\"stylesheet\"]')?.remove();\n        return new Promise((resolve, error) => {\n            const linkElement = document.createElement('link');\n            linkElement.setAttribute('rel', 'stylesheet');\n            linkElement.setAttribute('type', 'text/css');\n            linkElement.setAttribute('href', resolveGamePathFromVersion(GAME_CONFIG_VERSION, 'style.css'));\n            linkElement.addEventListener('error', () => error(), { once: true });\n            linkElement.addEventListener('load', () => resolve(), { once: true });\n            this.page.appendChild(linkElement);\n        });\n    }\n\n    private reset() {\n        this.components.reset();\n        this.tickSecondsEvent.removeAllListeners();\n        gameLoop.reset();\n        gameLoopAnim.reset();\n        Object.values(this.stats).forEach(x => x.reset());\n        world.reset();\n        combat.reset();\n        player.reset();\n        statistics.reset();\n        notifications.reset();\n    }\n\n    async softReset() {\n        assertNonNullable(game.gameConfig);\n        assertDefined(game.gameConfigId);\n\n        this.stats.level.set(1, true);\n        this.saveGame();\n\n        const save = loadGame(game.gameConfigId) as UnsafeSerialization;\n        assertDefined(save);\n\n        const newSave: UnsafeSerialization = {\n            ...save.meta,\n            game: { stats: save.game?.stats }\n        };\n\n        void await game.init(game.gameConfig, game.gameConfigId, newSave);\n    }\n\n    addPage(pageElement: HTMLElement, label: string, id: typeof mainMenuNames[number]) {\n        const menuItem = this.menu.addMenuItem(label, id, mainMenuNames.indexOf(id));\n        this.menu.registerPageElement(pageElement, id);\n        this.menu.after(pageElement);\n        this.menu.sort();\n        return { menuItem };\n    }\n\n    addElementHighlight(id: string, onRemove?: () => void): void;\n    addElementHighlight(element: HTMLElement, onRemove?: () => void): void;\n    addElementHighlight(arg: string | HTMLElement, onRemove?: () => void) {\n        const element = arg instanceof HTMLElement ? arg : this.page.querySelector<HTMLElement>(`[data-id=\"${arg}\"]`);\n        if (!element || element.classList.contains('selected')) {\n            return;\n        }\n        element.setAttribute('data-highlight', '');\n        const removeHighlight = ((e: MouseEvent) => {\n            if (e.type === 'mouseover' && !e.ctrlKey) {\n                return;\n            }\n            element.removeAttribute('data-highlight');\n            this.updateHighlightMenuItems(element);\n            element.removeEventListener('click', removeHighlight);\n            element.removeEventListener('mouseover', removeHighlight);\n            onRemove?.();\n        }).bind(this);\n        element.addEventListener('click', removeHighlight);\n        element.addEventListener('mouseover', removeHighlight);\n        this.updateHighlightMenuItems(element);\n    }\n\n    removeHighlightElement(id: string): void;\n    removeHighlightElement(element: HTMLElement): void;\n    removeHighlightElement(arg: string | HTMLElement) {\n        const element = arg instanceof HTMLElement ? arg : this.page.querySelector<HTMLElement>(`[data-id=\"${arg}\"]`);\n        if (!element) {\n            return;\n        }\n        element.removeAttribute('data-highlight');\n        this.updateHighlightMenuItems(element);\n    }\n\n    clearHighlights() {\n        this.page.querySelectorAll('[data-highlight]').forEach(x => x.removeAttribute('data-highlight'));\n    }\n\n    private updateHighlightMenuItems(element: HTMLElement) {\n        for (const [menuItem, pageElement] of this.menu.generateTabMenuAnectors(element)) {\n            const pageId = menuItem.getAttribute('data-page-target');\n            const highlightedElementsCount = pageElement.querySelector(`[data-page-content=\"${pageId}\"]`)?.querySelectorAll('[data-highlight]').length ?? 0;\n            menuItem.toggleAttribute('data-highlight', highlightedElementsCount > 0);\n        }\n    }\n\n    saveGame() {\n        assertDefined(this._gameConfigId);\n        const saves = loadGame();\n\n        const oldSave = saves.get(this._gameConfigId);\n\n        const serialization: Serialization = {\n            meta: { gameConfigId: this._gameConfigId, createdAt: oldSave?.meta?.createdAt || Date.now(), lastSavedAt: Date.now() }\n        };\n\n        this.serialize(serialization);\n\n        saves.set(this._gameConfigId, serialization);\n\n        saveGame(saves);\n    }\n\n    dispose() {\n        this.pageShadowHost.remove();\n        this._abortController.abort();\n        console.log('dispose');\n    }\n\n    serialize(save: Serialization) {\n        save.game = {\n            stats: serializeStats(this.stats),\n            resources: serializeStats(this.resources)\n        };\n        world.serialize(save);\n        statistics.serialize(save);\n        player.serialize(save);\n        world.serialize(save);\n        combat.effectHandler.serialize(save);\n        notifications.serialize(save);\n        this.components.serialize(save);\n\n        save.elementHighlightIdList = [...game.page.querySelectorAll('[data-highlight]')].map(x => x.getAttribute('data-id')).filter(isNonNullable);\n\n        const name = this.menu.querySelectorStrict('.selected')?.getAttribute('data-page-target');\n        sessionStorage.setItem('main-menu', name || '');\n    }\n\n    private deserialize(save: UnsafeSerialization) {\n        for (const id of save.elementHighlightIdList ?? []) {\n            if (id) {\n                this.addElementHighlight(id);\n            }\n        }\n\n        deserializeStats(game.stats, save.game?.stats || {});\n        deserializeStats(game.resources, save.game?.resources || {});\n        statistics.deserialize(save);\n        player.deserialize(save);\n        world.deserialize(save);\n        this.components.deserialize(save);\n\n        world.deserialize(save);\n\n        combat.effectHandler.deserialize(save);\n        notifications.deserialize(save);\n\n        this.menu.querySelector<HTMLElement>(`[data-page-target=\"${sessionStorage.getItem('main-menu')}\"]`)?.click();\n    }\n}\n\nexport const gameLoop = new Loop('Default');\nexport const gameLoopAnim = new Loop('Animation');\n\nexport const game = new Game();\nexport const statistics = new Statistics();\nexport const combat = new Combat();\nexport const player = new Player();\nexport const notifications = new Notifications();\nexport const world = new World();\n\nexport async function init(args: [...Parameters<typeof game['init']>]) {\n    try {\n        await game.init(args[0], args[1], args[2]);\n    } catch (error) {\n        dispose();\n        throw error;\n    }\n\n    document.addEventListener('visibilitychange', toggleLoopType);\n\n    if (ENVIRONMENT === 'development') {\n        window.modero = { ...window.modero, ...initDevTools() };\n    } else {\n        document.querySelector('[data-live-server-proxy]')?.remove();\n    }\n}\n\nexport function dispose() {\n    game.dispose();\n    if (ENVIRONMENT === 'development') {\n        window.modero?.dispose();\n    }\n}\n\nfunction toggleLoopType() {\n    if (document.hidden) {\n        gameLoop.setLoopType('WebWorker');\n    } else {\n        gameLoop.setLoopType('Default');\n    }\n}"],
  "mappings": "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",
  "names": ["LZString", "ModifierFlags", "player", "min", "max", "self", "x", "value", "rankData", "skillSlot", "data", "id", "createModListElement", "element", "x", "requirement", "artifact", "statistic", "loop", "GameInitializationStage"]
}
