"use strict";export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","additionalProperties":false,"default":{"type":"object","properties":{"$schema":{"type":"string"},"version":{"type":"string","const":"v0"},"resourceList":{"type":"array","items":{"$ref":"#/definitions/Resource"}},"player":{"$ref":"#/definitions/Player"},"enemyBaseLifeList":{"description":"Enemy life for each level starting at level 1. This will determine the max level. Max Level == array.length + 1.","type":"array","items":{"type":"number"}},"enemyBaseCountList":{"description":"Number of enemies for each level starting at level 1","type":"array","items":{"type":"number"}},"enemyList":{"type":"array","items":{"$ref":"#/definitions/Enemy"}},"components":{"type":"object","properties":{"playerClasses":{"$ref":"#/definitions/PlayerClasses"},"skills":{"$ref":"#/definitions/Skills"},"weapon":{"$ref":"#/definitions/Weapon"},"artifacts":{"$ref":"#/definitions/Artifacts"},"ascension":{"$ref":"#/definitions/Ascension"},"achievements":{"$ref":"#/definitions/Achievements"}},"additionalProperties":false}},"additionalProperties":false,"required":["enemyBaseCountList","enemyBaseLifeList","enemyList","version"],"definitions":{"PlayerMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"Ailments Linger"}]},"GlobalPlayerMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"}]},"EnemyMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"}]},"AreaMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources Found$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"}]},"WeaponCraftDescription":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"Reforge item with new random modifiers"},{"pattern":"Reforge item with new random modifiers, including a physical modifier"},{"pattern":"Add a random modifier"},{"pattern":"Add a physical modifier"},{"pattern":"Remove a random modifier"},{"pattern":"Remove an attack modifier"},{"pattern":"Remove a mana modifier"},{"pattern":"Remove an ailment modifier"},{"pattern":"Remove a critical hit modifier"},{"pattern":"Remove an attribute modifier"},{"pattern":"Randomize numerical values"}]},"AchievementDescription":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^Reach Level \\{(([0-9]+)([-]([0-9]+))?)\\}$"},{"pattern":"^Ascend \\{(([0-9]+)([-]([0-9]+))?)\\} Times?$"},{"pattern":"^Obtain \\{(([0-9]+)([-]([0-9]+))?)\\} @\\{()\\}$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"},{"pattern":"^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"},{"pattern":"^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"}]},"Cost":{"type":"string","pattern":"^[^#]*$"},"Id":{"type":"string","pattern":"^[a-f0-9]{6}$"},"Resource":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"type":"string"},"hiddenBeforeMutation":{"type":"boolean"},"stickyByDefault":{"type":"boolean"}},"additionalProperties":false,"required":["id","name"]},"Player":{"type":"object","properties":{"modList":{"items":{"$ref":"#/definitions/GlobalPlayerMod"},"description":"Default modifiers","type":"array"}},"additionalProperties":false,"required":["modList"]},"Enemy":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"level":{"default":1,"type":"number"},"weight":{"type":"number"},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["id","level","modList","name","weight"]},"PlayerClasses":{"type":"object","properties":{"requirement":{"$ref":"#/definitions/Requirements"},"classList":{"type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"},"isDefault":{"type":"boolean"}},"additionalProperties":false,"required":["id","modList","name"]}}},"additionalProperties":false,"required":["classList"]},"Requirements":{"type":"object","properties":{"curLevel":{"default":1,"type":"number"},"maxLevel":{"default":1,"type":"number"},"ascensionCount":{"default":1,"type":"number"}},"additionalProperties":false},"Skills":{"type":"object","properties":{"attackSkills":{"type":"object","properties":{"attackSkillList":{"type":"array","items":{"$ref":"#/definitions/AttackSkill"}}},"additionalProperties":false,"required":["attackSkillList"]},"auraSkills":{"type":"object","properties":{"auraSkillList":{"type":"array","items":{"$ref":"#/definitions/AuraSkill"}},"auraSkillSlotList":{"type":"array","items":{"$ref":"#/definitions/AuraSkillSlot"}}},"additionalProperties":false,"required":["auraSkillList","auraSkillSlotList"]},"passiveSkills":{"type":"object","properties":{"insightCapacityEnhancerList":{"type":"array","items":{"type":"object","properties":{"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"insight":{"type":"integer","minimum":0},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"maxCount":{"type":"integer","minimum":0},"flavourText":{"pattern":"^[A-Za-z .,!?0-9]{3,128}$","type":"string"}},"additionalProperties":false,"required":["insight","maxCount","name","pickProbability"]}},"passiveSkillList":{"type":"array","items":{"$ref":"#/definitions/PassiveSkill"}}},"additionalProperties":false,"required":["insightCapacityEnhancerList","passiveSkillList"]}},"additionalProperties":false},"AttackSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"manaCost":{"type":"integer","minimum":0},"attackSpeed":{"default":1,"type":"number"},"attackEffectiveness":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["attackEffectiveness","attackSpeed","id","manaCost","modList","name","pickProbability"]},"AuraSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"manaCost":{"type":"integer","minimum":0},"baseDuration":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["baseDuration","id","manaCost","modList","name","pickProbability"]},"AuraSkillSlot":{"type":"object","properties":{"level":{"default":1,"type":"number"}},"additionalProperties":false,"required":["level"]},"PassiveSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"insight":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["id","insight","modList","name","pickProbability"]},"Weapon":{"type":"object","properties":{"level":{"default":1,"type":"number"},"weaponTypeList":{"type":"array","items":{"$ref":"#/definitions/WeaponType"}},"modLists":{"type":"array","items":{"type":"array","items":{"$ref":"#/definitions/WeaponMod"}}},"crafting":{"type":"object","properties":{"craftList":{"type":"array","items":{"$ref":"#/definitions/WeaponCraft"}}},"additionalProperties":false,"required":["craftList"]}},"additionalProperties":false,"required":["crafting","modLists"]},"WeaponType":{"type":"object","properties":{"name":{"$ref":"#/definitions/WeaponTypeName"},"id":{"$ref":"#/definitions/Id","type":"string"}},"additionalProperties":false,"required":["name"]},"WeaponTypeName":{"enum":["One Handed Sword","Staff","Two Handed Axe","Wand"],"type":"string"},"WeaponMod":{"type":"object","properties":{"level":{"default":1,"type":"number"},"weight":{"default":100,"type":"number"},"mod":{"$ref":"#/definitions/PlayerMod","type":"string"},"weaponTypes":{"type":"array","items":{"enum":["One Handed Sword","Staff","Two Handed Axe","Wand"],"type":"string"}}},"additionalProperties":false,"required":["level","mod","weight"]},"WeaponCraft":{"type":"object","properties":{"desc":{"$ref":"#/definitions/WeaponCraftDescription","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"startCount":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["desc","pickProbability"]},"Artifacts":{"type":"object","properties":{"artifactList":{"type":"array","items":{"$ref":"#/definitions/Artifact"}}},"additionalProperties":false,"required":["artifactList"]},"Artifact":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"}},"additionalProperties":false,"required":["id","modList","name","pickProbability"]},"Ascension":{"type":"object","properties":{"overLord":{"$ref":"#/definitions/AscensionOverLord"},"ascensionInstanceList":{"type":"array","items":{"$ref":"#/definitions/AscensionInstance"}}},"additionalProperties":false,"required":["ascensionInstanceList","overLord"]},"AscensionOverLord":{"type":"object","properties":{"name":{"type":"string"},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["modList","name"]},"AscensionInstance":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"modList":{"description":"these modifiers will be applied upon ascending","items":{"anyOf":[{"$ref":"#/definitions/PlayerMod"},{"$ref":"#/definitions/AreaMod"}]},"type":"array"}},"additionalProperties":false,"required":["id","modList"]},"Achievements":{"type":"object","properties":{"achievementList":{"type":"array","items":{"$ref":"#/definitions/Achievement"}}},"additionalProperties":false,"required":["achievementList"]},"Achievement":{"type":"object","properties":{"description":{"$ref":"#/definitions/AchievementDescription","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["description"]}},"$schema":"http://json-schema.org/draft-07/schema#"},"definitions":{"PlayerMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"Ailments Linger"}]},"GlobalPlayerMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"}]},"EnemyMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"}]},"AreaMod":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources Found$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"}]},"WeaponCraftDescription":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"Reforge item with new random modifiers"},{"pattern":"Reforge item with new random modifiers, including a physical modifier"},{"pattern":"Add a random modifier"},{"pattern":"Add a physical modifier"},{"pattern":"Remove a random modifier"},{"pattern":"Remove an attack modifier"},{"pattern":"Remove a mana modifier"},{"pattern":"Remove an ailment modifier"},{"pattern":"Remove a critical hit modifier"},{"pattern":"Remove an attribute modifier"},{"pattern":"Randomize numerical values"}]},"AchievementDescription":{"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^Reach Level \\{(([0-9]+)([-]([0-9]+))?)\\}$"},{"pattern":"^Ascend \\{(([0-9]+)([-]([0-9]+))?)\\} Times?$"},{"pattern":"^Obtain \\{(([0-9]+)([-]([0-9]+))?)\\} @\\{()\\}$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"},{"pattern":"^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"},{"pattern":"^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"}]},"Cost":{"type":"string","pattern":"^[^#]*$"},"Id":{"type":"string","pattern":"^[a-f0-9]{6}$"},"Resource":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"type":"string"},"hiddenBeforeMutation":{"type":"boolean"},"stickyByDefault":{"type":"boolean"}},"additionalProperties":false,"required":["id","name"]},"Player":{"type":"object","properties":{"modList":{"items":{"$ref":"#/definitions/GlobalPlayerMod"},"description":"Default modifiers","type":"array"}},"additionalProperties":false,"required":["modList"]},"Enemy":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"level":{"default":1,"type":"number"},"weight":{"type":"number"},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["id","level","modList","name","weight"]},"PlayerClasses":{"type":"object","properties":{"requirement":{"$ref":"#/definitions/Requirements"},"classList":{"type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"},"isDefault":{"type":"boolean"}},"additionalProperties":false,"required":["id","modList","name"]}}},"additionalProperties":false,"required":["classList"]},"Requirements":{"type":"object","properties":{"curLevel":{"default":1,"type":"number"},"maxLevel":{"default":1,"type":"number"},"ascensionCount":{"default":1,"type":"number"}},"additionalProperties":false},"Skills":{"type":"object","properties":{"attackSkills":{"type":"object","properties":{"attackSkillList":{"type":"array","items":{"$ref":"#/definitions/AttackSkill"}}},"additionalProperties":false,"required":["attackSkillList"]},"auraSkills":{"type":"object","properties":{"auraSkillList":{"type":"array","items":{"$ref":"#/definitions/AuraSkill"}},"auraSkillSlotList":{"type":"array","items":{"$ref":"#/definitions/AuraSkillSlot"}}},"additionalProperties":false,"required":["auraSkillList","auraSkillSlotList"]},"passiveSkills":{"type":"object","properties":{"insightCapacityEnhancerList":{"type":"array","items":{"type":"object","properties":{"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"insight":{"type":"integer","minimum":0},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"maxCount":{"type":"integer","minimum":0},"flavourText":{"pattern":"^[A-Za-z .,!?0-9]{3,128}$","type":"string"}},"additionalProperties":false,"required":["insight","maxCount","name","pickProbability"]}},"passiveSkillList":{"type":"array","items":{"$ref":"#/definitions/PassiveSkill"}}},"additionalProperties":false,"required":["insightCapacityEnhancerList","passiveSkillList"]}},"additionalProperties":false},"AttackSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"manaCost":{"type":"integer","minimum":0},"attackSpeed":{"default":1,"type":"number"},"attackEffectiveness":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["attackEffectiveness","attackSpeed","id","manaCost","modList","name","pickProbability"]},"AuraSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"manaCost":{"type":"integer","minimum":0},"baseDuration":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["baseDuration","id","manaCost","modList","name","pickProbability"]},"AuraSkillSlot":{"type":"object","properties":{"level":{"default":1,"type":"number"}},"additionalProperties":false,"required":["level"]},"PassiveSkill":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"insight":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["id","insight","modList","name","pickProbability"]},"Weapon":{"type":"object","properties":{"level":{"default":1,"type":"number"},"weaponTypeList":{"type":"array","items":{"$ref":"#/definitions/WeaponType"}},"modLists":{"type":"array","items":{"type":"array","items":{"$ref":"#/definitions/WeaponMod"}}},"crafting":{"type":"object","properties":{"craftList":{"type":"array","items":{"$ref":"#/definitions/WeaponCraft"}}},"additionalProperties":false,"required":["craftList"]}},"additionalProperties":false,"required":["crafting","modLists"]},"WeaponType":{"type":"object","properties":{"name":{"$ref":"#/definitions/WeaponTypeName"},"id":{"$ref":"#/definitions/Id","type":"string"}},"additionalProperties":false,"required":["name"]},"WeaponTypeName":{"enum":["One Handed Sword","Staff","Two Handed Axe","Wand"],"type":"string"},"WeaponMod":{"type":"object","properties":{"level":{"default":1,"type":"number"},"weight":{"default":100,"type":"number"},"mod":{"$ref":"#/definitions/PlayerMod","type":"string"},"weaponTypes":{"type":"array","items":{"enum":["One Handed Sword","Staff","Two Handed Axe","Wand"],"type":"string"}}},"additionalProperties":false,"required":["level","mod","weight"]},"WeaponCraft":{"type":"object","properties":{"desc":{"$ref":"#/definitions/WeaponCraftDescription","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"startCount":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["desc","pickProbability"]},"Artifacts":{"type":"object","properties":{"artifactList":{"type":"array","items":{"$ref":"#/definitions/Artifact"}}},"additionalProperties":false,"required":["artifactList"]},"Artifact":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"}},"additionalProperties":false,"required":["id","modList","name","pickProbability"]},"Ascension":{"type":"object","properties":{"overLord":{"$ref":"#/definitions/AscensionOverLord"},"ascensionInstanceList":{"type":"array","items":{"$ref":"#/definitions/AscensionInstance"}}},"additionalProperties":false,"required":["ascensionInstanceList","overLord"]},"AscensionOverLord":{"type":"object","properties":{"name":{"type":"string"},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["modList","name"]},"AscensionInstance":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"modList":{"description":"these modifiers will be applied upon ascending","items":{"anyOf":[{"$ref":"#/definitions/PlayerMod"},{"$ref":"#/definitions/AreaMod"}]},"type":"array"}},"additionalProperties":false,"required":["id","modList"]},"Achievements":{"type":"object","properties":{"achievementList":{"type":"array","items":{"$ref":"#/definitions/Achievement"}}},"additionalProperties":false,"required":["achievementList"]},"Achievement":{"type":"object","properties":{"description":{"$ref":"#/definitions/AchievementDescription","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["description"]}},"properties":{"$schema":{"type":"string"},"version":{"type":"string","const":"v0"},"resourceList":{"type":"array","items":{"$ref":"#/definitions/Resource"}},"player":{"$ref":"#/definitions/Player"},"enemyBaseLifeList":{"description":"Enemy life for each level starting at level 1. This will determine the max level. Max Level == array.length + 1.","type":"array","items":{"type":"number"}},"enemyBaseCountList":{"description":"Number of enemies for each level starting at level 1","type":"array","items":{"type":"number"}},"enemyList":{"type":"array","items":{"$ref":"#/definitions/Enemy"}},"components":{"type":"object","properties":{"playerClasses":{"$ref":"#/definitions/PlayerClasses"},"skills":{"$ref":"#/definitions/Skills"},"weapon":{"$ref":"#/definitions/Weapon"},"artifacts":{"$ref":"#/definitions/Artifacts"},"ascension":{"$ref":"#/definitions/Ascension"},"achievements":{"$ref":"#/definitions/Achievements"}},"additionalProperties":false}},"required":["enemyBaseCountList","enemyBaseLifeList","enemyList","version"],"type":"object"};const schema12 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"type":"string"},"hiddenBeforeMutation":{"type":"boolean"},"stickyByDefault":{"type":"boolean"}},"additionalProperties":false,"required":["id","name"]};const schema13 = {"type":"string","pattern":"^[a-f0-9]{6}$"};const pattern0 = new RegExp("^[a-f0-9]{6}$", "u");function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.id === undefined) && (missing0 = "id")) || ((data.name === undefined) && (missing0 = "name"))){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "id") || (key0 === "name")) || (key0 === "hiddenBeforeMutation")) || (key0 === "stickyByDefault"))){validate11.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(typeof data0 !== "string"){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;if(errors === _errs3){if(typeof data0 === "string"){if(!pattern0.test(data0)){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs6 = errors;if(typeof data.name !== "string"){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.hiddenBeforeMutation !== undefined){const _errs8 = errors;if(typeof data.hiddenBeforeMutation !== "boolean"){validate11.errors = [{instancePath:instancePath+"/hiddenBeforeMutation",schemaPath:"#/properties/hiddenBeforeMutation/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.stickyByDefault !== undefined){const _errs10 = errors;if(typeof data.stickyByDefault !== "boolean"){validate11.errors = [{instancePath:instancePath+"/stickyByDefault",schemaPath:"#/properties/stickyByDefault/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}const schema14 = {"type":"object","properties":{"modList":{"items":{"$ref":"#/definitions/GlobalPlayerMod"},"description":"Default modifiers","type":"array"}},"additionalProperties":false,"required":["modList"]};const schema15 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"}]};const pattern1 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$", "u");const pattern2 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$", "u");const pattern3 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$", "u");const pattern4 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$", "u");const pattern5 = new RegExp("^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$", "u");const pattern6 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$", "u");const pattern7 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$", "u");const pattern8 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$", "u");const pattern9 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$", "u");const pattern10 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$", "u");const pattern11 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$", "u");const pattern12 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$", "u");const pattern13 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$", "u");const pattern14 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$", "u");const pattern15 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$", "u");const pattern16 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$", "u");const pattern17 = new RegExp("^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$", "u");const pattern18 = new RegExp("^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$", "u");const pattern19 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$", "u");const pattern20 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$", "u");const pattern21 = new RegExp("^[^#]*$", "u");function validate13(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.modList === undefined) && (missing0 = "modList")){validate13.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(key0 === "modList")){validate13.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.modList !== undefined){let data0 = data.modList;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;const _errs5 = errors;const _errs7 = errors;let valid3 = false;let passing0 = null;const _errs8 = errors;if(typeof data1 === "string"){if(!pattern1.test(data1)){const err0 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs8 === errors;if(_valid0){valid3 = true;passing0 = 0;}const _errs9 = errors;if(typeof data1 === "string"){if(!pattern2.test(data1)){const err1 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Base Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs9 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 1];}else {if(_valid0){valid3 = true;passing0 = 1;}const _errs10 = errors;if(typeof data1 === "string"){if(!pattern3.test(data1)){const err2 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs10 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 2];}else {if(_valid0){valid3 = true;passing0 = 2;}const _errs11 = errors;if(typeof data1 === "string"){if(!pattern4.test(data1)){const err3 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\} Base Burn Duration$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 3];}else {if(_valid0){valid3 = true;passing0 = 3;}const _errs12 = errors;if(typeof data1 === "string"){if(!pattern5.test(data1)){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs12 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 4];}else {if(_valid0){valid3 = true;passing0 = 4;}const _errs13 = errors;if(typeof data1 === "string"){if(!pattern6.test(data1)){const err5 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 5];}else {if(_valid0){valid3 = true;passing0 = 5;}const _errs14 = errors;if(typeof data1 === "string"){if(!pattern7.test(data1)){const err6 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 6];}else {if(_valid0){valid3 = true;passing0 = 6;}const _errs15 = errors;if(typeof data1 === "string"){if(!pattern8.test(data1)){const err7 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 7];}else {if(_valid0){valid3 = true;passing0 = 7;}const _errs16 = errors;if(typeof data1 === "string"){if(!pattern9.test(data1)){const err8 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 8];}else {if(_valid0){valid3 = true;passing0 = 8;}const _errs17 = errors;if(typeof data1 === "string"){if(!pattern10.test(data1)){const err9 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs17 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 9];}else {if(_valid0){valid3 = true;passing0 = 9;}const _errs18 = errors;if(typeof data1 === "string"){if(!pattern11.test(data1)){const err10 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 10];}else {if(_valid0){valid3 = true;passing0 = 10;}const _errs19 = errors;if(typeof data1 === "string"){if(!pattern12.test(data1)){const err11 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 11];}else {if(_valid0){valid3 = true;passing0 = 11;}const _errs20 = errors;if(typeof data1 === "string"){if(!pattern13.test(data1)){const err12 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 12];}else {if(_valid0){valid3 = true;passing0 = 12;}const _errs21 = errors;if(typeof data1 === "string"){if(!pattern14.test(data1)){const err13 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 13];}else {if(_valid0){valid3 = true;passing0 = 13;}const _errs22 = errors;if(typeof data1 === "string"){if(!pattern15.test(data1)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 14];}else {if(_valid0){valid3 = true;passing0 = 14;}const _errs23 = errors;if(typeof data1 === "string"){if(!pattern16.test(data1)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 15];}else {if(_valid0){valid3 = true;passing0 = 15;}const _errs24 = errors;if(typeof data1 === "string"){if(!pattern17.test(data1)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 16];}else {if(_valid0){valid3 = true;passing0 = 16;}const _errs25 = errors;if(typeof data1 === "string"){if(!pattern18.test(data1)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 17];}else {if(_valid0){valid3 = true;passing0 = 17;}const _errs26 = errors;if(typeof data1 === "string"){if(!pattern19.test(data1)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 18];}else {if(_valid0){valid3 = true;passing0 = 18;}const _errs27 = errors;if(typeof data1 === "string"){if(!pattern20.test(data1)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 19];}else {if(_valid0){valid3 = true;passing0 = 19;}}}}}}}}}}}}}}}}}}}}if(!valid3){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;validate13.errors = vErrors;return false;}else {errors = _errs7;if(vErrors !== null){if(_errs7){vErrors.length = _errs7;}else {vErrors = null;}}}if(errors === _errs5){if(typeof data1 === "string"){if(!pattern21.test(data1)){validate13.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate13.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/GlobalPlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate13.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate13.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate13.errors = vErrors;return errors === 0;}const schema16 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"level":{"default":1,"type":"number"},"weight":{"type":"number"},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["id","level","modList","name","weight"]};const schema18 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"}]};const pattern23 = new RegExp("^[A-Za-z 0-9]{3,32}$", "u");const pattern24 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$", "u");const pattern25 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$", "u");const pattern26 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$", "u");const pattern27 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$", "u");function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((((data.id === undefined) && (missing0 = "id")) || ((data.level === undefined) && (missing0 = "level"))) || ((data.modList === undefined) && (missing0 = "modList"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.weight === undefined) && (missing0 = "weight"))){validate15.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((((key0 === "id") || (key0 === "name")) || (key0 === "level")) || (key0 === "weight")) || (key0 === "modList"))){validate15.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(typeof data0 !== "string"){validate15.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;if(errors === _errs3){if(typeof data0 === "string"){if(!pattern0.test(data0)){validate15.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate15.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs6 = errors;if(errors === _errs6){if(typeof data1 === "string"){if(!pattern23.test(data1)){validate15.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""}];return false;}}else {validate15.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.level !== undefined){let data2 = data.level;const _errs8 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate15.errors = [{instancePath:instancePath+"/level",schemaPath:"#/properties/level/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.weight !== undefined){let data3 = data.weight;const _errs10 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate15.errors = [{instancePath:instancePath+"/weight",schemaPath:"#/properties/weight/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.modList !== undefined){let data4 = data.modList;const _errs12 = errors;if(errors === _errs12){if(Array.isArray(data4)){var valid2 = true;const len0 = data4.length;for(let i0=0; i0<len0; i0++){let data5 = data4[i0];const _errs14 = errors;const _errs15 = errors;const _errs17 = errors;let valid4 = false;let passing0 = null;const _errs18 = errors;if(typeof data5 === "string"){if(!pattern24.test(data5)){const err0 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0){valid4 = true;passing0 = 0;}const _errs19 = errors;if(typeof data5 === "string"){if(!pattern25.test(data5)){const err1 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 1];}else {if(_valid0){valid4 = true;passing0 = 1;}const _errs20 = errors;if(typeof data5 === "string"){if(!pattern26.test(data5)){const err2 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 2];}else {if(_valid0){valid4 = true;passing0 = 2;}const _errs21 = errors;if(typeof data5 === "string"){if(!pattern27.test(data5)){const err3 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 3];}else {if(_valid0){valid4 = true;passing0 = 3;}}}}if(!valid4){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;validate15.errors = vErrors;return false;}else {errors = _errs17;if(vErrors !== null){if(_errs17){vErrors.length = _errs17;}else {vErrors = null;}}}if(errors === _errs15){if(typeof data5 === "string"){if(!pattern21.test(data5)){validate15.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate15.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs14 === errors;if(!valid2){break;}}}else {validate15.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}}}}else {validate15.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate15.errors = vErrors;return errors === 0;}const schema19 = {"type":"object","properties":{"requirement":{"$ref":"#/definitions/Requirements"},"classList":{"type":"array","items":{"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"},"isDefault":{"type":"boolean"}},"additionalProperties":false,"required":["id","modList","name"]}}},"additionalProperties":false,"required":["classList"]};const schema20 = {"type":"object","properties":{"curLevel":{"default":1,"type":"number"},"maxLevel":{"default":1,"type":"number"},"ascensionCount":{"default":1,"type":"number"}},"additionalProperties":false};const schema22 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},{"pattern":"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},{"pattern":"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},{"pattern":"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},{"pattern":"Ailments Linger"}]};const pattern31 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$", "u");const pattern32 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$", "u");const pattern33 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$", "u");const pattern34 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$", "u");const pattern35 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$", "u");const pattern36 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$", "u");const pattern37 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$", "u");const pattern38 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$", "u");const pattern39 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$", "u");const pattern40 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$", "u");const pattern41 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$", "u");const pattern42 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$", "u");const pattern44 = new RegExp("^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$", "u");const pattern45 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$", "u");const pattern46 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$", "u");const pattern49 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$", "u");const pattern51 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$", "u");const pattern52 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$", "u");const pattern53 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$", "u");const pattern54 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$", "u");const pattern55 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$", "u");const pattern57 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$", "u");const pattern58 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$", "u");const pattern59 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$", "u");const pattern60 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$", "u");const pattern61 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$", "u");const pattern63 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$", "u");const pattern65 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$", "u");const pattern66 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$", "u");const pattern67 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$", "u");const pattern68 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$", "u");const pattern69 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$", "u");const pattern72 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$", "u");const pattern75 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$", "u");const pattern78 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$", "u");const pattern79 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$", "u");const pattern81 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$", "u");const pattern82 = new RegExp("^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$", "u");const pattern85 = new RegExp("Ailments Linger", "u");function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.classList === undefined) && (missing0 = "classList")){validate17.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "requirement") || (key0 === "classList"))){validate17.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.requirement !== undefined){let data0 = data.requirement;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){const _errs5 = errors;for(const key1 in data0){if(!(((key1 === "curLevel") || (key1 === "maxLevel")) || (key1 === "ascensionCount"))){validate17.errors = [{instancePath:instancePath+"/requirement",schemaPath:"#/definitions/Requirements/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs5 === errors){if(data0.curLevel !== undefined){let data1 = data0.curLevel;const _errs6 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate17.errors = [{instancePath:instancePath+"/requirement/curLevel",schemaPath:"#/definitions/Requirements/properties/curLevel/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.maxLevel !== undefined){let data2 = data0.maxLevel;const _errs8 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate17.errors = [{instancePath:instancePath+"/requirement/maxLevel",schemaPath:"#/definitions/Requirements/properties/maxLevel/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data0.ascensionCount !== undefined){let data3 = data0.ascensionCount;const _errs10 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate17.errors = [{instancePath:instancePath+"/requirement/ascensionCount",schemaPath:"#/definitions/Requirements/properties/ascensionCount/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid2 = _errs10 === errors;}else {var valid2 = true;}}}}}else {validate17.errors = [{instancePath:instancePath+"/requirement",schemaPath:"#/definitions/Requirements/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.classList !== undefined){let data4 = data.classList;const _errs12 = errors;if(errors === _errs12){if(Array.isArray(data4)){var valid3 = true;const len0 = data4.length;for(let i0=0; i0<len0; i0++){let data5 = data4[i0];const _errs14 = errors;if(errors === _errs14){if(data5 && typeof data5 == "object" && !Array.isArray(data5)){let missing1;if((((data5.id === undefined) && (missing1 = "id")) || ((data5.modList === undefined) && (missing1 = "modList"))) || ((data5.name === undefined) && (missing1 = "name"))){validate17.errors = [{instancePath:instancePath+"/classList/" + i0,schemaPath:"#/properties/classList/items/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs16 = errors;for(const key2 in data5){if(!((((key2 === "id") || (key2 === "name")) || (key2 === "modList")) || (key2 === "isDefault"))){validate17.errors = [{instancePath:instancePath+"/classList/" + i0,schemaPath:"#/properties/classList/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];return false;break;}}if(_errs16 === errors){if(data5.id !== undefined){let data6 = data5.id;const _errs17 = errors;if(typeof data6 !== "string"){validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/id",schemaPath:"#/properties/classList/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs18 = errors;if(errors === _errs18){if(typeof data6 === "string"){if(!pattern0.test(data6)){validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid4 = _errs17 === errors;}else {var valid4 = true;}if(valid4){if(data5.name !== undefined){let data7 = data5.name;const _errs21 = errors;if(errors === _errs21){if(typeof data7 === "string"){if(!pattern23.test(data7)){validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/name",schemaPath:"#/properties/classList/items/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""}];return false;}}else {validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/name",schemaPath:"#/properties/classList/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid4 = _errs21 === errors;}else {var valid4 = true;}if(valid4){if(data5.modList !== undefined){let data8 = data5.modList;const _errs23 = errors;if(errors === _errs23){if(Array.isArray(data8)){var valid6 = true;const len1 = data8.length;for(let i1=0; i1<len1; i1++){let data9 = data8[i1];const _errs25 = errors;const _errs26 = errors;const _errs28 = errors;let valid8 = false;let passing0 = null;const _errs29 = errors;if(typeof data9 === "string"){if(!pattern31.test(data9)){const err0 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0){valid8 = true;passing0 = 0;}const _errs30 = errors;if(typeof data9 === "string"){if(!pattern32.test(data9)){const err1 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 1];}else {if(_valid0){valid8 = true;passing0 = 1;}const _errs31 = errors;if(typeof data9 === "string"){if(!pattern33.test(data9)){const err2 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 2];}else {if(_valid0){valid8 = true;passing0 = 2;}const _errs32 = errors;if(typeof data9 === "string"){if(!pattern34.test(data9)){const err3 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 3];}else {if(_valid0){valid8 = true;passing0 = 3;}const _errs33 = errors;if(typeof data9 === "string"){if(!pattern35.test(data9)){const err4 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 4];}else {if(_valid0){valid8 = true;passing0 = 4;}const _errs34 = errors;if(typeof data9 === "string"){if(!pattern36.test(data9)){const err5 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 5];}else {if(_valid0){valid8 = true;passing0 = 5;}const _errs35 = errors;if(typeof data9 === "string"){if(!pattern37.test(data9)){const err6 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 6];}else {if(_valid0){valid8 = true;passing0 = 6;}const _errs36 = errors;if(typeof data9 === "string"){if(!pattern38.test(data9)){const err7 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 7];}else {if(_valid0){valid8 = true;passing0 = 7;}const _errs37 = errors;if(typeof data9 === "string"){if(!pattern39.test(data9)){const err8 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 8];}else {if(_valid0){valid8 = true;passing0 = 8;}const _errs38 = errors;if(typeof data9 === "string"){if(!pattern40.test(data9)){const err9 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 9];}else {if(_valid0){valid8 = true;passing0 = 9;}const _errs39 = errors;if(typeof data9 === "string"){if(!pattern41.test(data9)){const err10 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 10];}else {if(_valid0){valid8 = true;passing0 = 10;}const _errs40 = errors;if(typeof data9 === "string"){if(!pattern42.test(data9)){const err11 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 11];}else {if(_valid0){valid8 = true;passing0 = 11;}const _errs41 = errors;if(typeof data9 === "string"){if(!pattern5.test(data9)){const err12 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 12];}else {if(_valid0){valid8 = true;passing0 = 12;}const _errs42 = errors;if(typeof data9 === "string"){if(!pattern44.test(data9)){const err13 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 13];}else {if(_valid0){valid8 = true;passing0 = 13;}const _errs43 = errors;if(typeof data9 === "string"){if(!pattern45.test(data9)){const err14 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 14];}else {if(_valid0){valid8 = true;passing0 = 14;}const _errs44 = errors;if(typeof data9 === "string"){if(!pattern46.test(data9)){const err15 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 15];}else {if(_valid0){valid8 = true;passing0 = 15;}const _errs45 = errors;if(typeof data9 === "string"){if(!pattern16.test(data9)){const err16 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 16];}else {if(_valid0){valid8 = true;passing0 = 16;}const _errs46 = errors;if(typeof data9 === "string"){if(!pattern18.test(data9)){const err17 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 17];}else {if(_valid0){valid8 = true;passing0 = 17;}const _errs47 = errors;if(typeof data9 === "string"){if(!pattern49.test(data9)){const err18 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 18];}else {if(_valid0){valid8 = true;passing0 = 18;}const _errs48 = errors;if(typeof data9 === "string"){if(!pattern17.test(data9)){const err19 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 19];}else {if(_valid0){valid8 = true;passing0 = 19;}const _errs49 = errors;if(typeof data9 === "string"){if(!pattern51.test(data9)){const err20 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 20];}else {if(_valid0){valid8 = true;passing0 = 20;}const _errs50 = errors;if(typeof data9 === "string"){if(!pattern52.test(data9)){const err21 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 21];}else {if(_valid0){valid8 = true;passing0 = 21;}const _errs51 = errors;if(typeof data9 === "string"){if(!pattern53.test(data9)){const err22 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 22];}else {if(_valid0){valid8 = true;passing0 = 22;}const _errs52 = errors;if(typeof data9 === "string"){if(!pattern54.test(data9)){const err23 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 23];}else {if(_valid0){valid8 = true;passing0 = 23;}const _errs53 = errors;if(typeof data9 === "string"){if(!pattern55.test(data9)){const err24 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 24];}else {if(_valid0){valid8 = true;passing0 = 24;}const _errs54 = errors;if(typeof data9 === "string"){if(!pattern7.test(data9)){const err25 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 25];}else {if(_valid0){valid8 = true;passing0 = 25;}const _errs55 = errors;if(typeof data9 === "string"){if(!pattern57.test(data9)){const err26 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 26];}else {if(_valid0){valid8 = true;passing0 = 26;}const _errs56 = errors;if(typeof data9 === "string"){if(!pattern58.test(data9)){const err27 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 27];}else {if(_valid0){valid8 = true;passing0 = 27;}const _errs57 = errors;if(typeof data9 === "string"){if(!pattern59.test(data9)){const err28 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 28];}else {if(_valid0){valid8 = true;passing0 = 28;}const _errs58 = errors;if(typeof data9 === "string"){if(!pattern60.test(data9)){const err29 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 29];}else {if(_valid0){valid8 = true;passing0 = 29;}const _errs59 = errors;if(typeof data9 === "string"){if(!pattern61.test(data9)){const err30 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 30];}else {if(_valid0){valid8 = true;passing0 = 30;}const _errs60 = errors;if(typeof data9 === "string"){if(!pattern8.test(data9)){const err31 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 31];}else {if(_valid0){valid8 = true;passing0 = 31;}const _errs61 = errors;if(typeof data9 === "string"){if(!pattern63.test(data9)){const err32 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 32];}else {if(_valid0){valid8 = true;passing0 = 32;}const _errs62 = errors;if(typeof data9 === "string"){if(!pattern6.test(data9)){const err33 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 33];}else {if(_valid0){valid8 = true;passing0 = 33;}const _errs63 = errors;if(typeof data9 === "string"){if(!pattern65.test(data9)){const err34 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 34];}else {if(_valid0){valid8 = true;passing0 = 34;}const _errs64 = errors;if(typeof data9 === "string"){if(!pattern66.test(data9)){const err35 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 35];}else {if(_valid0){valid8 = true;passing0 = 35;}const _errs65 = errors;if(typeof data9 === "string"){if(!pattern67.test(data9)){const err36 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 36];}else {if(_valid0){valid8 = true;passing0 = 36;}const _errs66 = errors;if(typeof data9 === "string"){if(!pattern68.test(data9)){const err37 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 37];}else {if(_valid0){valid8 = true;passing0 = 37;}const _errs67 = errors;if(typeof data9 === "string"){if(!pattern69.test(data9)){const err38 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 38];}else {if(_valid0){valid8 = true;passing0 = 38;}const _errs68 = errors;if(typeof data9 === "string"){if(!pattern9.test(data9)){const err39 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 39];}else {if(_valid0){valid8 = true;passing0 = 39;}const _errs69 = errors;if(typeof data9 === "string"){if(!pattern10.test(data9)){const err40 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 40];}else {if(_valid0){valid8 = true;passing0 = 40;}const _errs70 = errors;if(typeof data9 === "string"){if(!pattern72.test(data9)){const err41 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 41];}else {if(_valid0){valid8 = true;passing0 = 41;}const _errs71 = errors;if(typeof data9 === "string"){if(!pattern11.test(data9)){const err42 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 42];}else {if(_valid0){valid8 = true;passing0 = 42;}const _errs72 = errors;if(typeof data9 === "string"){if(!pattern12.test(data9)){const err43 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 43];}else {if(_valid0){valid8 = true;passing0 = 43;}const _errs73 = errors;if(typeof data9 === "string"){if(!pattern75.test(data9)){const err44 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 44];}else {if(_valid0){valid8 = true;passing0 = 44;}const _errs74 = errors;if(typeof data9 === "string"){if(!pattern13.test(data9)){const err45 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 45];}else {if(_valid0){valid8 = true;passing0 = 45;}const _errs75 = errors;if(typeof data9 === "string"){if(!pattern14.test(data9)){const err46 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 46];}else {if(_valid0){valid8 = true;passing0 = 46;}const _errs76 = errors;if(typeof data9 === "string"){if(!pattern78.test(data9)){const err47 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 47];}else {if(_valid0){valid8 = true;passing0 = 47;}const _errs77 = errors;if(typeof data9 === "string"){if(!pattern79.test(data9)){const err48 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs77 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 48];}else {if(_valid0){valid8 = true;passing0 = 48;}const _errs78 = errors;if(typeof data9 === "string"){if(!pattern15.test(data9)){const err49 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs78 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 49];}else {if(_valid0){valid8 = true;passing0 = 49;}const _errs79 = errors;if(typeof data9 === "string"){if(!pattern81.test(data9)){const err50 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs79 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 50];}else {if(_valid0){valid8 = true;passing0 = 50;}const _errs80 = errors;if(typeof data9 === "string"){if(!pattern82.test(data9)){const err51 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs80 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 51];}else {if(_valid0){valid8 = true;passing0 = 51;}const _errs81 = errors;if(typeof data9 === "string"){if(!pattern20.test(data9)){const err52 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs81 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 52];}else {if(_valid0){valid8 = true;passing0 = 52;}const _errs82 = errors;if(typeof data9 === "string"){if(!pattern19.test(data9)){const err53 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs82 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 53];}else {if(_valid0){valid8 = true;passing0 = 53;}const _errs83 = errors;if(typeof data9 === "string"){if(!pattern85.test(data9)){const err54 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "Ailments Linger"},message:"must match pattern \""+"Ailments Linger"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs83 === errors;if(_valid0 && valid8){valid8 = false;passing0 = [passing0, 54];}else {if(_valid0){valid8 = true;passing0 = 54;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid8){const err55 = {instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;validate17.errors = vErrors;return false;}else {errors = _errs28;if(vErrors !== null){if(_errs28){vErrors.length = _errs28;}else {vErrors = null;}}}if(errors === _errs26){if(typeof data9 === "string"){if(!pattern21.test(data9)){validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/modList/" + i1,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid6 = _errs25 === errors;if(!valid6){break;}}}else {validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/modList",schemaPath:"#/properties/classList/items/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid4 = _errs23 === errors;}else {var valid4 = true;}if(valid4){if(data5.isDefault !== undefined){const _errs84 = errors;if(typeof data5.isDefault !== "boolean"){validate17.errors = [{instancePath:instancePath+"/classList/" + i0+"/isDefault",schemaPath:"#/properties/classList/items/properties/isDefault/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid4 = _errs84 === errors;}else {var valid4 = true;}}}}}}}else {validate17.errors = [{instancePath:instancePath+"/classList/" + i0,schemaPath:"#/properties/classList/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid3 = _errs14 === errors;if(!valid3){break;}}}else {validate17.errors = [{instancePath:instancePath+"/classList",schemaPath:"#/properties/classList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}else {validate17.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate17.errors = vErrors;return errors === 0;}const schema23 = {"type":"object","properties":{"attackSkills":{"type":"object","properties":{"attackSkillList":{"type":"array","items":{"$ref":"#/definitions/AttackSkill"}}},"additionalProperties":false,"required":["attackSkillList"]},"auraSkills":{"type":"object","properties":{"auraSkillList":{"type":"array","items":{"$ref":"#/definitions/AuraSkill"}},"auraSkillSlotList":{"type":"array","items":{"$ref":"#/definitions/AuraSkillSlot"}}},"additionalProperties":false,"required":["auraSkillList","auraSkillSlotList"]},"passiveSkills":{"type":"object","properties":{"insightCapacityEnhancerList":{"type":"array","items":{"type":"object","properties":{"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"insight":{"type":"integer","minimum":0},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"maxCount":{"type":"integer","minimum":0},"flavourText":{"pattern":"^[A-Za-z .,!?0-9]{3,128}$","type":"string"}},"additionalProperties":false,"required":["insight","maxCount","name","pickProbability"]}},"passiveSkillList":{"type":"array","items":{"$ref":"#/definitions/PassiveSkill"}}},"additionalProperties":false,"required":["insightCapacityEnhancerList","passiveSkillList"]}},"additionalProperties":false};const schema30 = {"type":"object","properties":{"level":{"default":1,"type":"number"}},"additionalProperties":false,"required":["level"]};const schema24 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"manaCost":{"type":"integer","minimum":0},"attackSpeed":{"default":1,"type":"number"},"attackEffectiveness":{"type":"integer","minimum":0,"default":100},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["attackEffectiveness","attackSpeed","id","manaCost","modList","name","pickProbability"]};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((((((data.attackEffectiveness === undefined) && (missing0 = "attackEffectiveness")) || ((data.attackSpeed === undefined) && (missing0 = "attackSpeed"))) || ((data.id === undefined) && (missing0 = "id"))) || ((data.manaCost === undefined) && (missing0 = "manaCost"))) || ((data.modList === undefined) && (missing0 = "modList"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.pickProbability === undefined) && (missing0 = "pickProbability"))){validate20.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "pickProbability")) || (key0 === "manaCost")) || (key0 === "attackSpeed")) || (key0 === "attackEffectiveness")) || (key0 === "modList"))){validate20.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(typeof data0 !== "string"){validate20.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;if(errors === _errs3){if(typeof data0 === "string"){if(!pattern0.test(data0)){validate20.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs6 = errors;if(errors === _errs6){if(typeof data1 === "string"){if(!pattern23.test(data1)){validate20.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.pickProbability !== undefined){let data2 = data.pickProbability;const _errs8 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate20.errors = [{instancePath:instancePath+"/pickProbability",schemaPath:"#/properties/pickProbability/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.manaCost !== undefined){let data3 = data.manaCost;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate20.errors = [{instancePath:instancePath+"/manaCost",schemaPath:"#/properties/manaCost/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs10){if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 0 || isNaN(data3)){validate20.errors = [{instancePath:instancePath+"/manaCost",schemaPath:"#/properties/manaCost/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.attackSpeed !== undefined){let data4 = data.attackSpeed;const _errs12 = errors;if(!((typeof data4 == "number") && (isFinite(data4)))){validate20.errors = [{instancePath:instancePath+"/attackSpeed",schemaPath:"#/properties/attackSpeed/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.attackEffectiveness !== undefined){let data5 = data.attackEffectiveness;const _errs14 = errors;if(!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))){validate20.errors = [{instancePath:instancePath+"/attackEffectiveness",schemaPath:"#/properties/attackEffectiveness/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs14){if((typeof data5 == "number") && (isFinite(data5))){if(data5 < 0 || isNaN(data5)){validate20.errors = [{instancePath:instancePath+"/attackEffectiveness",schemaPath:"#/properties/attackEffectiveness/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.modList !== undefined){let data6 = data.modList;const _errs16 = errors;if(errors === _errs16){if(Array.isArray(data6)){var valid2 = true;const len0 = data6.length;for(let i0=0; i0<len0; i0++){let data7 = data6[i0];const _errs18 = errors;const _errs19 = errors;const _errs21 = errors;let valid4 = false;let passing0 = null;const _errs22 = errors;if(typeof data7 === "string"){if(!pattern31.test(data7)){const err0 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0){valid4 = true;passing0 = 0;}const _errs23 = errors;if(typeof data7 === "string"){if(!pattern32.test(data7)){const err1 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 1];}else {if(_valid0){valid4 = true;passing0 = 1;}const _errs24 = errors;if(typeof data7 === "string"){if(!pattern33.test(data7)){const err2 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 2];}else {if(_valid0){valid4 = true;passing0 = 2;}const _errs25 = errors;if(typeof data7 === "string"){if(!pattern34.test(data7)){const err3 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 3];}else {if(_valid0){valid4 = true;passing0 = 3;}const _errs26 = errors;if(typeof data7 === "string"){if(!pattern35.test(data7)){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 4];}else {if(_valid0){valid4 = true;passing0 = 4;}const _errs27 = errors;if(typeof data7 === "string"){if(!pattern36.test(data7)){const err5 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 5];}else {if(_valid0){valid4 = true;passing0 = 5;}const _errs28 = errors;if(typeof data7 === "string"){if(!pattern37.test(data7)){const err6 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 6];}else {if(_valid0){valid4 = true;passing0 = 6;}const _errs29 = errors;if(typeof data7 === "string"){if(!pattern38.test(data7)){const err7 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 7];}else {if(_valid0){valid4 = true;passing0 = 7;}const _errs30 = errors;if(typeof data7 === "string"){if(!pattern39.test(data7)){const err8 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 8];}else {if(_valid0){valid4 = true;passing0 = 8;}const _errs31 = errors;if(typeof data7 === "string"){if(!pattern40.test(data7)){const err9 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 9];}else {if(_valid0){valid4 = true;passing0 = 9;}const _errs32 = errors;if(typeof data7 === "string"){if(!pattern41.test(data7)){const err10 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 10];}else {if(_valid0){valid4 = true;passing0 = 10;}const _errs33 = errors;if(typeof data7 === "string"){if(!pattern42.test(data7)){const err11 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 11];}else {if(_valid0){valid4 = true;passing0 = 11;}const _errs34 = errors;if(typeof data7 === "string"){if(!pattern5.test(data7)){const err12 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 12];}else {if(_valid0){valid4 = true;passing0 = 12;}const _errs35 = errors;if(typeof data7 === "string"){if(!pattern44.test(data7)){const err13 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 13];}else {if(_valid0){valid4 = true;passing0 = 13;}const _errs36 = errors;if(typeof data7 === "string"){if(!pattern45.test(data7)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 14];}else {if(_valid0){valid4 = true;passing0 = 14;}const _errs37 = errors;if(typeof data7 === "string"){if(!pattern46.test(data7)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 15];}else {if(_valid0){valid4 = true;passing0 = 15;}const _errs38 = errors;if(typeof data7 === "string"){if(!pattern16.test(data7)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 16];}else {if(_valid0){valid4 = true;passing0 = 16;}const _errs39 = errors;if(typeof data7 === "string"){if(!pattern18.test(data7)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 17];}else {if(_valid0){valid4 = true;passing0 = 17;}const _errs40 = errors;if(typeof data7 === "string"){if(!pattern49.test(data7)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 18];}else {if(_valid0){valid4 = true;passing0 = 18;}const _errs41 = errors;if(typeof data7 === "string"){if(!pattern17.test(data7)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 19];}else {if(_valid0){valid4 = true;passing0 = 19;}const _errs42 = errors;if(typeof data7 === "string"){if(!pattern51.test(data7)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 20];}else {if(_valid0){valid4 = true;passing0 = 20;}const _errs43 = errors;if(typeof data7 === "string"){if(!pattern52.test(data7)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 21];}else {if(_valid0){valid4 = true;passing0 = 21;}const _errs44 = errors;if(typeof data7 === "string"){if(!pattern53.test(data7)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 22];}else {if(_valid0){valid4 = true;passing0 = 22;}const _errs45 = errors;if(typeof data7 === "string"){if(!pattern54.test(data7)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 23];}else {if(_valid0){valid4 = true;passing0 = 23;}const _errs46 = errors;if(typeof data7 === "string"){if(!pattern55.test(data7)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 24];}else {if(_valid0){valid4 = true;passing0 = 24;}const _errs47 = errors;if(typeof data7 === "string"){if(!pattern7.test(data7)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 25];}else {if(_valid0){valid4 = true;passing0 = 25;}const _errs48 = errors;if(typeof data7 === "string"){if(!pattern57.test(data7)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 26];}else {if(_valid0){valid4 = true;passing0 = 26;}const _errs49 = errors;if(typeof data7 === "string"){if(!pattern58.test(data7)){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 27];}else {if(_valid0){valid4 = true;passing0 = 27;}const _errs50 = errors;if(typeof data7 === "string"){if(!pattern59.test(data7)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 28];}else {if(_valid0){valid4 = true;passing0 = 28;}const _errs51 = errors;if(typeof data7 === "string"){if(!pattern60.test(data7)){const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 29];}else {if(_valid0){valid4 = true;passing0 = 29;}const _errs52 = errors;if(typeof data7 === "string"){if(!pattern61.test(data7)){const err30 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 30];}else {if(_valid0){valid4 = true;passing0 = 30;}const _errs53 = errors;if(typeof data7 === "string"){if(!pattern8.test(data7)){const err31 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 31];}else {if(_valid0){valid4 = true;passing0 = 31;}const _errs54 = errors;if(typeof data7 === "string"){if(!pattern63.test(data7)){const err32 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 32];}else {if(_valid0){valid4 = true;passing0 = 32;}const _errs55 = errors;if(typeof data7 === "string"){if(!pattern6.test(data7)){const err33 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 33];}else {if(_valid0){valid4 = true;passing0 = 33;}const _errs56 = errors;if(typeof data7 === "string"){if(!pattern65.test(data7)){const err34 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 34];}else {if(_valid0){valid4 = true;passing0 = 34;}const _errs57 = errors;if(typeof data7 === "string"){if(!pattern66.test(data7)){const err35 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 35];}else {if(_valid0){valid4 = true;passing0 = 35;}const _errs58 = errors;if(typeof data7 === "string"){if(!pattern67.test(data7)){const err36 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 36];}else {if(_valid0){valid4 = true;passing0 = 36;}const _errs59 = errors;if(typeof data7 === "string"){if(!pattern68.test(data7)){const err37 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 37];}else {if(_valid0){valid4 = true;passing0 = 37;}const _errs60 = errors;if(typeof data7 === "string"){if(!pattern69.test(data7)){const err38 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 38];}else {if(_valid0){valid4 = true;passing0 = 38;}const _errs61 = errors;if(typeof data7 === "string"){if(!pattern9.test(data7)){const err39 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 39];}else {if(_valid0){valid4 = true;passing0 = 39;}const _errs62 = errors;if(typeof data7 === "string"){if(!pattern10.test(data7)){const err40 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 40];}else {if(_valid0){valid4 = true;passing0 = 40;}const _errs63 = errors;if(typeof data7 === "string"){if(!pattern72.test(data7)){const err41 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 41];}else {if(_valid0){valid4 = true;passing0 = 41;}const _errs64 = errors;if(typeof data7 === "string"){if(!pattern11.test(data7)){const err42 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 42];}else {if(_valid0){valid4 = true;passing0 = 42;}const _errs65 = errors;if(typeof data7 === "string"){if(!pattern12.test(data7)){const err43 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 43];}else {if(_valid0){valid4 = true;passing0 = 43;}const _errs66 = errors;if(typeof data7 === "string"){if(!pattern75.test(data7)){const err44 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 44];}else {if(_valid0){valid4 = true;passing0 = 44;}const _errs67 = errors;if(typeof data7 === "string"){if(!pattern13.test(data7)){const err45 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 45];}else {if(_valid0){valid4 = true;passing0 = 45;}const _errs68 = errors;if(typeof data7 === "string"){if(!pattern14.test(data7)){const err46 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 46];}else {if(_valid0){valid4 = true;passing0 = 46;}const _errs69 = errors;if(typeof data7 === "string"){if(!pattern78.test(data7)){const err47 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 47];}else {if(_valid0){valid4 = true;passing0 = 47;}const _errs70 = errors;if(typeof data7 === "string"){if(!pattern79.test(data7)){const err48 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 48];}else {if(_valid0){valid4 = true;passing0 = 48;}const _errs71 = errors;if(typeof data7 === "string"){if(!pattern15.test(data7)){const err49 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 49];}else {if(_valid0){valid4 = true;passing0 = 49;}const _errs72 = errors;if(typeof data7 === "string"){if(!pattern81.test(data7)){const err50 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 50];}else {if(_valid0){valid4 = true;passing0 = 50;}const _errs73 = errors;if(typeof data7 === "string"){if(!pattern82.test(data7)){const err51 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 51];}else {if(_valid0){valid4 = true;passing0 = 51;}const _errs74 = errors;if(typeof data7 === "string"){if(!pattern20.test(data7)){const err52 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 52];}else {if(_valid0){valid4 = true;passing0 = 52;}const _errs75 = errors;if(typeof data7 === "string"){if(!pattern19.test(data7)){const err53 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs75 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 53];}else {if(_valid0){valid4 = true;passing0 = 53;}const _errs76 = errors;if(typeof data7 === "string"){if(!pattern85.test(data7)){const err54 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "Ailments Linger"},message:"must match pattern \""+"Ailments Linger"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs76 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 54];}else {if(_valid0){valid4 = true;passing0 = 54;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid4){const err55 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;validate20.errors = vErrors;return false;}else {errors = _errs21;if(vErrors !== null){if(_errs21){vErrors.length = _errs21;}else {vErrors = null;}}}if(errors === _errs19){if(typeof data7 === "string"){if(!pattern21.test(data7)){validate20.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate20.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs18 === errors;if(!valid2){break;}}}else {validate20.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs16 === errors;}else {var valid0 = true;}}}}}}}}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}const schema27 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"manaCost":{"type":"integer","minimum":0},"baseDuration":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["baseDuration","id","manaCost","modList","name","pickProbability"]};function validate22(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((((data.baseDuration === undefined) && (missing0 = "baseDuration")) || ((data.id === undefined) && (missing0 = "id"))) || ((data.manaCost === undefined) && (missing0 = "manaCost"))) || ((data.modList === undefined) && (missing0 = "modList"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.pickProbability === undefined) && (missing0 = "pickProbability"))){validate22.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((((key0 === "id") || (key0 === "name")) || (key0 === "pickProbability")) || (key0 === "manaCost")) || (key0 === "baseDuration")) || (key0 === "modList"))){validate22.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(typeof data0 !== "string"){validate22.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;if(errors === _errs3){if(typeof data0 === "string"){if(!pattern0.test(data0)){validate22.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate22.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs6 = errors;if(errors === _errs6){if(typeof data1 === "string"){if(!pattern23.test(data1)){validate22.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""}];return false;}}else {validate22.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.pickProbability !== undefined){let data2 = data.pickProbability;const _errs8 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate22.errors = [{instancePath:instancePath+"/pickProbability",schemaPath:"#/properties/pickProbability/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.manaCost !== undefined){let data3 = data.manaCost;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate22.errors = [{instancePath:instancePath+"/manaCost",schemaPath:"#/properties/manaCost/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs10){if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 0 || isNaN(data3)){validate22.errors = [{instancePath:instancePath+"/manaCost",schemaPath:"#/properties/manaCost/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.baseDuration !== undefined){let data4 = data.baseDuration;const _errs12 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate22.errors = [{instancePath:instancePath+"/baseDuration",schemaPath:"#/properties/baseDuration/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs12){if((typeof data4 == "number") && (isFinite(data4))){if(data4 < 0 || isNaN(data4)){validate22.errors = [{instancePath:instancePath+"/baseDuration",schemaPath:"#/properties/baseDuration/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.modList !== undefined){let data5 = data.modList;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data5)){var valid2 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){let data6 = data5[i0];const _errs16 = errors;const _errs17 = errors;const _errs19 = errors;let valid4 = false;let passing0 = null;const _errs20 = errors;if(typeof data6 === "string"){if(!pattern31.test(data6)){const err0 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0){valid4 = true;passing0 = 0;}const _errs21 = errors;if(typeof data6 === "string"){if(!pattern32.test(data6)){const err1 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 1];}else {if(_valid0){valid4 = true;passing0 = 1;}const _errs22 = errors;if(typeof data6 === "string"){if(!pattern33.test(data6)){const err2 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 2];}else {if(_valid0){valid4 = true;passing0 = 2;}const _errs23 = errors;if(typeof data6 === "string"){if(!pattern34.test(data6)){const err3 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 3];}else {if(_valid0){valid4 = true;passing0 = 3;}const _errs24 = errors;if(typeof data6 === "string"){if(!pattern35.test(data6)){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 4];}else {if(_valid0){valid4 = true;passing0 = 4;}const _errs25 = errors;if(typeof data6 === "string"){if(!pattern36.test(data6)){const err5 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 5];}else {if(_valid0){valid4 = true;passing0 = 5;}const _errs26 = errors;if(typeof data6 === "string"){if(!pattern37.test(data6)){const err6 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 6];}else {if(_valid0){valid4 = true;passing0 = 6;}const _errs27 = errors;if(typeof data6 === "string"){if(!pattern38.test(data6)){const err7 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 7];}else {if(_valid0){valid4 = true;passing0 = 7;}const _errs28 = errors;if(typeof data6 === "string"){if(!pattern39.test(data6)){const err8 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 8];}else {if(_valid0){valid4 = true;passing0 = 8;}const _errs29 = errors;if(typeof data6 === "string"){if(!pattern40.test(data6)){const err9 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 9];}else {if(_valid0){valid4 = true;passing0 = 9;}const _errs30 = errors;if(typeof data6 === "string"){if(!pattern41.test(data6)){const err10 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 10];}else {if(_valid0){valid4 = true;passing0 = 10;}const _errs31 = errors;if(typeof data6 === "string"){if(!pattern42.test(data6)){const err11 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 11];}else {if(_valid0){valid4 = true;passing0 = 11;}const _errs32 = errors;if(typeof data6 === "string"){if(!pattern5.test(data6)){const err12 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 12];}else {if(_valid0){valid4 = true;passing0 = 12;}const _errs33 = errors;if(typeof data6 === "string"){if(!pattern44.test(data6)){const err13 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 13];}else {if(_valid0){valid4 = true;passing0 = 13;}const _errs34 = errors;if(typeof data6 === "string"){if(!pattern45.test(data6)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 14];}else {if(_valid0){valid4 = true;passing0 = 14;}const _errs35 = errors;if(typeof data6 === "string"){if(!pattern46.test(data6)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 15];}else {if(_valid0){valid4 = true;passing0 = 15;}const _errs36 = errors;if(typeof data6 === "string"){if(!pattern16.test(data6)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 16];}else {if(_valid0){valid4 = true;passing0 = 16;}const _errs37 = errors;if(typeof data6 === "string"){if(!pattern18.test(data6)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 17];}else {if(_valid0){valid4 = true;passing0 = 17;}const _errs38 = errors;if(typeof data6 === "string"){if(!pattern49.test(data6)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 18];}else {if(_valid0){valid4 = true;passing0 = 18;}const _errs39 = errors;if(typeof data6 === "string"){if(!pattern17.test(data6)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 19];}else {if(_valid0){valid4 = true;passing0 = 19;}const _errs40 = errors;if(typeof data6 === "string"){if(!pattern51.test(data6)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 20];}else {if(_valid0){valid4 = true;passing0 = 20;}const _errs41 = errors;if(typeof data6 === "string"){if(!pattern52.test(data6)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 21];}else {if(_valid0){valid4 = true;passing0 = 21;}const _errs42 = errors;if(typeof data6 === "string"){if(!pattern53.test(data6)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 22];}else {if(_valid0){valid4 = true;passing0 = 22;}const _errs43 = errors;if(typeof data6 === "string"){if(!pattern54.test(data6)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 23];}else {if(_valid0){valid4 = true;passing0 = 23;}const _errs44 = errors;if(typeof data6 === "string"){if(!pattern55.test(data6)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 24];}else {if(_valid0){valid4 = true;passing0 = 24;}const _errs45 = errors;if(typeof data6 === "string"){if(!pattern7.test(data6)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 25];}else {if(_valid0){valid4 = true;passing0 = 25;}const _errs46 = errors;if(typeof data6 === "string"){if(!pattern57.test(data6)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 26];}else {if(_valid0){valid4 = true;passing0 = 26;}const _errs47 = errors;if(typeof data6 === "string"){if(!pattern58.test(data6)){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 27];}else {if(_valid0){valid4 = true;passing0 = 27;}const _errs48 = errors;if(typeof data6 === "string"){if(!pattern59.test(data6)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 28];}else {if(_valid0){valid4 = true;passing0 = 28;}const _errs49 = errors;if(typeof data6 === "string"){if(!pattern60.test(data6)){const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 29];}else {if(_valid0){valid4 = true;passing0 = 29;}const _errs50 = errors;if(typeof data6 === "string"){if(!pattern61.test(data6)){const err30 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 30];}else {if(_valid0){valid4 = true;passing0 = 30;}const _errs51 = errors;if(typeof data6 === "string"){if(!pattern8.test(data6)){const err31 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 31];}else {if(_valid0){valid4 = true;passing0 = 31;}const _errs52 = errors;if(typeof data6 === "string"){if(!pattern63.test(data6)){const err32 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 32];}else {if(_valid0){valid4 = true;passing0 = 32;}const _errs53 = errors;if(typeof data6 === "string"){if(!pattern6.test(data6)){const err33 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 33];}else {if(_valid0){valid4 = true;passing0 = 33;}const _errs54 = errors;if(typeof data6 === "string"){if(!pattern65.test(data6)){const err34 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 34];}else {if(_valid0){valid4 = true;passing0 = 34;}const _errs55 = errors;if(typeof data6 === "string"){if(!pattern66.test(data6)){const err35 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 35];}else {if(_valid0){valid4 = true;passing0 = 35;}const _errs56 = errors;if(typeof data6 === "string"){if(!pattern67.test(data6)){const err36 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 36];}else {if(_valid0){valid4 = true;passing0 = 36;}const _errs57 = errors;if(typeof data6 === "string"){if(!pattern68.test(data6)){const err37 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 37];}else {if(_valid0){valid4 = true;passing0 = 37;}const _errs58 = errors;if(typeof data6 === "string"){if(!pattern69.test(data6)){const err38 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 38];}else {if(_valid0){valid4 = true;passing0 = 38;}const _errs59 = errors;if(typeof data6 === "string"){if(!pattern9.test(data6)){const err39 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 39];}else {if(_valid0){valid4 = true;passing0 = 39;}const _errs60 = errors;if(typeof data6 === "string"){if(!pattern10.test(data6)){const err40 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 40];}else {if(_valid0){valid4 = true;passing0 = 40;}const _errs61 = errors;if(typeof data6 === "string"){if(!pattern72.test(data6)){const err41 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 41];}else {if(_valid0){valid4 = true;passing0 = 41;}const _errs62 = errors;if(typeof data6 === "string"){if(!pattern11.test(data6)){const err42 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 42];}else {if(_valid0){valid4 = true;passing0 = 42;}const _errs63 = errors;if(typeof data6 === "string"){if(!pattern12.test(data6)){const err43 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 43];}else {if(_valid0){valid4 = true;passing0 = 43;}const _errs64 = errors;if(typeof data6 === "string"){if(!pattern75.test(data6)){const err44 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 44];}else {if(_valid0){valid4 = true;passing0 = 44;}const _errs65 = errors;if(typeof data6 === "string"){if(!pattern13.test(data6)){const err45 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 45];}else {if(_valid0){valid4 = true;passing0 = 45;}const _errs66 = errors;if(typeof data6 === "string"){if(!pattern14.test(data6)){const err46 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 46];}else {if(_valid0){valid4 = true;passing0 = 46;}const _errs67 = errors;if(typeof data6 === "string"){if(!pattern78.test(data6)){const err47 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 47];}else {if(_valid0){valid4 = true;passing0 = 47;}const _errs68 = errors;if(typeof data6 === "string"){if(!pattern79.test(data6)){const err48 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 48];}else {if(_valid0){valid4 = true;passing0 = 48;}const _errs69 = errors;if(typeof data6 === "string"){if(!pattern15.test(data6)){const err49 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 49];}else {if(_valid0){valid4 = true;passing0 = 49;}const _errs70 = errors;if(typeof data6 === "string"){if(!pattern81.test(data6)){const err50 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 50];}else {if(_valid0){valid4 = true;passing0 = 50;}const _errs71 = errors;if(typeof data6 === "string"){if(!pattern82.test(data6)){const err51 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 51];}else {if(_valid0){valid4 = true;passing0 = 51;}const _errs72 = errors;if(typeof data6 === "string"){if(!pattern20.test(data6)){const err52 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 52];}else {if(_valid0){valid4 = true;passing0 = 52;}const _errs73 = errors;if(typeof data6 === "string"){if(!pattern19.test(data6)){const err53 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs73 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 53];}else {if(_valid0){valid4 = true;passing0 = 53;}const _errs74 = errors;if(typeof data6 === "string"){if(!pattern85.test(data6)){const err54 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "Ailments Linger"},message:"must match pattern \""+"Ailments Linger"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs74 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 54];}else {if(_valid0){valid4 = true;passing0 = 54;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid4){const err55 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;validate22.errors = vErrors;return false;}else {errors = _errs19;if(vErrors !== null){if(_errs19){vErrors.length = _errs19;}else {vErrors = null;}}}if(errors === _errs17){if(typeof data6 === "string"){if(!pattern21.test(data6)){validate22.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate22.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs16 === errors;if(!valid2){break;}}}else {validate22.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}}}}}}}}}else {validate22.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate22.errors = vErrors;return errors === 0;}const schema31 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"pattern":"^[A-Za-z 0-9]{3,32}$","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"insight":{"type":"integer","minimum":0},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["id","insight","modList","name","pickProbability"]};function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((((data.id === undefined) && (missing0 = "id")) || ((data.insight === undefined) && (missing0 = "insight"))) || ((data.modList === undefined) && (missing0 = "modList"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.pickProbability === undefined) && (missing0 = "pickProbability"))){validate24.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((((key0 === "id") || (key0 === "name")) || (key0 === "pickProbability")) || (key0 === "insight")) || (key0 === "modList"))){validate24.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(typeof data0 !== "string"){validate24.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;if(errors === _errs3){if(typeof data0 === "string"){if(!pattern0.test(data0)){validate24.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate24.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){let data1 = data.name;const _errs6 = errors;if(errors === _errs6){if(typeof data1 === "string"){if(!pattern23.test(data1)){validate24.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""}];return false;}}else {validate24.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.pickProbability !== undefined){let data2 = data.pickProbability;const _errs8 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate24.errors = [{instancePath:instancePath+"/pickProbability",schemaPath:"#/properties/pickProbability/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.insight !== undefined){let data3 = data.insight;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate24.errors = [{instancePath:instancePath+"/insight",schemaPath:"#/properties/insight/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs10){if((typeof data3 == "number") && (isFinite(data3))){if(data3 < 0 || isNaN(data3)){validate24.errors = [{instancePath:instancePath+"/insight",schemaPath:"#/properties/insight/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.modList !== undefined){let data4 = data.modList;const _errs12 = errors;if(errors === _errs12){if(Array.isArray(data4)){var valid2 = true;const len0 = data4.length;for(let i0=0; i0<len0; i0++){let data5 = data4[i0];const _errs14 = errors;const _errs15 = errors;const _errs17 = errors;let valid4 = false;let passing0 = null;const _errs18 = errors;if(typeof data5 === "string"){if(!pattern31.test(data5)){const err0 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0){valid4 = true;passing0 = 0;}const _errs19 = errors;if(typeof data5 === "string"){if(!pattern32.test(data5)){const err1 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 1];}else {if(_valid0){valid4 = true;passing0 = 1;}const _errs20 = errors;if(typeof data5 === "string"){if(!pattern33.test(data5)){const err2 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 2];}else {if(_valid0){valid4 = true;passing0 = 2;}const _errs21 = errors;if(typeof data5 === "string"){if(!pattern34.test(data5)){const err3 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 3];}else {if(_valid0){valid4 = true;passing0 = 3;}const _errs22 = errors;if(typeof data5 === "string"){if(!pattern35.test(data5)){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 4];}else {if(_valid0){valid4 = true;passing0 = 4;}const _errs23 = errors;if(typeof data5 === "string"){if(!pattern36.test(data5)){const err5 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 5];}else {if(_valid0){valid4 = true;passing0 = 5;}const _errs24 = errors;if(typeof data5 === "string"){if(!pattern37.test(data5)){const err6 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 6];}else {if(_valid0){valid4 = true;passing0 = 6;}const _errs25 = errors;if(typeof data5 === "string"){if(!pattern38.test(data5)){const err7 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 7];}else {if(_valid0){valid4 = true;passing0 = 7;}const _errs26 = errors;if(typeof data5 === "string"){if(!pattern39.test(data5)){const err8 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 8];}else {if(_valid0){valid4 = true;passing0 = 8;}const _errs27 = errors;if(typeof data5 === "string"){if(!pattern40.test(data5)){const err9 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 9];}else {if(_valid0){valid4 = true;passing0 = 9;}const _errs28 = errors;if(typeof data5 === "string"){if(!pattern41.test(data5)){const err10 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 10];}else {if(_valid0){valid4 = true;passing0 = 10;}const _errs29 = errors;if(typeof data5 === "string"){if(!pattern42.test(data5)){const err11 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 11];}else {if(_valid0){valid4 = true;passing0 = 11;}const _errs30 = errors;if(typeof data5 === "string"){if(!pattern5.test(data5)){const err12 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 12];}else {if(_valid0){valid4 = true;passing0 = 12;}const _errs31 = errors;if(typeof data5 === "string"){if(!pattern44.test(data5)){const err13 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 13];}else {if(_valid0){valid4 = true;passing0 = 13;}const _errs32 = errors;if(typeof data5 === "string"){if(!pattern45.test(data5)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 14];}else {if(_valid0){valid4 = true;passing0 = 14;}const _errs33 = errors;if(typeof data5 === "string"){if(!pattern46.test(data5)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 15];}else {if(_valid0){valid4 = true;passing0 = 15;}const _errs34 = errors;if(typeof data5 === "string"){if(!pattern16.test(data5)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 16];}else {if(_valid0){valid4 = true;passing0 = 16;}const _errs35 = errors;if(typeof data5 === "string"){if(!pattern18.test(data5)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 17];}else {if(_valid0){valid4 = true;passing0 = 17;}const _errs36 = errors;if(typeof data5 === "string"){if(!pattern49.test(data5)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 18];}else {if(_valid0){valid4 = true;passing0 = 18;}const _errs37 = errors;if(typeof data5 === "string"){if(!pattern17.test(data5)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 19];}else {if(_valid0){valid4 = true;passing0 = 19;}const _errs38 = errors;if(typeof data5 === "string"){if(!pattern51.test(data5)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 20];}else {if(_valid0){valid4 = true;passing0 = 20;}const _errs39 = errors;if(typeof data5 === "string"){if(!pattern52.test(data5)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 21];}else {if(_valid0){valid4 = true;passing0 = 21;}const _errs40 = errors;if(typeof data5 === "string"){if(!pattern53.test(data5)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 22];}else {if(_valid0){valid4 = true;passing0 = 22;}const _errs41 = errors;if(typeof data5 === "string"){if(!pattern54.test(data5)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 23];}else {if(_valid0){valid4 = true;passing0 = 23;}const _errs42 = errors;if(typeof data5 === "string"){if(!pattern55.test(data5)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 24];}else {if(_valid0){valid4 = true;passing0 = 24;}const _errs43 = errors;if(typeof data5 === "string"){if(!pattern7.test(data5)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 25];}else {if(_valid0){valid4 = true;passing0 = 25;}const _errs44 = errors;if(typeof data5 === "string"){if(!pattern57.test(data5)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 26];}else {if(_valid0){valid4 = true;passing0 = 26;}const _errs45 = errors;if(typeof data5 === "string"){if(!pattern58.test(data5)){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 27];}else {if(_valid0){valid4 = true;passing0 = 27;}const _errs46 = errors;if(typeof data5 === "string"){if(!pattern59.test(data5)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 28];}else {if(_valid0){valid4 = true;passing0 = 28;}const _errs47 = errors;if(typeof data5 === "string"){if(!pattern60.test(data5)){const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 29];}else {if(_valid0){valid4 = true;passing0 = 29;}const _errs48 = errors;if(typeof data5 === "string"){if(!pattern61.test(data5)){const err30 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 30];}else {if(_valid0){valid4 = true;passing0 = 30;}const _errs49 = errors;if(typeof data5 === "string"){if(!pattern8.test(data5)){const err31 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 31];}else {if(_valid0){valid4 = true;passing0 = 31;}const _errs50 = errors;if(typeof data5 === "string"){if(!pattern63.test(data5)){const err32 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 32];}else {if(_valid0){valid4 = true;passing0 = 32;}const _errs51 = errors;if(typeof data5 === "string"){if(!pattern6.test(data5)){const err33 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 33];}else {if(_valid0){valid4 = true;passing0 = 33;}const _errs52 = errors;if(typeof data5 === "string"){if(!pattern65.test(data5)){const err34 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 34];}else {if(_valid0){valid4 = true;passing0 = 34;}const _errs53 = errors;if(typeof data5 === "string"){if(!pattern66.test(data5)){const err35 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 35];}else {if(_valid0){valid4 = true;passing0 = 35;}const _errs54 = errors;if(typeof data5 === "string"){if(!pattern67.test(data5)){const err36 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 36];}else {if(_valid0){valid4 = true;passing0 = 36;}const _errs55 = errors;if(typeof data5 === "string"){if(!pattern68.test(data5)){const err37 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 37];}else {if(_valid0){valid4 = true;passing0 = 37;}const _errs56 = errors;if(typeof data5 === "string"){if(!pattern69.test(data5)){const err38 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 38];}else {if(_valid0){valid4 = true;passing0 = 38;}const _errs57 = errors;if(typeof data5 === "string"){if(!pattern9.test(data5)){const err39 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 39];}else {if(_valid0){valid4 = true;passing0 = 39;}const _errs58 = errors;if(typeof data5 === "string"){if(!pattern10.test(data5)){const err40 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 40];}else {if(_valid0){valid4 = true;passing0 = 40;}const _errs59 = errors;if(typeof data5 === "string"){if(!pattern72.test(data5)){const err41 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 41];}else {if(_valid0){valid4 = true;passing0 = 41;}const _errs60 = errors;if(typeof data5 === "string"){if(!pattern11.test(data5)){const err42 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 42];}else {if(_valid0){valid4 = true;passing0 = 42;}const _errs61 = errors;if(typeof data5 === "string"){if(!pattern12.test(data5)){const err43 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 43];}else {if(_valid0){valid4 = true;passing0 = 43;}const _errs62 = errors;if(typeof data5 === "string"){if(!pattern75.test(data5)){const err44 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 44];}else {if(_valid0){valid4 = true;passing0 = 44;}const _errs63 = errors;if(typeof data5 === "string"){if(!pattern13.test(data5)){const err45 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 45];}else {if(_valid0){valid4 = true;passing0 = 45;}const _errs64 = errors;if(typeof data5 === "string"){if(!pattern14.test(data5)){const err46 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 46];}else {if(_valid0){valid4 = true;passing0 = 46;}const _errs65 = errors;if(typeof data5 === "string"){if(!pattern78.test(data5)){const err47 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 47];}else {if(_valid0){valid4 = true;passing0 = 47;}const _errs66 = errors;if(typeof data5 === "string"){if(!pattern79.test(data5)){const err48 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 48];}else {if(_valid0){valid4 = true;passing0 = 48;}const _errs67 = errors;if(typeof data5 === "string"){if(!pattern15.test(data5)){const err49 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 49];}else {if(_valid0){valid4 = true;passing0 = 49;}const _errs68 = errors;if(typeof data5 === "string"){if(!pattern81.test(data5)){const err50 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 50];}else {if(_valid0){valid4 = true;passing0 = 50;}const _errs69 = errors;if(typeof data5 === "string"){if(!pattern82.test(data5)){const err51 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs69 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 51];}else {if(_valid0){valid4 = true;passing0 = 51;}const _errs70 = errors;if(typeof data5 === "string"){if(!pattern20.test(data5)){const err52 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs70 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 52];}else {if(_valid0){valid4 = true;passing0 = 52;}const _errs71 = errors;if(typeof data5 === "string"){if(!pattern19.test(data5)){const err53 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs71 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 53];}else {if(_valid0){valid4 = true;passing0 = 53;}const _errs72 = errors;if(typeof data5 === "string"){if(!pattern85.test(data5)){const err54 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "Ailments Linger"},message:"must match pattern \""+"Ailments Linger"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs72 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 54];}else {if(_valid0){valid4 = true;passing0 = 54;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid4){const err55 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;validate24.errors = vErrors;return false;}else {errors = _errs17;if(vErrors !== null){if(_errs17){vErrors.length = _errs17;}else {vErrors = null;}}}if(errors === _errs15){if(typeof data5 === "string"){if(!pattern21.test(data5)){validate24.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate24.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs14 === errors;if(!valid2){break;}}}else {validate24.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}}}}else {validate24.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate24.errors = vErrors;return errors === 0;}const pattern204 = new RegExp("^[A-Za-z .,!?0-9]{3,128}$", "u");function validate19(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){const _errs1 = errors;for(const key0 in data){if(!(((key0 === "attackSkills") || (key0 === "auraSkills")) || (key0 === "passiveSkills"))){validate19.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.attackSkills !== undefined){let data0 = data.attackSkills;const _errs2 = errors;if(errors === _errs2){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing0;if((data0.attackSkillList === undefined) && (missing0 = "attackSkillList")){validate19.errors = [{instancePath:instancePath+"/attackSkills",schemaPath:"#/properties/attackSkills/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs4 = errors;for(const key1 in data0){if(!(key1 === "attackSkillList")){validate19.errors = [{instancePath:instancePath+"/attackSkills",schemaPath:"#/properties/attackSkills/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs4 === errors){if(data0.attackSkillList !== undefined){let data1 = data0.attackSkillList;const _errs5 = errors;if(errors === _errs5){if(Array.isArray(data1)){var valid2 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){const _errs7 = errors;if(!(validate20(data1[i0], {instancePath:instancePath+"/attackSkills/attackSkillList/" + i0,parentData:data1,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate20.errors : vErrors.concat(validate20.errors);errors = vErrors.length;}var valid2 = _errs7 === errors;if(!valid2){break;}}}else {validate19.errors = [{instancePath:instancePath+"/attackSkills/attackSkillList",schemaPath:"#/properties/attackSkills/properties/attackSkillList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate19.errors = [{instancePath:instancePath+"/attackSkills",schemaPath:"#/properties/attackSkills/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.auraSkills !== undefined){let data3 = data.auraSkills;const _errs8 = errors;if(errors === _errs8){if(data3 && typeof data3 == "object" && !Array.isArray(data3)){let missing1;if(((data3.auraSkillList === undefined) && (missing1 = "auraSkillList")) || ((data3.auraSkillSlotList === undefined) && (missing1 = "auraSkillSlotList"))){validate19.errors = [{instancePath:instancePath+"/auraSkills",schemaPath:"#/properties/auraSkills/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs10 = errors;for(const key2 in data3){if(!((key2 === "auraSkillList") || (key2 === "auraSkillSlotList"))){validate19.errors = [{instancePath:instancePath+"/auraSkills",schemaPath:"#/properties/auraSkills/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];return false;break;}}if(_errs10 === errors){if(data3.auraSkillList !== undefined){let data4 = data3.auraSkillList;const _errs11 = errors;if(errors === _errs11){if(Array.isArray(data4)){var valid4 = true;const len1 = data4.length;for(let i1=0; i1<len1; i1++){const _errs13 = errors;if(!(validate22(data4[i1], {instancePath:instancePath+"/auraSkills/auraSkillList/" + i1,parentData:data4,parentDataProperty:i1,rootData}))){vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);errors = vErrors.length;}var valid4 = _errs13 === errors;if(!valid4){break;}}}else {validate19.errors = [{instancePath:instancePath+"/auraSkills/auraSkillList",schemaPath:"#/properties/auraSkills/properties/auraSkillList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid3 = _errs11 === errors;}else {var valid3 = true;}if(valid3){if(data3.auraSkillSlotList !== undefined){let data6 = data3.auraSkillSlotList;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data6)){var valid5 = true;const len2 = data6.length;for(let i2=0; i2<len2; i2++){let data7 = data6[i2];const _errs16 = errors;const _errs17 = errors;if(errors === _errs17){if(data7 && typeof data7 == "object" && !Array.isArray(data7)){let missing2;if((data7.level === undefined) && (missing2 = "level")){validate19.errors = [{instancePath:instancePath+"/auraSkills/auraSkillSlotList/" + i2,schemaPath:"#/definitions/AuraSkillSlot/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {const _errs19 = errors;for(const key3 in data7){if(!(key3 === "level")){validate19.errors = [{instancePath:instancePath+"/auraSkills/auraSkillSlotList/" + i2,schemaPath:"#/definitions/AuraSkillSlot/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];return false;break;}}if(_errs19 === errors){if(data7.level !== undefined){let data8 = data7.level;if(!((typeof data8 == "number") && (isFinite(data8)))){validate19.errors = [{instancePath:instancePath+"/auraSkills/auraSkillSlotList/" + i2+"/level",schemaPath:"#/definitions/AuraSkillSlot/properties/level/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}}}}}else {validate19.errors = [{instancePath:instancePath+"/auraSkills/auraSkillSlotList/" + i2,schemaPath:"#/definitions/AuraSkillSlot/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid5 = _errs16 === errors;if(!valid5){break;}}}else {validate19.errors = [{instancePath:instancePath+"/auraSkills/auraSkillSlotList",schemaPath:"#/properties/auraSkills/properties/auraSkillSlotList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid3 = _errs14 === errors;}else {var valid3 = true;}}}}}else {validate19.errors = [{instancePath:instancePath+"/auraSkills",schemaPath:"#/properties/auraSkills/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.passiveSkills !== undefined){let data9 = data.passiveSkills;const _errs22 = errors;if(errors === _errs22){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){let missing3;if(((data9.insightCapacityEnhancerList === undefined) && (missing3 = "insightCapacityEnhancerList")) || ((data9.passiveSkillList === undefined) && (missing3 = "passiveSkillList"))){validate19.errors = [{instancePath:instancePath+"/passiveSkills",schemaPath:"#/properties/passiveSkills/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];return false;}else {const _errs24 = errors;for(const key4 in data9){if(!((key4 === "insightCapacityEnhancerList") || (key4 === "passiveSkillList"))){validate19.errors = [{instancePath:instancePath+"/passiveSkills",schemaPath:"#/properties/passiveSkills/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];return false;break;}}if(_errs24 === errors){if(data9.insightCapacityEnhancerList !== undefined){let data10 = data9.insightCapacityEnhancerList;const _errs25 = errors;if(errors === _errs25){if(Array.isArray(data10)){var valid9 = true;const len3 = data10.length;for(let i3=0; i3<len3; i3++){let data11 = data10[i3];const _errs27 = errors;if(errors === _errs27){if(data11 && typeof data11 == "object" && !Array.isArray(data11)){let missing4;if(((((data11.insight === undefined) && (missing4 = "insight")) || ((data11.maxCount === undefined) && (missing4 = "maxCount"))) || ((data11.name === undefined) && (missing4 = "name"))) || ((data11.pickProbability === undefined) && (missing4 = "pickProbability"))){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3,schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];return false;}else {const _errs29 = errors;for(const key5 in data11){if(!(((((key5 === "name") || (key5 === "insight")) || (key5 === "pickProbability")) || (key5 === "maxCount")) || (key5 === "flavourText"))){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3,schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];return false;break;}}if(_errs29 === errors){if(data11.name !== undefined){let data12 = data11.name;const _errs30 = errors;if(errors === _errs30){if(typeof data12 === "string"){if(!pattern23.test(data12)){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/name",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/name/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z 0-9]{3,32}$"},message:"must match pattern \""+"^[A-Za-z 0-9]{3,32}$"+"\""}];return false;}}else {validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/name",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid10 = _errs30 === errors;}else {var valid10 = true;}if(valid10){if(data11.insight !== undefined){let data13 = data11.insight;const _errs32 = errors;if(!(((typeof data13 == "number") && (!(data13 % 1) && !isNaN(data13))) && (isFinite(data13)))){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/insight",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/insight/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs32){if((typeof data13 == "number") && (isFinite(data13))){if(data13 < 0 || isNaN(data13)){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/insight",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/insight/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid10 = _errs32 === errors;}else {var valid10 = true;}if(valid10){if(data11.pickProbability !== undefined){let data14 = data11.pickProbability;const _errs34 = errors;if(!((typeof data14 == "number") && (isFinite(data14)))){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/pickProbability",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/pickProbability/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid10 = _errs34 === errors;}else {var valid10 = true;}if(valid10){if(data11.maxCount !== undefined){let data15 = data11.maxCount;const _errs36 = errors;if(!(((typeof data15 == "number") && (!(data15 % 1) && !isNaN(data15))) && (isFinite(data15)))){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/maxCount",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/maxCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs36){if((typeof data15 == "number") && (isFinite(data15))){if(data15 < 0 || isNaN(data15)){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/maxCount",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/maxCount/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid10 = _errs36 === errors;}else {var valid10 = true;}if(valid10){if(data11.flavourText !== undefined){let data16 = data11.flavourText;const _errs38 = errors;if(errors === _errs38){if(typeof data16 === "string"){if(!pattern204.test(data16)){validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/flavourText",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/flavourText/pattern",keyword:"pattern",params:{pattern: "^[A-Za-z .,!?0-9]{3,128}$"},message:"must match pattern \""+"^[A-Za-z .,!?0-9]{3,128}$"+"\""}];return false;}}else {validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3+"/flavourText",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/properties/flavourText/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid10 = _errs38 === errors;}else {var valid10 = true;}}}}}}}}else {validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList/" + i3,schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid9 = _errs27 === errors;if(!valid9){break;}}}else {validate19.errors = [{instancePath:instancePath+"/passiveSkills/insightCapacityEnhancerList",schemaPath:"#/properties/passiveSkills/properties/insightCapacityEnhancerList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid8 = _errs25 === errors;}else {var valid8 = true;}if(valid8){if(data9.passiveSkillList !== undefined){let data17 = data9.passiveSkillList;const _errs40 = errors;if(errors === _errs40){if(Array.isArray(data17)){var valid11 = true;const len4 = data17.length;for(let i4=0; i4<len4; i4++){const _errs42 = errors;if(!(validate24(data17[i4], {instancePath:instancePath+"/passiveSkills/passiveSkillList/" + i4,parentData:data17,parentDataProperty:i4,rootData}))){vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);errors = vErrors.length;}var valid11 = _errs42 === errors;if(!valid11){break;}}}else {validate19.errors = [{instancePath:instancePath+"/passiveSkills/passiveSkillList",schemaPath:"#/properties/passiveSkills/properties/passiveSkillList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid8 = _errs40 === errors;}else {var valid8 = true;}}}}}else {validate19.errors = [{instancePath:instancePath+"/passiveSkills",schemaPath:"#/properties/passiveSkills/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs22 === errors;}else {var valid0 = true;}}}}}else {validate19.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate19.errors = vErrors;return errors === 0;}const schema34 = {"type":"object","properties":{"level":{"default":1,"type":"number"},"weaponTypeList":{"type":"array","items":{"$ref":"#/definitions/WeaponType"}},"modLists":{"type":"array","items":{"type":"array","items":{"$ref":"#/definitions/WeaponMod"}}},"crafting":{"type":"object","properties":{"craftList":{"type":"array","items":{"$ref":"#/definitions/WeaponCraft"}}},"additionalProperties":false,"required":["craftList"]}},"additionalProperties":false,"required":["crafting","modLists"]};const schema35 = {"type":"object","properties":{"name":{"$ref":"#/definitions/WeaponTypeName"},"id":{"$ref":"#/definitions/Id","type":"string"}},"additionalProperties":false,"required":["name"]};const schema36 = {"enum":["One Handed Sword","Staff","Two Handed Axe","Wand"],"type":"string"};function validate28(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.name === undefined) && (missing0 = "name")){validate28.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "name") || (key0 === "id"))){validate28.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){let data0 = data.name;const _errs2 = errors;if(typeof data0 !== "string"){validate28.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/WeaponTypeName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((data0 === "One Handed Sword") || (data0 === "Staff")) || (data0 === "Two Handed Axe")) || (data0 === "Wand"))){validate28.errors = [{instancePath:instancePath+"/name",schemaPath:"#/definitions/WeaponTypeName/enum",keyword:"enum",params:{allowedValues: schema36.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data1 = data.id;const _errs5 = errors;if(typeof data1 !== "string"){validate28.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs6 = errors;if(errors === _errs6){if(typeof data1 === "string"){if(!pattern0.test(data1)){validate28.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate28.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs5 === errors;}else {var valid0 = true;}}}}}else {validate28.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate28.errors = vErrors;return errors === 0;}const schema38 = {"type":"object","properties":{"level":{"default":1,"type":"number"},"weight":{"default":100,"type":"number"},"mod":{"$ref":"#/definitions/PlayerMod","type":"string"},"weaponTypes":{"type":"array","items":{"enum":["One Handed Sword","Staff","Two Handed Axe","Wand"],"type":"string"}}},"additionalProperties":false,"required":["level","mod","weight"]};function validate30(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((data.level === undefined) && (missing0 = "level")) || ((data.mod === undefined) && (missing0 = "mod"))) || ((data.weight === undefined) && (missing0 = "weight"))){validate30.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "level") || (key0 === "weight")) || (key0 === "mod")) || (key0 === "weaponTypes"))){validate30.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.level !== undefined){let data0 = data.level;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate30.errors = [{instancePath:instancePath+"/level",schemaPath:"#/properties/level/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.weight !== undefined){let data1 = data.weight;const _errs4 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate30.errors = [{instancePath:instancePath+"/weight",schemaPath:"#/properties/weight/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.mod !== undefined){let data2 = data.mod;const _errs6 = errors;if(typeof data2 !== "string"){validate30.errors = [{instancePath:instancePath+"/mod",schemaPath:"#/properties/mod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs7 = errors;const _errs9 = errors;let valid2 = false;let passing0 = null;const _errs10 = errors;if(typeof data2 === "string"){if(!pattern31.test(data2)){const err0 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs10 === errors;if(_valid0){valid2 = true;passing0 = 0;}const _errs11 = errors;if(typeof data2 === "string"){if(!pattern32.test(data2)){const err1 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 1];}else {if(_valid0){valid2 = true;passing0 = 1;}const _errs12 = errors;if(typeof data2 === "string"){if(!pattern33.test(data2)){const err2 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs12 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 2];}else {if(_valid0){valid2 = true;passing0 = 2;}const _errs13 = errors;if(typeof data2 === "string"){if(!pattern34.test(data2)){const err3 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 3];}else {if(_valid0){valid2 = true;passing0 = 3;}const _errs14 = errors;if(typeof data2 === "string"){if(!pattern35.test(data2)){const err4 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 4];}else {if(_valid0){valid2 = true;passing0 = 4;}const _errs15 = errors;if(typeof data2 === "string"){if(!pattern36.test(data2)){const err5 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 5];}else {if(_valid0){valid2 = true;passing0 = 5;}const _errs16 = errors;if(typeof data2 === "string"){if(!pattern37.test(data2)){const err6 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 6];}else {if(_valid0){valid2 = true;passing0 = 6;}const _errs17 = errors;if(typeof data2 === "string"){if(!pattern38.test(data2)){const err7 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs17 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 7];}else {if(_valid0){valid2 = true;passing0 = 7;}const _errs18 = errors;if(typeof data2 === "string"){if(!pattern39.test(data2)){const err8 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 8];}else {if(_valid0){valid2 = true;passing0 = 8;}const _errs19 = errors;if(typeof data2 === "string"){if(!pattern40.test(data2)){const err9 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 9];}else {if(_valid0){valid2 = true;passing0 = 9;}const _errs20 = errors;if(typeof data2 === "string"){if(!pattern41.test(data2)){const err10 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 10];}else {if(_valid0){valid2 = true;passing0 = 10;}const _errs21 = errors;if(typeof data2 === "string"){if(!pattern42.test(data2)){const err11 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 11];}else {if(_valid0){valid2 = true;passing0 = 11;}const _errs22 = errors;if(typeof data2 === "string"){if(!pattern5.test(data2)){const err12 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 12];}else {if(_valid0){valid2 = true;passing0 = 12;}const _errs23 = errors;if(typeof data2 === "string"){if(!pattern44.test(data2)){const err13 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 13];}else {if(_valid0){valid2 = true;passing0 = 13;}const _errs24 = errors;if(typeof data2 === "string"){if(!pattern45.test(data2)){const err14 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 14];}else {if(_valid0){valid2 = true;passing0 = 14;}const _errs25 = errors;if(typeof data2 === "string"){if(!pattern46.test(data2)){const err15 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 15];}else {if(_valid0){valid2 = true;passing0 = 15;}const _errs26 = errors;if(typeof data2 === "string"){if(!pattern16.test(data2)){const err16 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 16];}else {if(_valid0){valid2 = true;passing0 = 16;}const _errs27 = errors;if(typeof data2 === "string"){if(!pattern18.test(data2)){const err17 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 17];}else {if(_valid0){valid2 = true;passing0 = 17;}const _errs28 = errors;if(typeof data2 === "string"){if(!pattern49.test(data2)){const err18 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 18];}else {if(_valid0){valid2 = true;passing0 = 18;}const _errs29 = errors;if(typeof data2 === "string"){if(!pattern17.test(data2)){const err19 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 19];}else {if(_valid0){valid2 = true;passing0 = 19;}const _errs30 = errors;if(typeof data2 === "string"){if(!pattern51.test(data2)){const err20 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 20];}else {if(_valid0){valid2 = true;passing0 = 20;}const _errs31 = errors;if(typeof data2 === "string"){if(!pattern52.test(data2)){const err21 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 21];}else {if(_valid0){valid2 = true;passing0 = 21;}const _errs32 = errors;if(typeof data2 === "string"){if(!pattern53.test(data2)){const err22 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 22];}else {if(_valid0){valid2 = true;passing0 = 22;}const _errs33 = errors;if(typeof data2 === "string"){if(!pattern54.test(data2)){const err23 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 23];}else {if(_valid0){valid2 = true;passing0 = 23;}const _errs34 = errors;if(typeof data2 === "string"){if(!pattern55.test(data2)){const err24 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 24];}else {if(_valid0){valid2 = true;passing0 = 24;}const _errs35 = errors;if(typeof data2 === "string"){if(!pattern7.test(data2)){const err25 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 25];}else {if(_valid0){valid2 = true;passing0 = 25;}const _errs36 = errors;if(typeof data2 === "string"){if(!pattern57.test(data2)){const err26 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 26];}else {if(_valid0){valid2 = true;passing0 = 26;}const _errs37 = errors;if(typeof data2 === "string"){if(!pattern58.test(data2)){const err27 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 27];}else {if(_valid0){valid2 = true;passing0 = 27;}const _errs38 = errors;if(typeof data2 === "string"){if(!pattern59.test(data2)){const err28 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 28];}else {if(_valid0){valid2 = true;passing0 = 28;}const _errs39 = errors;if(typeof data2 === "string"){if(!pattern60.test(data2)){const err29 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 29];}else {if(_valid0){valid2 = true;passing0 = 29;}const _errs40 = errors;if(typeof data2 === "string"){if(!pattern61.test(data2)){const err30 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 30];}else {if(_valid0){valid2 = true;passing0 = 30;}const _errs41 = errors;if(typeof data2 === "string"){if(!pattern8.test(data2)){const err31 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 31];}else {if(_valid0){valid2 = true;passing0 = 31;}const _errs42 = errors;if(typeof data2 === "string"){if(!pattern63.test(data2)){const err32 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 32];}else {if(_valid0){valid2 = true;passing0 = 32;}const _errs43 = errors;if(typeof data2 === "string"){if(!pattern6.test(data2)){const err33 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 33];}else {if(_valid0){valid2 = true;passing0 = 33;}const _errs44 = errors;if(typeof data2 === "string"){if(!pattern65.test(data2)){const err34 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 34];}else {if(_valid0){valid2 = true;passing0 = 34;}const _errs45 = errors;if(typeof data2 === "string"){if(!pattern66.test(data2)){const err35 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 35];}else {if(_valid0){valid2 = true;passing0 = 35;}const _errs46 = errors;if(typeof data2 === "string"){if(!pattern67.test(data2)){const err36 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 36];}else {if(_valid0){valid2 = true;passing0 = 36;}const _errs47 = errors;if(typeof data2 === "string"){if(!pattern68.test(data2)){const err37 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 37];}else {if(_valid0){valid2 = true;passing0 = 37;}const _errs48 = errors;if(typeof data2 === "string"){if(!pattern69.test(data2)){const err38 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 38];}else {if(_valid0){valid2 = true;passing0 = 38;}const _errs49 = errors;if(typeof data2 === "string"){if(!pattern9.test(data2)){const err39 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 39];}else {if(_valid0){valid2 = true;passing0 = 39;}const _errs50 = errors;if(typeof data2 === "string"){if(!pattern10.test(data2)){const err40 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 40];}else {if(_valid0){valid2 = true;passing0 = 40;}const _errs51 = errors;if(typeof data2 === "string"){if(!pattern72.test(data2)){const err41 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 41];}else {if(_valid0){valid2 = true;passing0 = 41;}const _errs52 = errors;if(typeof data2 === "string"){if(!pattern11.test(data2)){const err42 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 42];}else {if(_valid0){valid2 = true;passing0 = 42;}const _errs53 = errors;if(typeof data2 === "string"){if(!pattern12.test(data2)){const err43 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 43];}else {if(_valid0){valid2 = true;passing0 = 43;}const _errs54 = errors;if(typeof data2 === "string"){if(!pattern75.test(data2)){const err44 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 44];}else {if(_valid0){valid2 = true;passing0 = 44;}const _errs55 = errors;if(typeof data2 === "string"){if(!pattern13.test(data2)){const err45 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 45];}else {if(_valid0){valid2 = true;passing0 = 45;}const _errs56 = errors;if(typeof data2 === "string"){if(!pattern14.test(data2)){const err46 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 46];}else {if(_valid0){valid2 = true;passing0 = 46;}const _errs57 = errors;if(typeof data2 === "string"){if(!pattern78.test(data2)){const err47 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 47];}else {if(_valid0){valid2 = true;passing0 = 47;}const _errs58 = errors;if(typeof data2 === "string"){if(!pattern79.test(data2)){const err48 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 48];}else {if(_valid0){valid2 = true;passing0 = 48;}const _errs59 = errors;if(typeof data2 === "string"){if(!pattern15.test(data2)){const err49 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 49];}else {if(_valid0){valid2 = true;passing0 = 49;}const _errs60 = errors;if(typeof data2 === "string"){if(!pattern81.test(data2)){const err50 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 50];}else {if(_valid0){valid2 = true;passing0 = 50;}const _errs61 = errors;if(typeof data2 === "string"){if(!pattern82.test(data2)){const err51 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 51];}else {if(_valid0){valid2 = true;passing0 = 51;}const _errs62 = errors;if(typeof data2 === "string"){if(!pattern20.test(data2)){const err52 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 52];}else {if(_valid0){valid2 = true;passing0 = 52;}const _errs63 = errors;if(typeof data2 === "string"){if(!pattern19.test(data2)){const err53 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 53];}else {if(_valid0){valid2 = true;passing0 = 53;}const _errs64 = errors;if(typeof data2 === "string"){if(!pattern85.test(data2)){const err54 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "Ailments Linger"},message:"must match pattern \""+"Ailments Linger"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 54];}else {if(_valid0){valid2 = true;passing0 = 54;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid2){const err55 = {instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;validate30.errors = vErrors;return false;}else {errors = _errs9;if(vErrors !== null){if(_errs9){vErrors.length = _errs9;}else {vErrors = null;}}}if(errors === _errs7){if(typeof data2 === "string"){if(!pattern21.test(data2)){validate30.errors = [{instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate30.errors = [{instancePath:instancePath+"/mod",schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.weaponTypes !== undefined){let data3 = data.weaponTypes;const _errs66 = errors;if(errors === _errs66){if(Array.isArray(data3)){var valid3 = true;const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];const _errs68 = errors;if(typeof data4 !== "string"){validate30.errors = [{instancePath:instancePath+"/weaponTypes/" + i0,schemaPath:"#/properties/weaponTypes/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if(!((((data4 === "One Handed Sword") || (data4 === "Staff")) || (data4 === "Two Handed Axe")) || (data4 === "Wand"))){validate30.errors = [{instancePath:instancePath+"/weaponTypes/" + i0,schemaPath:"#/properties/weaponTypes/items/enum",keyword:"enum",params:{allowedValues: schema38.properties.weaponTypes.items.enum},message:"must be equal to one of the allowed values"}];return false;}var valid3 = _errs68 === errors;if(!valid3){break;}}}else {validate30.errors = [{instancePath:instancePath+"/weaponTypes",schemaPath:"#/properties/weaponTypes/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs66 === errors;}else {var valid0 = true;}}}}}}}else {validate30.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate30.errors = vErrors;return errors === 0;}const schema40 = {"type":"object","properties":{"desc":{"$ref":"#/definitions/WeaponCraftDescription","type":"string"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"},"startCount":{"type":"integer","minimum":0}},"additionalProperties":false,"required":["desc","pickProbability"]};const schema41 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"Reforge item with new random modifiers"},{"pattern":"Reforge item with new random modifiers, including a physical modifier"},{"pattern":"Add a random modifier"},{"pattern":"Add a physical modifier"},{"pattern":"Remove a random modifier"},{"pattern":"Remove an attack modifier"},{"pattern":"Remove a mana modifier"},{"pattern":"Remove an ailment modifier"},{"pattern":"Remove a critical hit modifier"},{"pattern":"Remove an attribute modifier"},{"pattern":"Randomize numerical values"}]};const pattern320 = new RegExp("Reforge item with new random modifiers", "u");const pattern321 = new RegExp("Reforge item with new random modifiers, including a physical modifier", "u");const pattern322 = new RegExp("Add a random modifier", "u");const pattern323 = new RegExp("Add a physical modifier", "u");const pattern324 = new RegExp("Remove a random modifier", "u");const pattern325 = new RegExp("Remove an attack modifier", "u");const pattern326 = new RegExp("Remove a mana modifier", "u");const pattern327 = new RegExp("Remove an ailment modifier", "u");const pattern328 = new RegExp("Remove a critical hit modifier", "u");const pattern329 = new RegExp("Remove an attribute modifier", "u");const pattern330 = new RegExp("Randomize numerical values", "u");function validate32(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.desc === undefined) && (missing0 = "desc")) || ((data.pickProbability === undefined) && (missing0 = "pickProbability"))){validate32.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(((key0 === "desc") || (key0 === "pickProbability")) || (key0 === "startCount"))){validate32.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.desc !== undefined){let data0 = data.desc;const _errs2 = errors;if(typeof data0 !== "string"){validate32.errors = [{instancePath:instancePath+"/desc",schemaPath:"#/properties/desc/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;const _errs5 = errors;let valid2 = false;let passing0 = null;const _errs6 = errors;if(typeof data0 === "string"){if(!pattern320.test(data0)){const err0 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/0/pattern",keyword:"pattern",params:{pattern: "Reforge item with new random modifiers"},message:"must match pattern \""+"Reforge item with new random modifiers"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs6 === errors;if(_valid0){valid2 = true;passing0 = 0;}const _errs7 = errors;if(typeof data0 === "string"){if(!pattern321.test(data0)){const err1 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/1/pattern",keyword:"pattern",params:{pattern: "Reforge item with new random modifiers, including a physical modifier"},message:"must match pattern \""+"Reforge item with new random modifiers, including a physical modifier"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs7 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 1];}else {if(_valid0){valid2 = true;passing0 = 1;}const _errs8 = errors;if(typeof data0 === "string"){if(!pattern322.test(data0)){const err2 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/2/pattern",keyword:"pattern",params:{pattern: "Add a random modifier"},message:"must match pattern \""+"Add a random modifier"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs8 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 2];}else {if(_valid0){valid2 = true;passing0 = 2;}const _errs9 = errors;if(typeof data0 === "string"){if(!pattern323.test(data0)){const err3 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/3/pattern",keyword:"pattern",params:{pattern: "Add a physical modifier"},message:"must match pattern \""+"Add a physical modifier"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs9 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 3];}else {if(_valid0){valid2 = true;passing0 = 3;}const _errs10 = errors;if(typeof data0 === "string"){if(!pattern324.test(data0)){const err4 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/4/pattern",keyword:"pattern",params:{pattern: "Remove a random modifier"},message:"must match pattern \""+"Remove a random modifier"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs10 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 4];}else {if(_valid0){valid2 = true;passing0 = 4;}const _errs11 = errors;if(typeof data0 === "string"){if(!pattern325.test(data0)){const err5 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/5/pattern",keyword:"pattern",params:{pattern: "Remove an attack modifier"},message:"must match pattern \""+"Remove an attack modifier"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 5];}else {if(_valid0){valid2 = true;passing0 = 5;}const _errs12 = errors;if(typeof data0 === "string"){if(!pattern326.test(data0)){const err6 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/6/pattern",keyword:"pattern",params:{pattern: "Remove a mana modifier"},message:"must match pattern \""+"Remove a mana modifier"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs12 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 6];}else {if(_valid0){valid2 = true;passing0 = 6;}const _errs13 = errors;if(typeof data0 === "string"){if(!pattern327.test(data0)){const err7 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/7/pattern",keyword:"pattern",params:{pattern: "Remove an ailment modifier"},message:"must match pattern \""+"Remove an ailment modifier"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 7];}else {if(_valid0){valid2 = true;passing0 = 7;}const _errs14 = errors;if(typeof data0 === "string"){if(!pattern328.test(data0)){const err8 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/8/pattern",keyword:"pattern",params:{pattern: "Remove a critical hit modifier"},message:"must match pattern \""+"Remove a critical hit modifier"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 8];}else {if(_valid0){valid2 = true;passing0 = 8;}const _errs15 = errors;if(typeof data0 === "string"){if(!pattern329.test(data0)){const err9 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/9/pattern",keyword:"pattern",params:{pattern: "Remove an attribute modifier"},message:"must match pattern \""+"Remove an attribute modifier"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 9];}else {if(_valid0){valid2 = true;passing0 = 9;}const _errs16 = errors;if(typeof data0 === "string"){if(!pattern330.test(data0)){const err10 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf/10/pattern",keyword:"pattern",params:{pattern: "Randomize numerical values"},message:"must match pattern \""+"Randomize numerical values"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 10];}else {if(_valid0){valid2 = true;passing0 = 10;}}}}}}}}}}}if(!valid2){const err11 = {instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;validate32.errors = vErrors;return false;}else {errors = _errs5;if(vErrors !== null){if(_errs5){vErrors.length = _errs5;}else {vErrors = null;}}}if(errors === _errs3){if(typeof data0 === "string"){if(!pattern21.test(data0)){validate32.errors = [{instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate32.errors = [{instancePath:instancePath+"/desc",schemaPath:"#/definitions/WeaponCraftDescription/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.pickProbability !== undefined){let data1 = data.pickProbability;const _errs18 = errors;if(!((typeof data1 == "number") && (isFinite(data1)))){validate32.errors = [{instancePath:instancePath+"/pickProbability",schemaPath:"#/properties/pickProbability/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.startCount !== undefined){let data2 = data.startCount;const _errs20 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate32.errors = [{instancePath:instancePath+"/startCount",schemaPath:"#/properties/startCount/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}if(errors === _errs20){if((typeof data2 == "number") && (isFinite(data2))){if(data2 < 0 || isNaN(data2)){validate32.errors = [{instancePath:instancePath+"/startCount",schemaPath:"#/properties/startCount/minimum",keyword:"minimum",params:{comparison: ">=", limit: 0},message:"must be >= 0"}];return false;}}}var valid0 = _errs20 === errors;}else {var valid0 = true;}}}}}}else {validate32.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate32.errors = vErrors;return errors === 0;}function validate27(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.crafting === undefined) && (missing0 = "crafting")) || ((data.modLists === undefined) && (missing0 = "modLists"))){validate27.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "level") || (key0 === "weaponTypeList")) || (key0 === "modLists")) || (key0 === "crafting"))){validate27.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.level !== undefined){let data0 = data.level;const _errs2 = errors;if(!((typeof data0 == "number") && (isFinite(data0)))){validate27.errors = [{instancePath:instancePath+"/level",schemaPath:"#/properties/level/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.weaponTypeList !== undefined){let data1 = data.weaponTypeList;const _errs4 = errors;if(errors === _errs4){if(Array.isArray(data1)){var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){const _errs6 = errors;if(!(validate28(data1[i0], {instancePath:instancePath+"/weaponTypeList/" + i0,parentData:data1,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate28.errors : vErrors.concat(validate28.errors);errors = vErrors.length;}var valid1 = _errs6 === errors;if(!valid1){break;}}}else {validate27.errors = [{instancePath:instancePath+"/weaponTypeList",schemaPath:"#/properties/weaponTypeList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.modLists !== undefined){let data3 = data.modLists;const _errs7 = errors;if(errors === _errs7){if(Array.isArray(data3)){var valid2 = true;const len1 = data3.length;for(let i1=0; i1<len1; i1++){let data4 = data3[i1];const _errs9 = errors;if(errors === _errs9){if(Array.isArray(data4)){var valid3 = true;const len2 = data4.length;for(let i2=0; i2<len2; i2++){const _errs11 = errors;if(!(validate30(data4[i2], {instancePath:instancePath+"/modLists/" + i1+"/" + i2,parentData:data4,parentDataProperty:i2,rootData}))){vErrors = vErrors === null ? validate30.errors : vErrors.concat(validate30.errors);errors = vErrors.length;}var valid3 = _errs11 === errors;if(!valid3){break;}}}else {validate27.errors = [{instancePath:instancePath+"/modLists/" + i1,schemaPath:"#/properties/modLists/items/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid2 = _errs9 === errors;if(!valid2){break;}}}else {validate27.errors = [{instancePath:instancePath+"/modLists",schemaPath:"#/properties/modLists/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs7 === errors;}else {var valid0 = true;}if(valid0){if(data.crafting !== undefined){let data6 = data.crafting;const _errs12 = errors;if(errors === _errs12){if(data6 && typeof data6 == "object" && !Array.isArray(data6)){let missing1;if((data6.craftList === undefined) && (missing1 = "craftList")){validate27.errors = [{instancePath:instancePath+"/crafting",schemaPath:"#/properties/crafting/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {const _errs14 = errors;for(const key1 in data6){if(!(key1 === "craftList")){validate27.errors = [{instancePath:instancePath+"/crafting",schemaPath:"#/properties/crafting/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs14 === errors){if(data6.craftList !== undefined){let data7 = data6.craftList;const _errs15 = errors;if(errors === _errs15){if(Array.isArray(data7)){var valid5 = true;const len3 = data7.length;for(let i3=0; i3<len3; i3++){const _errs17 = errors;if(!(validate32(data7[i3], {instancePath:instancePath+"/crafting/craftList/" + i3,parentData:data7,parentDataProperty:i3,rootData}))){vErrors = vErrors === null ? validate32.errors : vErrors.concat(validate32.errors);errors = vErrors.length;}var valid5 = _errs17 === errors;if(!valid5){break;}}}else {validate27.errors = [{instancePath:instancePath+"/crafting/craftList",schemaPath:"#/properties/crafting/properties/craftList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate27.errors = [{instancePath:instancePath+"/crafting",schemaPath:"#/properties/crafting/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}}}else {validate27.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate27.errors = vErrors;return errors === 0;}const schema42 = {"type":"object","properties":{"artifactList":{"type":"array","items":{"$ref":"#/definitions/Artifact"}}},"additionalProperties":false,"required":["artifactList"]};const schema43 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"name":{"type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"},"pickProbability":{"default":100,"description":"Probability = 1/PickProbability","type":"number"}},"additionalProperties":false,"required":["id","modList","name","pickProbability"]};function validate36(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.id === undefined) && (missing0 = "id")) || ((data.modList === undefined) && (missing0 = "modList"))) || ((data.name === undefined) && (missing0 = "name"))) || ((data.pickProbability === undefined) && (missing0 = "pickProbability"))){validate36.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((key0 === "id") || (key0 === "name")) || (key0 === "modList")) || (key0 === "pickProbability"))){validate36.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(typeof data0 !== "string"){validate36.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;if(errors === _errs3){if(typeof data0 === "string"){if(!pattern0.test(data0)){validate36.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate36.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs6 = errors;if(typeof data.name !== "string"){validate36.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.modList !== undefined){let data2 = data.modList;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data2)){var valid2 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs10 = errors;const _errs11 = errors;const _errs13 = errors;let valid4 = false;let passing0 = null;const _errs14 = errors;if(typeof data3 === "string"){if(!pattern31.test(data3)){const err0 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0){valid4 = true;passing0 = 0;}const _errs15 = errors;if(typeof data3 === "string"){if(!pattern32.test(data3)){const err1 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 1];}else {if(_valid0){valid4 = true;passing0 = 1;}const _errs16 = errors;if(typeof data3 === "string"){if(!pattern33.test(data3)){const err2 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 2];}else {if(_valid0){valid4 = true;passing0 = 2;}const _errs17 = errors;if(typeof data3 === "string"){if(!pattern34.test(data3)){const err3 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs17 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 3];}else {if(_valid0){valid4 = true;passing0 = 3;}const _errs18 = errors;if(typeof data3 === "string"){if(!pattern35.test(data3)){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs18 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 4];}else {if(_valid0){valid4 = true;passing0 = 4;}const _errs19 = errors;if(typeof data3 === "string"){if(!pattern36.test(data3)){const err5 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs19 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 5];}else {if(_valid0){valid4 = true;passing0 = 5;}const _errs20 = errors;if(typeof data3 === "string"){if(!pattern37.test(data3)){const err6 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs20 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 6];}else {if(_valid0){valid4 = true;passing0 = 6;}const _errs21 = errors;if(typeof data3 === "string"){if(!pattern38.test(data3)){const err7 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs21 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 7];}else {if(_valid0){valid4 = true;passing0 = 7;}const _errs22 = errors;if(typeof data3 === "string"){if(!pattern39.test(data3)){const err8 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs22 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 8];}else {if(_valid0){valid4 = true;passing0 = 8;}const _errs23 = errors;if(typeof data3 === "string"){if(!pattern40.test(data3)){const err9 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs23 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 9];}else {if(_valid0){valid4 = true;passing0 = 9;}const _errs24 = errors;if(typeof data3 === "string"){if(!pattern41.test(data3)){const err10 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs24 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 10];}else {if(_valid0){valid4 = true;passing0 = 10;}const _errs25 = errors;if(typeof data3 === "string"){if(!pattern42.test(data3)){const err11 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid0 = _errs25 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 11];}else {if(_valid0){valid4 = true;passing0 = 11;}const _errs26 = errors;if(typeof data3 === "string"){if(!pattern5.test(data3)){const err12 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid0 = _errs26 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 12];}else {if(_valid0){valid4 = true;passing0 = 12;}const _errs27 = errors;if(typeof data3 === "string"){if(!pattern44.test(data3)){const err13 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid0 = _errs27 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 13];}else {if(_valid0){valid4 = true;passing0 = 13;}const _errs28 = errors;if(typeof data3 === "string"){if(!pattern45.test(data3)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid0 = _errs28 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 14];}else {if(_valid0){valid4 = true;passing0 = 14;}const _errs29 = errors;if(typeof data3 === "string"){if(!pattern46.test(data3)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid0 = _errs29 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 15];}else {if(_valid0){valid4 = true;passing0 = 15;}const _errs30 = errors;if(typeof data3 === "string"){if(!pattern16.test(data3)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid0 = _errs30 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 16];}else {if(_valid0){valid4 = true;passing0 = 16;}const _errs31 = errors;if(typeof data3 === "string"){if(!pattern18.test(data3)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid0 = _errs31 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 17];}else {if(_valid0){valid4 = true;passing0 = 17;}const _errs32 = errors;if(typeof data3 === "string"){if(!pattern49.test(data3)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid0 = _errs32 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 18];}else {if(_valid0){valid4 = true;passing0 = 18;}const _errs33 = errors;if(typeof data3 === "string"){if(!pattern17.test(data3)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid0 = _errs33 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 19];}else {if(_valid0){valid4 = true;passing0 = 19;}const _errs34 = errors;if(typeof data3 === "string"){if(!pattern51.test(data3)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid0 = _errs34 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 20];}else {if(_valid0){valid4 = true;passing0 = 20;}const _errs35 = errors;if(typeof data3 === "string"){if(!pattern52.test(data3)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid0 = _errs35 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 21];}else {if(_valid0){valid4 = true;passing0 = 21;}const _errs36 = errors;if(typeof data3 === "string"){if(!pattern53.test(data3)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid0 = _errs36 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 22];}else {if(_valid0){valid4 = true;passing0 = 22;}const _errs37 = errors;if(typeof data3 === "string"){if(!pattern54.test(data3)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid0 = _errs37 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 23];}else {if(_valid0){valid4 = true;passing0 = 23;}const _errs38 = errors;if(typeof data3 === "string"){if(!pattern55.test(data3)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid0 = _errs38 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 24];}else {if(_valid0){valid4 = true;passing0 = 24;}const _errs39 = errors;if(typeof data3 === "string"){if(!pattern7.test(data3)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid0 = _errs39 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 25];}else {if(_valid0){valid4 = true;passing0 = 25;}const _errs40 = errors;if(typeof data3 === "string"){if(!pattern57.test(data3)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid0 = _errs40 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 26];}else {if(_valid0){valid4 = true;passing0 = 26;}const _errs41 = errors;if(typeof data3 === "string"){if(!pattern58.test(data3)){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid0 = _errs41 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 27];}else {if(_valid0){valid4 = true;passing0 = 27;}const _errs42 = errors;if(typeof data3 === "string"){if(!pattern59.test(data3)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid0 = _errs42 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 28];}else {if(_valid0){valid4 = true;passing0 = 28;}const _errs43 = errors;if(typeof data3 === "string"){if(!pattern60.test(data3)){const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid0 = _errs43 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 29];}else {if(_valid0){valid4 = true;passing0 = 29;}const _errs44 = errors;if(typeof data3 === "string"){if(!pattern61.test(data3)){const err30 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid0 = _errs44 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 30];}else {if(_valid0){valid4 = true;passing0 = 30;}const _errs45 = errors;if(typeof data3 === "string"){if(!pattern8.test(data3)){const err31 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid0 = _errs45 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 31];}else {if(_valid0){valid4 = true;passing0 = 31;}const _errs46 = errors;if(typeof data3 === "string"){if(!pattern63.test(data3)){const err32 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid0 = _errs46 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 32];}else {if(_valid0){valid4 = true;passing0 = 32;}const _errs47 = errors;if(typeof data3 === "string"){if(!pattern6.test(data3)){const err33 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid0 = _errs47 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 33];}else {if(_valid0){valid4 = true;passing0 = 33;}const _errs48 = errors;if(typeof data3 === "string"){if(!pattern65.test(data3)){const err34 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid0 = _errs48 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 34];}else {if(_valid0){valid4 = true;passing0 = 34;}const _errs49 = errors;if(typeof data3 === "string"){if(!pattern66.test(data3)){const err35 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid0 = _errs49 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 35];}else {if(_valid0){valid4 = true;passing0 = 35;}const _errs50 = errors;if(typeof data3 === "string"){if(!pattern67.test(data3)){const err36 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid0 = _errs50 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 36];}else {if(_valid0){valid4 = true;passing0 = 36;}const _errs51 = errors;if(typeof data3 === "string"){if(!pattern68.test(data3)){const err37 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid0 = _errs51 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 37];}else {if(_valid0){valid4 = true;passing0 = 37;}const _errs52 = errors;if(typeof data3 === "string"){if(!pattern69.test(data3)){const err38 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid0 = _errs52 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 38];}else {if(_valid0){valid4 = true;passing0 = 38;}const _errs53 = errors;if(typeof data3 === "string"){if(!pattern9.test(data3)){const err39 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid0 = _errs53 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 39];}else {if(_valid0){valid4 = true;passing0 = 39;}const _errs54 = errors;if(typeof data3 === "string"){if(!pattern10.test(data3)){const err40 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid0 = _errs54 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 40];}else {if(_valid0){valid4 = true;passing0 = 40;}const _errs55 = errors;if(typeof data3 === "string"){if(!pattern72.test(data3)){const err41 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid0 = _errs55 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 41];}else {if(_valid0){valid4 = true;passing0 = 41;}const _errs56 = errors;if(typeof data3 === "string"){if(!pattern11.test(data3)){const err42 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid0 = _errs56 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 42];}else {if(_valid0){valid4 = true;passing0 = 42;}const _errs57 = errors;if(typeof data3 === "string"){if(!pattern12.test(data3)){const err43 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid0 = _errs57 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 43];}else {if(_valid0){valid4 = true;passing0 = 43;}const _errs58 = errors;if(typeof data3 === "string"){if(!pattern75.test(data3)){const err44 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid0 = _errs58 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 44];}else {if(_valid0){valid4 = true;passing0 = 44;}const _errs59 = errors;if(typeof data3 === "string"){if(!pattern13.test(data3)){const err45 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid0 = _errs59 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 45];}else {if(_valid0){valid4 = true;passing0 = 45;}const _errs60 = errors;if(typeof data3 === "string"){if(!pattern14.test(data3)){const err46 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid0 = _errs60 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 46];}else {if(_valid0){valid4 = true;passing0 = 46;}const _errs61 = errors;if(typeof data3 === "string"){if(!pattern78.test(data3)){const err47 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid0 = _errs61 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 47];}else {if(_valid0){valid4 = true;passing0 = 47;}const _errs62 = errors;if(typeof data3 === "string"){if(!pattern79.test(data3)){const err48 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid0 = _errs62 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 48];}else {if(_valid0){valid4 = true;passing0 = 48;}const _errs63 = errors;if(typeof data3 === "string"){if(!pattern15.test(data3)){const err49 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid0 = _errs63 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 49];}else {if(_valid0){valid4 = true;passing0 = 49;}const _errs64 = errors;if(typeof data3 === "string"){if(!pattern81.test(data3)){const err50 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid0 = _errs64 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 50];}else {if(_valid0){valid4 = true;passing0 = 50;}const _errs65 = errors;if(typeof data3 === "string"){if(!pattern82.test(data3)){const err51 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid0 = _errs65 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 51];}else {if(_valid0){valid4 = true;passing0 = 51;}const _errs66 = errors;if(typeof data3 === "string"){if(!pattern20.test(data3)){const err52 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid0 = _errs66 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 52];}else {if(_valid0){valid4 = true;passing0 = 52;}const _errs67 = errors;if(typeof data3 === "string"){if(!pattern19.test(data3)){const err53 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid0 = _errs67 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 53];}else {if(_valid0){valid4 = true;passing0 = 53;}const _errs68 = errors;if(typeof data3 === "string"){if(!pattern85.test(data3)){const err54 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "Ailments Linger"},message:"must match pattern \""+"Ailments Linger"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid0 = _errs68 === errors;if(_valid0 && valid4){valid4 = false;passing0 = [passing0, 54];}else {if(_valid0){valid4 = true;passing0 = 54;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid4){const err55 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;validate36.errors = vErrors;return false;}else {errors = _errs13;if(vErrors !== null){if(_errs13){vErrors.length = _errs13;}else {vErrors = null;}}}if(errors === _errs11){if(typeof data3 === "string"){if(!pattern21.test(data3)){validate36.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate36.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid2 = _errs10 === errors;if(!valid2){break;}}}else {validate36.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.pickProbability !== undefined){let data4 = data.pickProbability;const _errs69 = errors;if(!((typeof data4 == "number") && (isFinite(data4)))){validate36.errors = [{instancePath:instancePath+"/pickProbability",schemaPath:"#/properties/pickProbability/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs69 === errors;}else {var valid0 = true;}}}}}}}else {validate36.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate36.errors = vErrors;return errors === 0;}function validate35(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.artifactList === undefined) && (missing0 = "artifactList")){validate35.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(key0 === "artifactList")){validate35.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.artifactList !== undefined){let data0 = data.artifactList;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){const _errs4 = errors;if(!(validate36(data0[i0], {instancePath:instancePath+"/artifactList/" + i0,parentData:data0,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate36.errors : vErrors.concat(validate36.errors);errors = vErrors.length;}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate35.errors = [{instancePath:instancePath+"/artifactList",schemaPath:"#/properties/artifactList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate35.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate35.errors = vErrors;return errors === 0;}const schema46 = {"type":"object","properties":{"overLord":{"$ref":"#/definitions/AscensionOverLord"},"ascensionInstanceList":{"type":"array","items":{"$ref":"#/definitions/AscensionInstance"}}},"additionalProperties":false,"required":["ascensionInstanceList","overLord"]};const schema47 = {"type":"object","properties":{"name":{"type":"string"},"modList":{"items":{"$ref":"#/definitions/EnemyMod"},"type":"array"}},"additionalProperties":false,"required":["modList","name"]};function validate40(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.modList === undefined) && (missing0 = "modList")) || ((data.name === undefined) && (missing0 = "name"))){validate40.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "name") || (key0 === "modList"))){validate40.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.name !== undefined){const _errs2 = errors;if(typeof data.name !== "string"){validate40.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.modList !== undefined){let data1 = data.modList;const _errs4 = errors;if(errors === _errs4){if(Array.isArray(data1)){var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs6 = errors;const _errs7 = errors;const _errs9 = errors;let valid3 = false;let passing0 = null;const _errs10 = errors;if(typeof data2 === "string"){if(!pattern24.test(data2)){const err0 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Damage Taken$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs10 === errors;if(_valid0){valid3 = true;passing0 = 0;}const _errs11 = errors;if(typeof data2 === "string"){if(!pattern25.test(data2)){const err1 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Evade Chance$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 1];}else {if(_valid0){valid3 = true;passing0 = 1;}const _errs12 = errors;if(typeof data2 === "string"){if(!pattern26.test(data2)){const err2 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Life$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs12 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 2];}else {if(_valid0){valid3 = true;passing0 = 2;}const _errs13 = errors;if(typeof data2 === "string"){if(!pattern27.test(data2)){const err3 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Life$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0 && valid3){valid3 = false;passing0 = [passing0, 3];}else {if(_valid0){valid3 = true;passing0 = 3;}}}}if(!valid3){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;validate40.errors = vErrors;return false;}else {errors = _errs9;if(vErrors !== null){if(_errs9){vErrors.length = _errs9;}else {vErrors = null;}}}if(errors === _errs7){if(typeof data2 === "string"){if(!pattern21.test(data2)){validate40.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate40.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/EnemyMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid1 = _errs6 === errors;if(!valid1){break;}}}else {validate40.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}}}}}else {validate40.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate40.errors = vErrors;return errors === 0;}const schema49 = {"type":"object","properties":{"id":{"$ref":"#/definitions/Id","type":"string"},"modList":{"description":"these modifiers will be applied upon ascending","items":{"anyOf":[{"$ref":"#/definitions/PlayerMod"},{"$ref":"#/definitions/AreaMod"}]},"type":"array"}},"additionalProperties":false,"required":["id","modList"]};const schema52 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources Found$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"},{"pattern":"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"}]};const pattern451 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources Found$", "u");const pattern452 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$", "u");const pattern453 = new RegExp("^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$", "u");function validate42(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.id === undefined) && (missing0 = "id")) || ((data.modList === undefined) && (missing0 = "modList"))){validate42.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "id") || (key0 === "modList"))){validate42.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(typeof data0 !== "string"){validate42.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;if(errors === _errs3){if(typeof data0 === "string"){if(!pattern0.test(data0)){validate42.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/pattern",keyword:"pattern",params:{pattern: "^[a-f0-9]{6}$"},message:"must match pattern \""+"^[a-f0-9]{6}$"+"\""}];return false;}}else {validate42.errors = [{instancePath:instancePath+"/id",schemaPath:"#/definitions/Id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.modList !== undefined){let data1 = data.modList;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data1)){var valid2 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs8 = errors;const _errs9 = errors;let valid3 = false;const _errs10 = errors;const _errs11 = errors;const _errs13 = errors;let valid5 = false;let passing0 = null;const _errs14 = errors;if(typeof data2 === "string"){if(!pattern31.test(data2)){const err0 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid1 = _errs14 === errors;if(_valid1){valid5 = true;passing0 = 0;}const _errs15 = errors;if(typeof data2 === "string"){if(!pattern32.test(data2)){const err1 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid1 = _errs15 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 1];}else {if(_valid1){valid5 = true;passing0 = 1;}const _errs16 = errors;if(typeof data2 === "string"){if(!pattern33.test(data2)){const err2 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid1 = _errs16 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 2];}else {if(_valid1){valid5 = true;passing0 = 2;}const _errs17 = errors;if(typeof data2 === "string"){if(!pattern34.test(data2)){const err3 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid1 = _errs17 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 3];}else {if(_valid1){valid5 = true;passing0 = 3;}const _errs18 = errors;if(typeof data2 === "string"){if(!pattern35.test(data2)){const err4 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid1 = _errs18 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 4];}else {if(_valid1){valid5 = true;passing0 = 4;}const _errs19 = errors;if(typeof data2 === "string"){if(!pattern36.test(data2)){const err5 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid1 = _errs19 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 5];}else {if(_valid1){valid5 = true;passing0 = 5;}const _errs20 = errors;if(typeof data2 === "string"){if(!pattern37.test(data2)){const err6 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid1 = _errs20 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 6];}else {if(_valid1){valid5 = true;passing0 = 6;}const _errs21 = errors;if(typeof data2 === "string"){if(!pattern38.test(data2)){const err7 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid1 = _errs21 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 7];}else {if(_valid1){valid5 = true;passing0 = 7;}const _errs22 = errors;if(typeof data2 === "string"){if(!pattern39.test(data2)){const err8 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid1 = _errs22 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 8];}else {if(_valid1){valid5 = true;passing0 = 8;}const _errs23 = errors;if(typeof data2 === "string"){if(!pattern40.test(data2)){const err9 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid1 = _errs23 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 9];}else {if(_valid1){valid5 = true;passing0 = 9;}const _errs24 = errors;if(typeof data2 === "string"){if(!pattern41.test(data2)){const err10 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid1 = _errs24 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 10];}else {if(_valid1){valid5 = true;passing0 = 10;}const _errs25 = errors;if(typeof data2 === "string"){if(!pattern42.test(data2)){const err11 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;}}var _valid1 = _errs25 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 11];}else {if(_valid1){valid5 = true;passing0 = 11;}const _errs26 = errors;if(typeof data2 === "string"){if(!pattern5.test(data2)){const err12 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid1 = _errs26 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 12];}else {if(_valid1){valid5 = true;passing0 = 12;}const _errs27 = errors;if(typeof data2 === "string"){if(!pattern44.test(data2)){const err13 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid1 = _errs27 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 13];}else {if(_valid1){valid5 = true;passing0 = 13;}const _errs28 = errors;if(typeof data2 === "string"){if(!pattern45.test(data2)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid1 = _errs28 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 14];}else {if(_valid1){valid5 = true;passing0 = 14;}const _errs29 = errors;if(typeof data2 === "string"){if(!pattern46.test(data2)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid1 = _errs29 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 15];}else {if(_valid1){valid5 = true;passing0 = 15;}const _errs30 = errors;if(typeof data2 === "string"){if(!pattern16.test(data2)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid1 = _errs30 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 16];}else {if(_valid1){valid5 = true;passing0 = 16;}const _errs31 = errors;if(typeof data2 === "string"){if(!pattern18.test(data2)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid1 = _errs31 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 17];}else {if(_valid1){valid5 = true;passing0 = 17;}const _errs32 = errors;if(typeof data2 === "string"){if(!pattern49.test(data2)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid1 = _errs32 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 18];}else {if(_valid1){valid5 = true;passing0 = 18;}const _errs33 = errors;if(typeof data2 === "string"){if(!pattern17.test(data2)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid1 = _errs33 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 19];}else {if(_valid1){valid5 = true;passing0 = 19;}const _errs34 = errors;if(typeof data2 === "string"){if(!pattern51.test(data2)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid1 = _errs34 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 20];}else {if(_valid1){valid5 = true;passing0 = 20;}const _errs35 = errors;if(typeof data2 === "string"){if(!pattern52.test(data2)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid1 = _errs35 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 21];}else {if(_valid1){valid5 = true;passing0 = 21;}const _errs36 = errors;if(typeof data2 === "string"){if(!pattern53.test(data2)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid1 = _errs36 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 22];}else {if(_valid1){valid5 = true;passing0 = 22;}const _errs37 = errors;if(typeof data2 === "string"){if(!pattern54.test(data2)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid1 = _errs37 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 23];}else {if(_valid1){valid5 = true;passing0 = 23;}const _errs38 = errors;if(typeof data2 === "string"){if(!pattern55.test(data2)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid1 = _errs38 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 24];}else {if(_valid1){valid5 = true;passing0 = 24;}const _errs39 = errors;if(typeof data2 === "string"){if(!pattern7.test(data2)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid1 = _errs39 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 25];}else {if(_valid1){valid5 = true;passing0 = 25;}const _errs40 = errors;if(typeof data2 === "string"){if(!pattern57.test(data2)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid1 = _errs40 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 26];}else {if(_valid1){valid5 = true;passing0 = 26;}const _errs41 = errors;if(typeof data2 === "string"){if(!pattern58.test(data2)){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid1 = _errs41 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 27];}else {if(_valid1){valid5 = true;passing0 = 27;}const _errs42 = errors;if(typeof data2 === "string"){if(!pattern59.test(data2)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid1 = _errs42 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 28];}else {if(_valid1){valid5 = true;passing0 = 28;}const _errs43 = errors;if(typeof data2 === "string"){if(!pattern60.test(data2)){const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid1 = _errs43 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 29];}else {if(_valid1){valid5 = true;passing0 = 29;}const _errs44 = errors;if(typeof data2 === "string"){if(!pattern61.test(data2)){const err30 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid1 = _errs44 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 30];}else {if(_valid1){valid5 = true;passing0 = 30;}const _errs45 = errors;if(typeof data2 === "string"){if(!pattern8.test(data2)){const err31 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid1 = _errs45 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 31];}else {if(_valid1){valid5 = true;passing0 = 31;}const _errs46 = errors;if(typeof data2 === "string"){if(!pattern63.test(data2)){const err32 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid1 = _errs46 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 32];}else {if(_valid1){valid5 = true;passing0 = 32;}const _errs47 = errors;if(typeof data2 === "string"){if(!pattern6.test(data2)){const err33 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid1 = _errs47 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 33];}else {if(_valid1){valid5 = true;passing0 = 33;}const _errs48 = errors;if(typeof data2 === "string"){if(!pattern65.test(data2)){const err34 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid1 = _errs48 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 34];}else {if(_valid1){valid5 = true;passing0 = 34;}const _errs49 = errors;if(typeof data2 === "string"){if(!pattern66.test(data2)){const err35 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid1 = _errs49 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 35];}else {if(_valid1){valid5 = true;passing0 = 35;}const _errs50 = errors;if(typeof data2 === "string"){if(!pattern67.test(data2)){const err36 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid1 = _errs50 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 36];}else {if(_valid1){valid5 = true;passing0 = 36;}const _errs51 = errors;if(typeof data2 === "string"){if(!pattern68.test(data2)){const err37 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid1 = _errs51 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 37];}else {if(_valid1){valid5 = true;passing0 = 37;}const _errs52 = errors;if(typeof data2 === "string"){if(!pattern69.test(data2)){const err38 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid1 = _errs52 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 38];}else {if(_valid1){valid5 = true;passing0 = 38;}const _errs53 = errors;if(typeof data2 === "string"){if(!pattern9.test(data2)){const err39 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid1 = _errs53 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 39];}else {if(_valid1){valid5 = true;passing0 = 39;}const _errs54 = errors;if(typeof data2 === "string"){if(!pattern10.test(data2)){const err40 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid1 = _errs54 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 40];}else {if(_valid1){valid5 = true;passing0 = 40;}const _errs55 = errors;if(typeof data2 === "string"){if(!pattern72.test(data2)){const err41 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid1 = _errs55 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 41];}else {if(_valid1){valid5 = true;passing0 = 41;}const _errs56 = errors;if(typeof data2 === "string"){if(!pattern11.test(data2)){const err42 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid1 = _errs56 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 42];}else {if(_valid1){valid5 = true;passing0 = 42;}const _errs57 = errors;if(typeof data2 === "string"){if(!pattern12.test(data2)){const err43 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid1 = _errs57 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 43];}else {if(_valid1){valid5 = true;passing0 = 43;}const _errs58 = errors;if(typeof data2 === "string"){if(!pattern75.test(data2)){const err44 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid1 = _errs58 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 44];}else {if(_valid1){valid5 = true;passing0 = 44;}const _errs59 = errors;if(typeof data2 === "string"){if(!pattern13.test(data2)){const err45 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid1 = _errs59 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 45];}else {if(_valid1){valid5 = true;passing0 = 45;}const _errs60 = errors;if(typeof data2 === "string"){if(!pattern14.test(data2)){const err46 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid1 = _errs60 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 46];}else {if(_valid1){valid5 = true;passing0 = 46;}const _errs61 = errors;if(typeof data2 === "string"){if(!pattern78.test(data2)){const err47 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid1 = _errs61 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 47];}else {if(_valid1){valid5 = true;passing0 = 47;}const _errs62 = errors;if(typeof data2 === "string"){if(!pattern79.test(data2)){const err48 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid1 = _errs62 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 48];}else {if(_valid1){valid5 = true;passing0 = 48;}const _errs63 = errors;if(typeof data2 === "string"){if(!pattern15.test(data2)){const err49 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid1 = _errs63 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 49];}else {if(_valid1){valid5 = true;passing0 = 49;}const _errs64 = errors;if(typeof data2 === "string"){if(!pattern81.test(data2)){const err50 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid1 = _errs64 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 50];}else {if(_valid1){valid5 = true;passing0 = 50;}const _errs65 = errors;if(typeof data2 === "string"){if(!pattern82.test(data2)){const err51 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid1 = _errs65 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 51];}else {if(_valid1){valid5 = true;passing0 = 51;}const _errs66 = errors;if(typeof data2 === "string"){if(!pattern20.test(data2)){const err52 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid1 = _errs66 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 52];}else {if(_valid1){valid5 = true;passing0 = 52;}const _errs67 = errors;if(typeof data2 === "string"){if(!pattern19.test(data2)){const err53 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid1 = _errs67 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 53];}else {if(_valid1){valid5 = true;passing0 = 53;}const _errs68 = errors;if(typeof data2 === "string"){if(!pattern85.test(data2)){const err54 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "Ailments Linger"},message:"must match pattern \""+"Ailments Linger"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid1 = _errs68 === errors;if(_valid1 && valid5){valid5 = false;passing0 = [passing0, 54];}else {if(_valid1){valid5 = true;passing0 = 54;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid5){const err55 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}else {errors = _errs13;if(vErrors !== null){if(_errs13){vErrors.length = _errs13;}else {vErrors = null;}}}if(errors === _errs11){if(typeof data2 === "string"){if(!pattern21.test(data2)){const err56 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}else {const err57 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid0 = _errs10 === errors;valid3 = valid3 || _valid0;if(!valid3){const _errs69 = errors;const _errs70 = errors;const _errs72 = errors;let valid7 = false;let passing1 = null;const _errs73 = errors;if(typeof data2 === "string"){if(!pattern451.test(data2)){const err58 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/AreaMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources Found$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Resources Found$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid2 = _errs73 === errors;if(_valid2){valid7 = true;passing1 = 0;}const _errs74 = errors;if(typeof data2 === "string"){if(!pattern452.test(data2)){const err59 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/AreaMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemy Life$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid2 = _errs74 === errors;if(_valid2 && valid7){valid7 = false;passing1 = [passing1, 1];}else {if(_valid2){valid7 = true;passing1 = 1;}const _errs75 = errors;if(typeof data2 === "string"){if(!pattern453.test(data2)){const err60 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/AreaMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Enemies$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid2 = _errs75 === errors;if(_valid2 && valid7){valid7 = false;passing1 = [passing1, 2];}else {if(_valid2){valid7 = true;passing1 = 2;}}}if(!valid7){const err61 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/AreaMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing1},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}else {errors = _errs72;if(vErrors !== null){if(_errs72){vErrors.length = _errs72;}else {vErrors = null;}}}if(errors === _errs70){if(typeof data2 === "string"){if(!pattern21.test(data2)){const err62 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/AreaMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}else {const err63 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/AreaMod/type",keyword:"type",params:{type: "string"},message:"must be string"};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid0 = _errs69 === errors;valid3 = valid3 || _valid0;}if(!valid3){const err64 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/properties/modList/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;validate42.errors = vErrors;return false;}else {errors = _errs9;if(vErrors !== null){if(_errs9){vErrors.length = _errs9;}else {vErrors = null;}}}var valid2 = _errs8 === errors;if(!valid2){break;}}}else {validate42.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}}else {validate42.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate42.errors = vErrors;return errors === 0;}function validate39(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.ascensionInstanceList === undefined) && (missing0 = "ascensionInstanceList")) || ((data.overLord === undefined) && (missing0 = "overLord"))){validate39.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "overLord") || (key0 === "ascensionInstanceList"))){validate39.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.overLord !== undefined){const _errs2 = errors;if(!(validate40(data.overLord, {instancePath:instancePath+"/overLord",parentData:data,parentDataProperty:"overLord",rootData}))){vErrors = vErrors === null ? validate40.errors : vErrors.concat(validate40.errors);errors = vErrors.length;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.ascensionInstanceList !== undefined){let data1 = data.ascensionInstanceList;const _errs3 = errors;if(errors === _errs3){if(Array.isArray(data1)){var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){const _errs5 = errors;if(!(validate42(data1[i0], {instancePath:instancePath+"/ascensionInstanceList/" + i0,parentData:data1,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate42.errors : vErrors.concat(validate42.errors);errors = vErrors.length;}var valid1 = _errs5 === errors;if(!valid1){break;}}}else {validate39.errors = [{instancePath:instancePath+"/ascensionInstanceList",schemaPath:"#/properties/ascensionInstanceList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs3 === errors;}else {var valid0 = true;}}}}}else {validate39.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate39.errors = vErrors;return errors === 0;}const schema53 = {"type":"object","properties":{"achievementList":{"type":"array","items":{"$ref":"#/definitions/Achievement"}}},"additionalProperties":false,"required":["achievementList"]};const schema54 = {"type":"object","properties":{"description":{"$ref":"#/definitions/AchievementDescription","type":"string"},"modList":{"items":{"$ref":"#/definitions/PlayerMod"},"type":"array"}},"additionalProperties":false,"required":["description"]};const schema55 = {"type":"string","pattern":"^[^#]*$","oneOf":[{"pattern":"^Reach Level \\{(([0-9]+)([-]([0-9]+))?)\\}$"},{"pattern":"^Ascend \\{(([0-9]+)([-]([0-9]+))?)\\} Times?$"},{"pattern":"^Obtain \\{(([0-9]+)([-]([0-9]+))?)\\} @\\{()\\}$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"},{"pattern":"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"},{"pattern":"^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"},{"pattern":"^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"}]};const pattern455 = new RegExp("^Reach Level \\{(([0-9]+)([-]([0-9]+))?)\\}$", "u");const pattern456 = new RegExp("^Ascend \\{(([0-9]+)([-]([0-9]+))?)\\} Times?$", "u");const pattern457 = new RegExp("^Obtain \\{(([0-9]+)([-]([0-9]+))?)\\} @\\{()\\}$", "u");const pattern458 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$", "u");const pattern459 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$", "u");const pattern460 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$", "u");const pattern461 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$", "u");const pattern462 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$", "u");const pattern463 = new RegExp("^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$", "u");const pattern464 = new RegExp("^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$", "u");const pattern465 = new RegExp("^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$", "u");function validate46(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.description === undefined) && (missing0 = "description")){validate46.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((key0 === "description") || (key0 === "modList"))){validate46.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.description !== undefined){let data0 = data.description;const _errs2 = errors;if(typeof data0 !== "string"){validate46.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}const _errs3 = errors;const _errs5 = errors;let valid2 = false;let passing0 = null;const _errs6 = errors;if(typeof data0 === "string"){if(!pattern455.test(data0)){const err0 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^Reach Level \\{(([0-9]+)([-]([0-9]+))?)\\}$"},message:"must match pattern \""+"^Reach Level \\{(([0-9]+)([-]([0-9]+))?)\\}$"+"\""};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;}}var _valid0 = _errs6 === errors;if(_valid0){valid2 = true;passing0 = 0;}const _errs7 = errors;if(typeof data0 === "string"){if(!pattern456.test(data0)){const err1 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^Ascend \\{(([0-9]+)([-]([0-9]+))?)\\} Times?$"},message:"must match pattern \""+"^Ascend \\{(([0-9]+)([-]([0-9]+))?)\\} Times?$"+"\""};if(vErrors === null){vErrors = [err1];}else {vErrors.push(err1);}errors++;}}var _valid0 = _errs7 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 1];}else {if(_valid0){valid2 = true;passing0 = 1;}const _errs8 = errors;if(typeof data0 === "string"){if(!pattern457.test(data0)){const err2 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^Obtain \\{(([0-9]+)([-]([0-9]+))?)\\} @\\{()\\}$"},message:"must match pattern \""+"^Obtain \\{(([0-9]+)([-]([0-9]+))?)\\} @\\{()\\}$"+"\""};if(vErrors === null){vErrors = [err2];}else {vErrors.push(err2);}errors++;}}var _valid0 = _errs8 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 2];}else {if(_valid0){valid2 = true;passing0 = 2;}const _errs9 = errors;if(typeof data0 === "string"){if(!pattern458.test(data0)){const err3 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err3];}else {vErrors.push(err3);}errors++;}}var _valid0 = _errs9 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 3];}else {if(_valid0){valid2 = true;passing0 = 3;}const _errs10 = errors;if(typeof data0 === "string"){if(!pattern459.test(data0)){const err4 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err4];}else {vErrors.push(err4);}errors++;}}var _valid0 = _errs10 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 4];}else {if(_valid0){valid2 = true;passing0 = 4;}const _errs11 = errors;if(typeof data0 === "string"){if(!pattern460.test(data0)){const err5 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Physical Damage$"+"\""};if(vErrors === null){vErrors = [err5];}else {vErrors.push(err5);}errors++;}}var _valid0 = _errs11 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 5];}else {if(_valid0){valid2 = true;passing0 = 5;}const _errs12 = errors;if(typeof data0 === "string"){if(!pattern461.test(data0)){const err6 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err6];}else {vErrors.push(err6);}errors++;}}var _valid0 = _errs12 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 6];}else {if(_valid0){valid2 = true;passing0 = 6;}const _errs13 = errors;if(typeof data0 === "string"){if(!pattern462.test(data0)){const err7 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err7];}else {vErrors.push(err7);}errors++;}}var _valid0 = _errs13 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 7];}else {if(_valid0){valid2 = true;passing0 = 7;}const _errs14 = errors;if(typeof data0 === "string"){if(!pattern463.test(data0)){const err8 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"},message:"must match pattern \""+"^Deal \\{(([0-9]+)([-]([0-9]+))?)\\} Total Burn Damage$"+"\""};if(vErrors === null){vErrors = [err8];}else {vErrors.push(err8);}errors++;}}var _valid0 = _errs14 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 8];}else {if(_valid0){valid2 = true;passing0 = 8;}const _errs15 = errors;if(typeof data0 === "string"){if(!pattern464.test(data0)){const err9 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"},message:"must match pattern \""+"^Perform \\{(([0-9]+)([-]([0-9]+))?)\\} Critical Hits$"+"\""};if(vErrors === null){vErrors = [err9];}else {vErrors.push(err9);}errors++;}}var _valid0 = _errs15 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 9];}else {if(_valid0){valid2 = true;passing0 = 9;}const _errs16 = errors;if(typeof data0 === "string"){if(!pattern465.test(data0)){const err10 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"},message:"must match pattern \""+"^Regenerate \\{(([0-9]+)([-]([0-9]+))?)\\} Mana$"+"\""};if(vErrors === null){vErrors = [err10];}else {vErrors.push(err10);}errors++;}}var _valid0 = _errs16 === errors;if(_valid0 && valid2){valid2 = false;passing0 = [passing0, 10];}else {if(_valid0){valid2 = true;passing0 = 10;}}}}}}}}}}}if(!valid2){const err11 = {instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/oneOf",keyword:"oneOf",params:{passingSchemas: passing0},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err11];}else {vErrors.push(err11);}errors++;validate46.errors = vErrors;return false;}else {errors = _errs5;if(vErrors !== null){if(_errs5){vErrors.length = _errs5;}else {vErrors = null;}}}if(errors === _errs3){if(typeof data0 === "string"){if(!pattern21.test(data0)){validate46.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate46.errors = [{instancePath:instancePath+"/description",schemaPath:"#/definitions/AchievementDescription/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.modList !== undefined){let data1 = data.modList;const _errs18 = errors;if(errors === _errs18){if(Array.isArray(data1)){var valid3 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs20 = errors;const _errs21 = errors;const _errs23 = errors;let valid5 = false;let passing1 = null;const _errs24 = errors;if(typeof data2 === "string"){if(!pattern31.test(data2)){const err12 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/0/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Damage$"+"\""};if(vErrors === null){vErrors = [err12];}else {vErrors.push(err12);}errors++;}}var _valid1 = _errs24 === errors;if(_valid1){valid5 = true;passing1 = 0;}const _errs25 = errors;if(typeof data2 === "string"){if(!pattern32.test(data2)){const err13 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/1/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Damage$"+"\""};if(vErrors === null){vErrors = [err13];}else {vErrors.push(err13);}errors++;}}var _valid1 = _errs25 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 1];}else {if(_valid1){valid5 = true;passing1 = 1;}const _errs26 = errors;if(typeof data2 === "string"){if(!pattern33.test(data2)){const err14 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/2/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err14];}else {vErrors.push(err14);}errors++;}}var _valid1 = _errs26 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 2];}else {if(_valid1){valid5 = true;passing1 = 2;}const _errs27 = errors;if(typeof data2 === "string"){if(!pattern34.test(data2)){const err15 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/3/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err15];}else {vErrors.push(err15);}errors++;}}var _valid1 = _errs27 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 3];}else {if(_valid1){valid5 = true;passing1 = 3;}const _errs28 = errors;if(typeof data2 === "string"){if(!pattern35.test(data2)){const err16 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/4/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Physical Damage$"+"\""};if(vErrors === null){vErrors = [err16];}else {vErrors.push(err16);}errors++;}}var _valid1 = _errs28 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 4];}else {if(_valid1){valid5 = true;passing1 = 4;}const _errs29 = errors;if(typeof data2 === "string"){if(!pattern36.test(data2)){const err17 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/5/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err17];}else {vErrors.push(err17);}errors++;}}var _valid1 = _errs29 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 5];}else {if(_valid1){valid5 = true;passing1 = 5;}const _errs30 = errors;if(typeof data2 === "string"){if(!pattern37.test(data2)){const err18 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/6/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage$"+"\""};if(vErrors === null){vErrors = [err18];}else {vErrors.push(err18);}errors++;}}var _valid1 = _errs30 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 6];}else {if(_valid1){valid5 = true;passing1 = 6;}const _errs31 = errors;if(typeof data2 === "string"){if(!pattern38.test(data2)){const err19 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/7/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Attack Damage$"+"\""};if(vErrors === null){vErrors = [err19];}else {vErrors.push(err19);}errors++;}}var _valid1 = _errs31 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 7];}else {if(_valid1){valid5 = true;passing1 = 7;}const _errs32 = errors;if(typeof data2 === "string"){if(!pattern39.test(data2)){const err20 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/8/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Attack Damage$"+"\""};if(vErrors === null){vErrors = [err20];}else {vErrors.push(err20);}errors++;}}var _valid1 = _errs32 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 8];}else {if(_valid1){valid5 = true;passing1 = 8;}const _errs33 = errors;if(typeof data2 === "string"){if(!pattern40.test(data2)){const err21 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/9/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Physical Damage$"+"\""};if(vErrors === null){vErrors = [err21];}else {vErrors.push(err21);}errors++;}}var _valid1 = _errs33 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 9];}else {if(_valid1){valid5 = true;passing1 = 9;}const _errs34 = errors;if(typeof data2 === "string"){if(!pattern41.test(data2)){const err22 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/10/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err22];}else {vErrors.push(err22);}errors++;}}var _valid1 = _errs34 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 10];}else {if(_valid1){valid5 = true;passing1 = 10;}const _errs35 = errors;if(typeof data2 === "string"){if(!pattern42.test(data2)){const err23 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/11/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage$"+"\""};if(vErrors === null){vErrors = [err23];}else {vErrors.push(err23);}errors++;}}var _valid1 = _errs35 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 11];}else {if(_valid1){valid5 = true;passing1 = 11;}const _errs36 = errors;if(typeof data2 === "string"){if(!pattern5.test(data2)){const err24 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/12/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Physical Damage$"+"\""};if(vErrors === null){vErrors = [err24];}else {vErrors.push(err24);}errors++;}}var _valid1 = _errs36 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 12];}else {if(_valid1){valid5 = true;passing1 = 12;}const _errs37 = errors;if(typeof data2 === "string"){if(!pattern44.test(data2)){const err25 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/13/pattern",keyword:"pattern",params:{pattern: "^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"},message:"must match pattern \""+"^Adds \\{(([0-9]+)([-]([0-9]+))?)\\} To \\{(([0-9]+)([-]([0-9]+))?)\\} Elemental Damage$"+"\""};if(vErrors === null){vErrors = [err25];}else {vErrors.push(err25);}errors++;}}var _valid1 = _errs37 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 13];}else {if(_valid1){valid5 = true;passing1 = 13;}const _errs38 = errors;if(typeof data2 === "string"){if(!pattern45.test(data2)){const err26 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/14/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Attack Speed$"+"\""};if(vErrors === null){vErrors = [err26];}else {vErrors.push(err26);}errors++;}}var _valid1 = _errs38 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 14];}else {if(_valid1){valid5 = true;passing1 = 14;}const _errs39 = errors;if(typeof data2 === "string"){if(!pattern46.test(data2)){const err27 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/15/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err27];}else {vErrors.push(err27);}errors++;}}var _valid1 = _errs39 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 15];}else {if(_valid1){valid5 = true;passing1 = 15;}const _errs40 = errors;if(typeof data2 === "string"){if(!pattern16.test(data2)){const err28 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/16/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana$"+"\""};if(vErrors === null){vErrors = [err28];}else {vErrors.push(err28);}errors++;}}var _valid1 = _errs40 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 16];}else {if(_valid1){valid5 = true;passing1 = 16;}const _errs41 = errors;if(typeof data2 === "string"){if(!pattern18.test(data2)){const err29 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/17/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\} Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err29];}else {vErrors.push(err29);}errors++;}}var _valid1 = _errs41 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 17];}else {if(_valid1){valid5 = true;passing1 = 17;}const _errs42 = errors;if(typeof data2 === "string"){if(!pattern49.test(data2)){const err30 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/18/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err30];}else {vErrors.push(err30);}errors++;}}var _valid1 = _errs42 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 18];}else {if(_valid1){valid5 = true;passing1 = 18;}const _errs43 = errors;if(typeof data2 === "string"){if(!pattern17.test(data2)){const err31 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/19/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+(\\.[0-9]+)?)([-]([0-9]+(\\.[0-9]+)?))?)\\}% Of Maximum Mana Regeneration$"+"\""};if(vErrors === null){vErrors = [err31];}else {vErrors.push(err31);}errors++;}}var _valid1 = _errs43 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 19];}else {if(_valid1){valid5 = true;passing1 = 19;}const _errs44 = errors;if(typeof data2 === "string"){if(!pattern51.test(data2)){const err32 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/20/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Aura Duration$"+"\""};if(vErrors === null){vErrors = [err32];}else {vErrors.push(err32);}errors++;}}var _valid1 = _errs44 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 20];}else {if(_valid1){valid5 = true;passing1 = 20;}const _errs45 = errors;if(typeof data2 === "string"){if(!pattern52.test(data2)){const err33 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/21/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Bleed$"+"\""};if(vErrors === null){vErrors = [err33];}else {vErrors.push(err33);}errors++;}}var _valid1 = _errs45 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 21];}else {if(_valid1){valid5 = true;passing1 = 21;}const _errs46 = errors;if(typeof data2 === "string"){if(!pattern53.test(data2)){const err34 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/22/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err34];}else {vErrors.push(err34);}errors++;}}var _valid1 = _errs46 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 22];}else {if(_valid1){valid5 = true;passing1 = 22;}const _errs47 = errors;if(typeof data2 === "string"){if(!pattern54.test(data2)){const err35 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/23/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Bleed Damage$"+"\""};if(vErrors === null){vErrors = [err35];}else {vErrors.push(err35);}errors++;}}var _valid1 = _errs47 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 23];}else {if(_valid1){valid5 = true;passing1 = 23;}const _errs48 = errors;if(typeof data2 === "string"){if(!pattern55.test(data2)){const err36 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/24/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Bleed Duration$"+"\""};if(vErrors === null){vErrors = [err36];}else {vErrors.push(err36);}errors++;}}var _valid1 = _errs48 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 24];}else {if(_valid1){valid5 = true;passing1 = 24;}const _errs49 = errors;if(typeof data2 === "string"){if(!pattern7.test(data2)){const err37 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/25/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Bleed Stack$"+"\""};if(vErrors === null){vErrors = [err37];}else {vErrors.push(err37);}errors++;}}var _valid1 = _errs49 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 25];}else {if(_valid1){valid5 = true;passing1 = 25;}const _errs50 = errors;if(typeof data2 === "string"){if(!pattern57.test(data2)){const err38 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/26/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Bleed Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err38];}else {vErrors.push(err38);}errors++;}}var _valid1 = _errs50 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 26];}else {if(_valid1){valid5 = true;passing1 = 26;}const _errs51 = errors;if(typeof data2 === "string"){if(!pattern58.test(data2)){const err39 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/27/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Damage$"+"\""};if(vErrors === null){vErrors = [err39];}else {vErrors.push(err39);}errors++;}}var _valid1 = _errs51 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 27];}else {if(_valid1){valid5 = true;passing1 = 27;}const _errs52 = errors;if(typeof data2 === "string"){if(!pattern59.test(data2)){const err40 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/28/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Burn Damage$"+"\""};if(vErrors === null){vErrors = [err40];}else {vErrors.push(err40);}errors++;}}var _valid1 = _errs52 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 28];}else {if(_valid1){valid5 = true;passing1 = 28;}const _errs53 = errors;if(typeof data2 === "string"){if(!pattern60.test(data2)){const err41 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/29/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Chance To Burn$"+"\""};if(vErrors === null){vErrors = [err41];}else {vErrors.push(err41);}errors++;}}var _valid1 = _errs53 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 29];}else {if(_valid1){valid5 = true;passing1 = 29;}const _errs54 = errors;if(typeof data2 === "string"){if(!pattern61.test(data2)){const err42 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/30/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Burn Duration$"+"\""};if(vErrors === null){vErrors = [err42];}else {vErrors.push(err42);}errors++;}}var _valid1 = _errs54 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 30];}else {if(_valid1){valid5 = true;passing1 = 30;}const _errs55 = errors;if(typeof data2 === "string"){if(!pattern8.test(data2)){const err43 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/31/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Burn Stack$"+"\""};if(vErrors === null){vErrors = [err43];}else {vErrors.push(err43);}errors++;}}var _valid1 = _errs55 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 31];}else {if(_valid1){valid5 = true;passing1 = 31;}const _errs56 = errors;if(typeof data2 === "string"){if(!pattern63.test(data2)){const err44 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/32/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Burn Damage Multiplier$"+"\""};if(vErrors === null){vErrors = [err44];}else {vErrors.push(err44);}errors++;}}var _valid1 = _errs56 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 32];}else {if(_valid1){valid5 = true;passing1 = 32;}const _errs57 = errors;if(typeof data2 === "string"){if(!pattern6.test(data2)){const err45 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/33/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Chance$"+"\""};if(vErrors === null){vErrors = [err45];}else {vErrors.push(err45);}errors++;}}var _valid1 = _errs57 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 33];}else {if(_valid1){valid5 = true;passing1 = 33;}const _errs58 = errors;if(typeof data2 === "string"){if(!pattern65.test(data2)){const err46 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/34/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Critical Hit Multiplier$"+"\""};if(vErrors === null){vErrors = [err46];}else {vErrors.push(err46);}errors++;}}var _valid1 = _errs58 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 34];}else {if(_valid1){valid5 = true;passing1 = 34;}const _errs59 = errors;if(typeof data2 === "string"){if(!pattern66.test(data2)){const err47 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/35/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed$"+"\""};if(vErrors === null){vErrors = [err47];}else {vErrors.push(err47);}errors++;}}var _valid1 = _errs59 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 35];}else {if(_valid1){valid5 = true;passing1 = 35;}const _errs60 = errors;if(typeof data2 === "string"){if(!pattern67.test(data2)){const err48 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/36/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Hit Chance$"+"\""};if(vErrors === null){vErrors = [err48];}else {vErrors.push(err48);}errors++;}}var _valid1 = _errs60 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 36];}else {if(_valid1){valid5 = true;passing1 = 36;}const _errs61 = errors;if(typeof data2 === "string"){if(!pattern68.test(data2)){const err49 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/37/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Ailment Duration$"+"\""};if(vErrors === null){vErrors = [err49];}else {vErrors.push(err49);}errors++;}}var _valid1 = _errs61 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 37];}else {if(_valid1){valid5 = true;passing1 = 37;}const _errs62 = errors;if(typeof data2 === "string"){if(!pattern69.test(data2)){const err50 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/38/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Damage Over Time$"+"\""};if(vErrors === null){vErrors = [err50];}else {vErrors.push(err50);}errors++;}}var _valid1 = _errs62 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 38];}else {if(_valid1){valid5 = true;passing1 = 38;}const _errs63 = errors;if(typeof data2 === "string"){if(!pattern9.test(data2)){const err51 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/39/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} To All Attributes$"+"\""};if(vErrors === null){vErrors = [err51];}else {vErrors.push(err51);}errors++;}}var _valid1 = _errs63 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 39];}else {if(_valid1){valid5 = true;passing1 = 39;}const _errs64 = errors;if(typeof data2 === "string"){if(!pattern10.test(data2)){const err52 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/40/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err52];}else {vErrors.push(err52);}errors++;}}var _valid1 = _errs64 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 40];}else {if(_valid1){valid5 = true;passing1 = 40;}const _errs65 = errors;if(typeof data2 === "string"){if(!pattern72.test(data2)){const err53 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/41/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Strength$"+"\""};if(vErrors === null){vErrors = [err53];}else {vErrors.push(err53);}errors++;}}var _valid1 = _errs65 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 41];}else {if(_valid1){valid5 = true;passing1 = 41;}const _errs66 = errors;if(typeof data2 === "string"){if(!pattern11.test(data2)){const err54 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/42/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Damage Per \\{(([0-9]+)([-]([0-9]+))?)\\} Strength$"+"\""};if(vErrors === null){vErrors = [err54];}else {vErrors.push(err54);}errors++;}}var _valid1 = _errs66 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 42];}else {if(_valid1){valid5 = true;passing1 = 42;}const _errs67 = errors;if(typeof data2 === "string"){if(!pattern12.test(data2)){const err55 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/43/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err55];}else {vErrors.push(err55);}errors++;}}var _valid1 = _errs67 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 43];}else {if(_valid1){valid5 = true;passing1 = 43;}const _errs68 = errors;if(typeof data2 === "string"){if(!pattern75.test(data2)){const err56 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/44/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Dexterity$"+"\""};if(vErrors === null){vErrors = [err56];}else {vErrors.push(err56);}errors++;}}var _valid1 = _errs68 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 44];}else {if(_valid1){valid5 = true;passing1 = 44;}const _errs69 = errors;if(typeof data2 === "string"){if(!pattern13.test(data2)){const err57 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/45/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Attack Speed Per \\{(([0-9]+)([-]([0-9]+))?)\\} Dexterity$"+"\""};if(vErrors === null){vErrors = [err57];}else {vErrors.push(err57);}errors++;}}var _valid1 = _errs69 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 45];}else {if(_valid1){valid5 = true;passing1 = 45;}const _errs70 = errors;if(typeof data2 === "string"){if(!pattern14.test(data2)){const err58 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/46/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err58];}else {vErrors.push(err58);}errors++;}}var _valid1 = _errs70 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 46];}else {if(_valid1){valid5 = true;passing1 = 46;}const _errs71 = errors;if(typeof data2 === "string"){if(!pattern78.test(data2)){const err59 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/47/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Increased Intelligence$"+"\""};if(vErrors === null){vErrors = [err59];}else {vErrors.push(err59);}errors++;}}var _valid1 = _errs71 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 47];}else {if(_valid1){valid5 = true;passing1 = 47;}const _errs72 = errors;if(typeof data2 === "string"){if(!pattern79.test(data2)){const err60 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/48/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% More Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err60];}else {vErrors.push(err60);}errors++;}}var _valid1 = _errs72 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 48];}else {if(_valid1){valid5 = true;passing1 = 48;}const _errs73 = errors;if(typeof data2 === "string"){if(!pattern15.test(data2)){const err61 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/49/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Mana Per \\{(([0-9]+)([-]([0-9]+))?)\\} Intelligence$"+"\""};if(vErrors === null){vErrors = [err61];}else {vErrors.push(err61);}errors++;}}var _valid1 = _errs73 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 49];}else {if(_valid1){valid5 = true;passing1 = 49;}const _errs74 = errors;if(typeof data2 === "string"){if(!pattern81.test(data2)){const err62 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/50/pattern",keyword:"pattern",params:{pattern: "^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"},message:"must match pattern \""+"^\\{(([0-9]+)([-]([0-9]+))?)\\}% Reduced Mana Cost Of Skills$"+"\""};if(vErrors === null){vErrors = [err62];}else {vErrors.push(err62);}errors++;}}var _valid1 = _errs74 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 50];}else {if(_valid1){valid5 = true;passing1 = 50;}const _errs75 = errors;if(typeof data2 === "string"){if(!pattern82.test(data2)){const err63 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/51/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\}% Damage Over Time Multiplier$"+"\""};if(vErrors === null){vErrors = [err63];}else {vErrors.push(err63);}errors++;}}var _valid1 = _errs75 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 51];}else {if(_valid1){valid5 = true;passing1 = 51;}const _errs76 = errors;if(typeof data2 === "string"){if(!pattern20.test(data2)){const err64 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/52/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Artifacts$"+"\""};if(vErrors === null){vErrors = [err64];}else {vErrors.push(err64);}errors++;}}var _valid1 = _errs76 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 52];}else {if(_valid1){valid5 = true;passing1 = 52;}const _errs77 = errors;if(typeof data2 === "string"){if(!pattern19.test(data2)){const err65 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/53/pattern",keyword:"pattern",params:{pattern: "^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"},message:"must match pattern \""+"^([-+])\\{(([0-9]+)([-]([0-9]+))?)\\} Maximum Insight$"+"\""};if(vErrors === null){vErrors = [err65];}else {vErrors.push(err65);}errors++;}}var _valid1 = _errs77 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 53];}else {if(_valid1){valid5 = true;passing1 = 53;}const _errs78 = errors;if(typeof data2 === "string"){if(!pattern85.test(data2)){const err66 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf/54/pattern",keyword:"pattern",params:{pattern: "Ailments Linger"},message:"must match pattern \""+"Ailments Linger"+"\""};if(vErrors === null){vErrors = [err66];}else {vErrors.push(err66);}errors++;}}var _valid1 = _errs78 === errors;if(_valid1 && valid5){valid5 = false;passing1 = [passing1, 54];}else {if(_valid1){valid5 = true;passing1 = 54;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}if(!valid5){const err67 = {instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/oneOf",keyword:"oneOf",params:{passingSchemas: passing1},message:"must match exactly one schema in oneOf"};if(vErrors === null){vErrors = [err67];}else {vErrors.push(err67);}errors++;validate46.errors = vErrors;return false;}else {errors = _errs23;if(vErrors !== null){if(_errs23){vErrors.length = _errs23;}else {vErrors = null;}}}if(errors === _errs21){if(typeof data2 === "string"){if(!pattern21.test(data2)){validate46.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/pattern",keyword:"pattern",params:{pattern: "^[^#]*$"},message:"must match pattern \""+"^[^#]*$"+"\""}];return false;}}else {validate46.errors = [{instancePath:instancePath+"/modList/" + i0,schemaPath:"#/definitions/PlayerMod/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid3 = _errs20 === errors;if(!valid3){break;}}}else {validate46.errors = [{instancePath:instancePath+"/modList",schemaPath:"#/properties/modList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs18 === errors;}else {var valid0 = true;}}}}}else {validate46.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate46.errors = vErrors;return errors === 0;}function validate45(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.achievementList === undefined) && (missing0 = "achievementList")){validate45.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!(key0 === "achievementList")){validate45.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.achievementList !== undefined){let data0 = data.achievementList;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){const _errs4 = errors;if(!(validate46(data0[i0], {instancePath:instancePath+"/achievementList/" + i0,parentData:data0,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);errors = vErrors.length;}var valid1 = _errs4 === errors;if(!valid1){break;}}}else {validate45.errors = [{instancePath:instancePath+"/achievementList",schemaPath:"#/properties/achievementList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}}}else {validate45.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate45.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((((data.enemyBaseCountList === undefined) && (missing0 = "enemyBaseCountList")) || ((data.enemyBaseLifeList === undefined) && (missing0 = "enemyBaseLifeList"))) || ((data.enemyList === undefined) && (missing0 = "enemyList"))) || ((data.version === undefined) && (missing0 = "version"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs1 = errors;for(const key0 in data){if(!((((((((key0 === "$schema") || (key0 === "version")) || (key0 === "resourceList")) || (key0 === "player")) || (key0 === "enemyBaseLifeList")) || (key0 === "enemyBaseCountList")) || (key0 === "enemyList")) || (key0 === "components"))){validate10.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];return false;break;}}if(_errs1 === errors){if(data.$schema !== undefined){const _errs2 = errors;if(typeof data.$schema !== "string"){validate10.errors = [{instancePath:instancePath+"/$schema",schemaPath:"#/properties/%24schema/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.version !== undefined){let data1 = data.version;const _errs4 = errors;if(typeof data1 !== "string"){validate10.errors = [{instancePath:instancePath+"/version",schemaPath:"#/properties/version/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}if("v0" !== data1){validate10.errors = [{instancePath:instancePath+"/version",schemaPath:"#/properties/version/const",keyword:"const",params:{allowedValue: "v0"},message:"must be equal to constant"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.resourceList !== undefined){let data2 = data.resourceList;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data2)){var valid1 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){const _errs8 = errors;if(!(validate11(data2[i0], {instancePath:instancePath+"/resourceList/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid1 = _errs8 === errors;if(!valid1){break;}}}else {validate10.errors = [{instancePath:instancePath+"/resourceList",schemaPath:"#/properties/resourceList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.player !== undefined){const _errs9 = errors;if(!(validate13(data.player, {instancePath:instancePath+"/player",parentData:data,parentDataProperty:"player",rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var valid0 = _errs9 === errors;}else {var valid0 = true;}if(valid0){if(data.enemyBaseLifeList !== undefined){let data5 = data.enemyBaseLifeList;const _errs10 = errors;if(errors === _errs10){if(Array.isArray(data5)){var valid2 = true;const len1 = data5.length;for(let i1=0; i1<len1; i1++){let data6 = data5[i1];const _errs12 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate10.errors = [{instancePath:instancePath+"/enemyBaseLifeList/" + i1,schemaPath:"#/properties/enemyBaseLifeList/items/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid2 = _errs12 === errors;if(!valid2){break;}}}else {validate10.errors = [{instancePath:instancePath+"/enemyBaseLifeList",schemaPath:"#/properties/enemyBaseLifeList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.enemyBaseCountList !== undefined){let data7 = data.enemyBaseCountList;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data7)){var valid3 = true;const len2 = data7.length;for(let i2=0; i2<len2; i2++){let data8 = data7[i2];const _errs16 = errors;if(!((typeof data8 == "number") && (isFinite(data8)))){validate10.errors = [{instancePath:instancePath+"/enemyBaseCountList/" + i2,schemaPath:"#/properties/enemyBaseCountList/items/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid3 = _errs16 === errors;if(!valid3){break;}}}else {validate10.errors = [{instancePath:instancePath+"/enemyBaseCountList",schemaPath:"#/properties/enemyBaseCountList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.enemyList !== undefined){let data9 = data.enemyList;const _errs18 = errors;if(errors === _errs18){if(Array.isArray(data9)){var valid4 = true;const len3 = data9.length;for(let i3=0; i3<len3; i3++){const _errs20 = errors;if(!(validate15(data9[i3], {instancePath:instancePath+"/enemyList/" + i3,parentData:data9,parentDataProperty:i3,rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}var valid4 = _errs20 === errors;if(!valid4){break;}}}else {validate10.errors = [{instancePath:instancePath+"/enemyList",schemaPath:"#/properties/enemyList/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.components !== undefined){let data11 = data.components;const _errs21 = errors;if(errors === _errs21){if(data11 && typeof data11 == "object" && !Array.isArray(data11)){const _errs23 = errors;for(const key1 in data11){if(!((((((key1 === "playerClasses") || (key1 === "skills")) || (key1 === "weapon")) || (key1 === "artifacts")) || (key1 === "ascension")) || (key1 === "achievements"))){validate10.errors = [{instancePath:instancePath+"/components",schemaPath:"#/properties/components/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];return false;break;}}if(_errs23 === errors){if(data11.playerClasses !== undefined){const _errs24 = errors;if(!(validate17(data11.playerClasses, {instancePath:instancePath+"/components/playerClasses",parentData:data11,parentDataProperty:"playerClasses",rootData}))){vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);errors = vErrors.length;}var valid5 = _errs24 === errors;}else {var valid5 = true;}if(valid5){if(data11.skills !== undefined){const _errs25 = errors;if(!(validate19(data11.skills, {instancePath:instancePath+"/components/skills",parentData:data11,parentDataProperty:"skills",rootData}))){vErrors = vErrors === null ? validate19.errors : vErrors.concat(validate19.errors);errors = vErrors.length;}var valid5 = _errs25 === errors;}else {var valid5 = true;}if(valid5){if(data11.weapon !== undefined){const _errs26 = errors;if(!(validate27(data11.weapon, {instancePath:instancePath+"/components/weapon",parentData:data11,parentDataProperty:"weapon",rootData}))){vErrors = vErrors === null ? validate27.errors : vErrors.concat(validate27.errors);errors = vErrors.length;}var valid5 = _errs26 === errors;}else {var valid5 = true;}if(valid5){if(data11.artifacts !== undefined){const _errs27 = errors;if(!(validate35(data11.artifacts, {instancePath:instancePath+"/components/artifacts",parentData:data11,parentDataProperty:"artifacts",rootData}))){vErrors = vErrors === null ? validate35.errors : vErrors.concat(validate35.errors);errors = vErrors.length;}var valid5 = _errs27 === errors;}else {var valid5 = true;}if(valid5){if(data11.ascension !== undefined){const _errs28 = errors;if(!(validate39(data11.ascension, {instancePath:instancePath+"/components/ascension",parentData:data11,parentDataProperty:"ascension",rootData}))){vErrors = vErrors === null ? validate39.errors : vErrors.concat(validate39.errors);errors = vErrors.length;}var valid5 = _errs28 === errors;}else {var valid5 = true;}if(valid5){if(data11.achievements !== undefined){const _errs29 = errors;if(!(validate45(data11.achievements, {instancePath:instancePath+"/components/achievements",parentData:data11,parentDataProperty:"achievements",rootData}))){vErrors = vErrors === null ? validate45.errors : vErrors.concat(validate45.errors);errors = vErrors.length;}var valid5 = _errs29 === errors;}else {var valid5 = true;}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/components",schemaPath:"#/properties/components/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs21 === errors;}else {var valid0 = true;}}}}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;}